/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.21';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function',\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/;\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports =  true && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n      : string;\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length;\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      if (iteratees.length) {\n        iteratees = arrayMap(iteratees, function(iteratee) {\n          if (isArray(iteratee)) {\n            return function(value) {\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n            }\n          }\n          return iteratee;\n        });\n      } else {\n        iteratees = [identity];\n      }\n\n      var index = -1;\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n          return object;\n        }\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      var low = 0,\n          high = array == null ? 0 : array.length;\n      if (high === 0) {\n        return 0;\n      }\n\n      value = iteratee(value);\n      var valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = baseTrim(value);\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n      // and escape the comment, thus injecting code that gets evaled.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Throw an error if a forbidden character was found in `variable`, to prevent\n      // potential command injection attacks.\n      else if (reForbiddenIdentifierChars.test(variable)) {\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n      }\n\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return baseTrim(string);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.slice(0, trimmedEndIndex(string) + 1);\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (true) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return _;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else {}\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/lodash/lodash.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _recto = __webpack_require__(/*! ./recto.json */ \"./src/recto.json\");\n\nvar recto = _interopRequireWildcard(_recto);\n\nvar _verso = __webpack_require__(/*! ./verso.json */ \"./src/verso.json\");\n\nvar verso = _interopRequireWildcard(_verso);\n\nvar _lodash = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar combined = _lodash2.default.merge(recto, verso); //generate recto.json and verso.json with Jupyter notebooks recto and verso in the word-to-json directory\n\ncombined = _lodash2.default.orderBy(combined, ['date'], ['asc']);\nvar comboSort = [];\n//console.log(JSON.stringify(combined, null, 4))\n\n_lodash2.default.forEach(combined, function (section) {\n    //let sortNum = createSortNum(section.manuscript)\n    //section.sortNum = sortNum\n    //comboSort.push(section)\n    console.log(section.manuscript, section.date, findMatchingList(section));\n});\n\nfunction findRecto(v) {\n    var versoName = v.manuscript;\n    var rectoName = _lodash2.default.replace(versoName, \"v\", \"r\");\n    var recto = _lodash2.default.find(combined, { 'manuscript': rectoName });\n    if (recto) {\n        console.log(versoName + \" ------ \" + recto.manuscript);\n    }\n    return recto;\n}\n\nfunction createSortNum(manuscriptName) {\n    var regex = /.+?(?=])/;\n    var found = manuscriptName.match(regex);\n    found = _lodash2.default.replace(found, \"Ms-\", \"\");\n    found = _lodash2.default.replace(found, \",\", \"\");\n    found = _lodash2.default.replace(found, \"v\", \"0\");\n    found = _lodash2.default.replace(found, \"r\", \"0\");\n    found = _lodash2.default.replace(found, \"[\", \"\");\n    return Number(found);\n}\n\nfunction findMatchingList(item) {\n    var result = void 0;\n    if (_lodash2.default.includes(item.manuscript, \"v\")) {\n        result = _lodash2.default.filter(combined, { \"date\": item.date, \"type\": \"recto\" });\n    }\n\n    if (_lodash2.default.includes(item.manuscript, \"r\")) {\n        result = _lodash2.default.filter(combined, { \"date\": item.date, \"type\": \"verso\" });\n    }\n\n    return result;\n}\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/recto.json":
/*!************************!*\
  !*** ./src/recto.json ***!
  \************************/
/*! exports provideddefault */
/***/ (function(module) {

eval("module.exports = [{\"type\":\"recto\",\"manuscript\":\"Ms-101,8r[4] (1914--0822) (NB)\",\"ger\":\"Die Logik muß für sich selber sorgen.<br>\",\"eng\":\"Logic must take care of itself. [5.473 (1)]<br>\",\"date\":\"1914-08-22\",\"pt-number\":\"5·3062\",\"pt-page\":\"52[4]\",\"tlp-number\":\"5·473 (1)\",\"cross-references\":\"22.8.14 (1)  13.10.14 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,8r[5] et 9r[1] (1914--0822) (NB)\",\"ger\":\"Wenn sich syntaktische Regeln für Funktionen <span class='underline_single'>überhaupt</span> aufstellen / lassen, dann ist die ganze Theorie der Dinge, Eigenschaften etc. überflüssig. Es ist auch gar zu auffällig daß weder in den „Grundgesetzen” noch in den „Principia Mathematica” von dieser Theorie die Rede ist. Nochmals: denn die Logik muß für sich selbst sorgen. Ein <span class='underline_single'>mögliches</span> Zeichen muß auch bezeichnen können. Alles was überhaupt möglich ist, ist auch legitim || erlaubt. Erinnern wir uns an die Erklärung warum „Sokrates ist Plato” unsinnig ist. Nämlich darum weil <span class='underline_single'>wir</span> eine willkürliche Bestimmung nicht getroffen haben, aber <span class='underline_double'>nicht</span> darum weil das Zeichen an und für sich etwa illegitim sei!<br>\",\"eng\":\"If syntactic rules for functions can be set up <span class='underline_single'>at all</span>, then the whole theory of things, properties etc. is superfluous. It is also very remarkable that neither <em>Basic Laws</em> nor <em>Principia Mathematica</em><em> </em>speak of such a theory. Once again: because logic must take care of itself. A <span class='underline_single'>possible</span><em> </em>sign must be able to signify too. Whatever is possible at all is also legitimate (permissible). Let’s remember the explanation why “Socrates is identical” is nonsense. That is, because <span class='underline_single'>we</span> have not set up an arbitrary convention, <span class='underline_double'>not</span> because a sign is illegitimate in and of itself! [<em>Cf. </em>5.473 (2-3).]<br>\",\"date\":\"1914-08-22\",\"pt-number\":\" 5·3063\",\"pt-page\":\"52[5]\",\"tlp-number\":\"5·473 (2-3)**\",\"cross-references\":\"22.8.14 (2)*  2.9.14 (1)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,12r[2] et 13r[1] (1914--0902) (NB)\",\"ger\":\"Wir müssen in einem gewissen Sinne uns nicht in der Logik irren können. Dies ist schon teilweise / darin ausgedrückt: Die Logik muß für sich selbst sorgen. Dies ist eine ungemein tiefe & wichtige Erkenntnis.<br>\",\"eng\":\"It must, in a certain sense be impossible for us to go wrong in logic. This is already partly expressed by saying: Logic must take care for itself. This is an extremely profound & important insight. [<em>Cf. </em>5.473 (2-3).]<br>\",\"date\":\"1914-09-02\",\"pt-number\":\"5·3063\",\"pt-page\":\"52[5]\",\"tlp-number\":\"5·473 (2-3)**\",\"cross-references\":\"22.8.14 (2)*  2.9.14 (1)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,13r[2] (1914--0902) (NB)\",\"ger\":\"Frege sagt: jeder rechtmäßig gebildete Satz muß einen Sinn haben und ich sage: jeder mögliche Satz ist rechtmäßig gebildet & wenn er keinen Sinn hat so kann das nur daran liegen daß wir einigen seiner Bestandteile keine Bedeutung <span class='underline_single'>gegeben</span> haben. Wenn wir auch glauben es getan zu haben.<br>\",\"eng\":\"Frege says: any well-formed sentence must make sense. And I say: any possible sentence is well-formed, and, if it doesn’t make sense, that can only be because we have not <span class='underline_single'>give</span><span class='underline_single'>n</span> any meaning<em> </em>to some of its constituents. Even if we think we have. [<em>Cf. </em>5.4733 (1-2).]<br>\",\"date\":\"1914-09-02\",\"pt-number\":\" 5·3064\",\"pt-page\":\"53[2]\",\"tlp-number\":\"5·4733 (1-2)*\",\"cross-references\":\"2.9.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,13r[3] et 14r[1] (1914--0903) (NB)\",\"ger\":\"     Wie ist es mit der Aufgabe der Philosophie vereinbar daß die Logik für sich selbst sorgen soll? Wenn wir z.B. fragen: ist die & die Tatsache von der Subjekt-Prädikat Form / dann müssen wir doch wissen was wir unter der „Subjekt-Prädikat Form” verstehen. Wir müssen wissen <span class='underline_single'>ob</span> es so eine Form überhaupt gibt. Wie können wir dies wissen? „Aus den Zeichen!” Aber wie? Wir haben ja gar keine <span class='underline_single'>Zeichen</span> von dieser Form. Wir können zwar sagen: Wir haben Zeichen die sich so benehmen wie solche von der Subjekt-Prädikat Form, aber beweist das daß es wirklich Tatsachen dieser Form geben muß? Nämlich: wenn diese vollständig analysiert sind. Und hier frägt es sich wieder: gibt es so eine vollständige Analyse? <span class='underline_single'>Und wenn nicht</span>: Was ist denn dann die Aufgabe der Philosophie?!!?<br>\",\"eng\":\"How can the task of philosophy be reconciled with logic’s having to look after itself? For example, if we ask: Is such and such a fact of the subject-predicate form? / then we must know what we mean by the \\\"subject-predicate form\\\". We must know <span class='underline_single'>whether</span> there is such a form at all. How can we know this? \\\"From the signs!\\\" But how? For we haven’t got any <span class='underline_single'>signs</span> of this form. To be sure, we can say: We have signs that behave like those of the subject-predicate form, but does that prove that there really must be facts of this form? Namely: if those signs are completely analyzed. And here the question is again: Is there such a complete analysis? <span class='underline_single'>And if not</span>: what is the task of philosophy then?!!? [<em>Cf. </em>4.1274 (2)] (~NB)<br>\",\"date\":\"1914-09-03\",\"pt-number\":\" 4·10227254\",\"pt-page\":\"35[6]\",\"tlp-number\":\"4·1274 (2)**\",\"cross-references\":\"3.9.14 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,14r[2] et 15r[1] (1914--0903) (NB)\",\"ger\":\"Also können wir uns fragen: Gibt es die Subjekt-Prädikat Form? Gibt es die Relationsform? Gibt es überhaupt / irgend eine der Formen von denen Russell und ich immer gesprochen haben? (Russell würde sagen: „ja! denn das ist einleuchtend.” <span class='underline_single'>Jaha</span>!)<br>\",\"eng\":\" So we can ask ourselves: Does the subject-predicate form exist? Does the relational form exit? Do any / any of the forms exist at all that Russell and I have always spoken? (Russell would say: \\\"Yes! Because that’s self-evident.\\\" <span class='underline_single'>Ha</span><span class='underline_single'>h</span>!)<br>\",\"date\":\"1914-09-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,15r[2] (1914--0903) (NB)\",\"ger\":\"Also: wenn <span class='underline_single'>alles</span> was gezeigt werden braucht durch die Existenz der Subjekt-Prädikat <span class='underline_double'>Sätze</span> etc. gezeigt wird dann ist die Aufgabe der Philosophie eine andere als ich ursprünglich annahm. Wenn dem aber nicht so ist so müßte das Fehlende durch eine Art Erfahrung gezeigt werden und das halte ich für ausgeschlossen.<br>\",\"eng\":\"So: if <span class='underline_single'>everything</span> that needs to be shown is shown by the existence of subject-predicate <span class='underline_double'>sentences</span> etc. then the task of philosophy is different from what I originally assumed. But if that is not so, then what is lacking would have to be shown by some kind of experience and I consider that to be out of the question.<br>\",\"date\":\"1914-09-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,15r[3] (1914--0903) (NB)\",\"ger\":\"Die Unklarheit liegt <span class='underline_single'>offenbar</span> in der Frage worin eigentlich die logische Identität von Zeichen und Bezeichnetem besteht! Und diese Frage ist (<span class='underline_single'>wieder</span>) eine Hauptansicht des ganzen philosophischen Problems.<br>\",\"eng\":\"The obscurity <span class='underline_single'>obviously</span> resides in the question “What does the logical identity of a sign and what it signifies really consist in?”! And this question is (<span class='underline_single'>once again</span>) a principal way of framing the whole philosophical problem.<br>\",\"date\":\"1914-09-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,16r[1] et 17r[1] (1914--0903) (NB)\",\"ger\":\"Es sei eine Frage der Philosophie gegeben: etwa die ob „ A ist gut” ein Subjekt-Prädikat Satz sei; oder die ob „A ist heller als B” ein Relationssatz sei!<span class='underline_single'> Wie </span><span class='underline_single'>läßt</span><span class='underline_single'> sich so eine Frage überhaupt entscheiden?!</span> Was für eine Evidenz kann mich darüber beruhigen daß – <span class='underline_single'>zum Beispiel</span> – die erste Frage bejaht werden muß? (Dies ist eine ungemein wichtige Frage). Ist die einzige Evidenz hier wieder <span class='underline_single'>jenes höchst zweifelhafte „Einleuchten”??</span> Nehmen wir eine ganz ähnliche Frage die aber einfacher & grundlegender ist; nämlich diese: ist ein Punkt in unserem Gesichtsbild ein „<span class='underline_single'>einfacher Gegenstand</span>”, ein <span class='underline_single'>Ding</span>? Solche Fragen habe ich doch bisher immer als die eigentlichen philosophischen angesehen – und sie sind es auch gewiß in einem Sinne – aber / nochmals: welche Evidenz könnte so eine Frage überhaupt entscheiden? Ist hier nicht ein Fehler in der Fragestellung denn es scheint als leuchtete mir über diese Frage <span class='underline_single'>gar nichts</span> ein; es scheint als könnte ich mit Bestimmtheit sagen, daß diese Fragen überhaupt nie entschieden werden könnten.<br>\",\"eng\":\"Consider some philosophical question, such as whether \\\"A is good\\\" is a subject-predicate proposition; or whether \\\"A is brighter than B\\\" is a relational proposition. <span class='underline_single'>How can such a question be </span><span class='underline_single'>resolv</span><span class='underline_single'>ed at all</span>? What kind of evidence can reassure me that - <span class='underline_single'>for example</span> - the first question must be answered in the affirmative? (This is an exceptionally important question). Is the only evidence here once again <span class='underline_single'>that extremely dubious \\\"self-evidence</span>\\\"? Let's take a very similar question, which is however simpler & more fundamental, namely this one: Is a point in our visual field a \\\"<span class='underline_single'>simple object</span>\\\", a <span class='underline_single'>thing</span>? Up to now, I have always regarded such questions as the real philosophical ones - and they surely are in some sense - but / once again: what evidence could resolve such a question? Isn't there a mistake in the formulation of the qustion here, for it seems to me that <span class='underline_single'>nothing at all</span> were self-evident to me about this question; it seems to me that I can say with certainty that these questions could never be resolved at all.<br>\",\"date\":\"1914-09-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,17r[2] (1914--0904) (NB)\",\"ger\":\"Wenn nicht die Existenz des Subjekt-Prädikat <span class='underline_single'>Satzes</span> alles Nötige zeigt dann könnte es doch nur die Existenz irgend einer besonderen Tatsache jener Form zeigen. Und die Kenntnis einer solchen kann nicht für die Logik wesentlich sein.<br>\",\"eng\":\"If the existence of the subject-predicate <span class='underline_single'>sentence</span> does not show everything necessary, then it could surely only be shown by the existence of some specific fact of that form. And knowing such a fact cannot be essential for logic.<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,17r[3] et 18r[1] (1914--0904) (NB)\",\"ger\":\"Gesetzt den Fall wir hätten ein Zeichen das <span class='underline_single'>wirklich</span> von der Subjekt-Prädikat Form wäre, wäre dieses für den Ausdruck von Subjekt-Prädikat Sätzen irgendwie geeigneter als unsere Subjekt-Prädikat Sätze? Es scheint nein! / Liegt das an der bezeichnenden Relation?<br>\",\"eng\":\"Suppose we had a sign that <span class='underline_single'>really</span> was of the subject-predicate form, would this be somehow more suitable for expressing subject-predicate propositions than our subject-predicate sentences are? It seems not! / Does this arise from the signifying relation?<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,18r[2] (1914--0904) (NB)\",\"ger\":\" Wenn sich die Logik ohne die Beantwortung gewisser Fragen abschließen läßt dann <span class='underline_single'>muß</span><span class='underline_single'> sie ohne</span> sie abgeschlossen werden.<br>\",\"eng\":\"If logic can be completed without answering certain questions then it <span class='underline_single'>must</span> be completed <span class='underline_single'>without</span> answering them.<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,18r[3] (1914--0904) (NB)\",\"ger\":\"Die logische Identität von Zeichen & Bezeichnetem besteht darin daß man im Zeichen nicht mehr & nicht weniger wiedererkennen darf als im Bezeichneten.<br>\",\"eng\":\"The logical identity of a sign and what it signifies consists in one’s not being allowed to recognise more or less in the sign than in what it signifies.<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,18r[4] (1914--0904) (NB)\",\"ger\":\" Wären Zeichen & Bezeichnetes <span class='underline_single'>nicht</span> ihrem vollen logischen Inhalte nach identisch dann müßte es noch etwas Fundamentaleres geben als die Logik.<br>\",\"eng\":\"If a sign and what it signifies were <span class='underline_single'>not</span> identical with regard to their entire logical content then there would have to be something even more fundamental than logic.<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,18r[5] (1914--0905) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,18r[6] et 19r[1] (1914--0905) (NB)\",\"ger\":\"Erinnere dich daß die Worte „Funktion” „Argument” „Satz” etc. in der Logik nicht / vorkommen dürfen!<br>\",\"eng\":\" Remember that the words \\\"function\\\", \\\"argument\\\", \\\"sentence\\\", etc. may not occur in logic!<br>\",\"date\":\"1914-09-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,19r[2] (1914--0905)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,19r[3] (1914--0905) (NB)\",\"ger\":\"Φ [ẐψZ]. ≝ .φx ≡xψx .⊃..φΦφ<br>Von zwei Klassen zu sagen sie seien identisch sagt etwas. Von zwei Dingen dies zu sagen sagt nichts dies schon zeigt die Unzulässigkeit der Russellschen Definition.<br>\",\"eng\":\"Φ [ẐψZ]. ≝ .φx ≡xψx .⊃..φΦφ<br>To say of two classes that they are identical says something. To say it of two things says nothing. This by itself shows the inadmissibility of Russell's definition.<br>\",\"date\":\"1914-09-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,19r[4] (1914--0906)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,19r[5] (1914--0906) (NB)\",\"ger\":\"Der letzte Satz ist eigentlich nichts anderes als der uralte Einwand gegen die Identität in der Mathematik. Nämlich der daß wenn 2 × 2 wirklich <span class='underline_single'>gleich</span> 4 wäre daß dieser Satz dann nicht mehr sagen würde als a = a.<br>\",\"eng\":\"The last sentence is actually nothing more than the age-old objection against identity in mathematics. Namely that if 2 × 2 really were really the <span class='underline_single'>same</span> as 4, then this proposition would say no more than a = a.<br>\",\"date\":\"1914-09-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,19r[6] (1914--0906) (NB)\",\"ger\":\"Könnte man sagen: Die Logik kümmert die Analysierbarkeit der Funktionen mit denen sie arbeitet <span class='underline_single'>nicht</span>.<br>\",\"eng\":\"Could one say: Logic does <span class='underline_single'>not</span> care about the analyzability of the functions with which it works.\\t\\t <br>\",\"date\":\"1914-09-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,20r[1] (1914--0906)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,20r[2] (1914--0907) (NB)\",\"ger\":\"Bedenke daß auch ein unanalysierter Subjekt-Prädikat Satz etwas <span class='underline_single'>ganz Bestimmtes</span> klar aussagt.<br>\",\"eng\":\"Remember that even an unanalyzed subject-predicate sentence is a clear statement of something <span class='underline_single'>completely</span><span class='underline_single'> definite</span>.<br>\",\"date\":\"1914-09-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,20r[3] et 21r[1] (1914--0907) (NB)\",\"ger\":\"Kann man nicht sagen: Es kommt nicht darauf an daß wir es mit nicht analysierbaren Subjekt-Prädikat Sätzen zu tun haben sondern darauf daß unsere Subjekt-Prädikat Sätze sich in <span class='underline_single'>jeder</span> Beziehung so wie solche benehmen d.h. also daß die Logik <span class='underline_single'>unserer</span> Subjekt-Prädikat Sätze dieselbe ist wie die Logik jener anderen. Es kommt uns ja nur darauf an die Logik abzuschließen und unser Haupteinwand gegen die nicht-analysierten Subjekt-Prädikat Sätze war der, daß wir ihre Syntax nicht aufstellen können solange wir ihre Analyse nicht kennen. Muß aber nicht die Logik eines / scheinbaren Subjekt-Prädikat Satzes dieselbe sein wie die Logik eines wirklichen? Wenn eine Definition überhaupt möglich ist, die dem Satz die Subjekt-Prädikat Form Form gibt …?<br>\",\"eng\":\"Can’t we say: It all depends, not on our dealing with unanalyzable subject-predicate-sentences, but on the fact that our subject-predicate-sentences behave in the same way as such sentences in <span class='underline_single'>every</span> respect, i.e. that the logic of <span class='underline_single'>our</span> subject-predicate-sentences is the same as the logic of those other ones. The point for us is simply to complete logic, and our main objection against unanalyzed subject-predicate sentences was that we cannot set up their syntax until we know their analysis. But must not the logic of an apparent subject-predicate sentence be the same as the logic of a real one? If a definition giving the proposition the subject-predicate form is possible at all...?<br>\",\"date\":\"1914-09-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,21r[2] (1914--0908) (NB)\",\"ger\":\"Das „Einleuchten” von dem Russell so viel sprach kann nur dadurch in der Logik entbehrlich werden daß die Sprache selbst jeden logischen Fehler verhindert. Und es ist klar daß jenes „Einleuchten” immer gänzlich trügerisch ist & war.<br>\",\"eng\":\"There is only one way in which “self-evidence”, which Russell mentioned so often, can become dispensable in logic: language itself is to forestall every logical mistake. And it is clear that that “self-evidence” is and always was completely deceptive. [<em>Cf. </em>5.4731]<br>\",\"date\":\"1914-09-08\",\"pt-number\":\" 5·30631\",\"pt-page\":\"53[1]\",\"tlp-number\":\"5·4731*\",\"cross-references\":\"8.9.14\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,21r[3] (1914--0919) (NB)\",\"ger\":\"Ein Satz wie „dieser Sessel ist braun” scheint etwas enorm Kompliziertes zu sagen, denn wollten wir diesen Satz so aussprechen daß uns niemand gegen ihn Einwendungen die aus seiner Vieldeutigkeit entspringen machen könnte so würde er endlos lang werden müssen.<br>\",\"eng\":\"A proposition like \\\"this chair is brown\\\" seems to say something enormously complicated, for if we wanted to make this proposition explicit in a way that nobody could object to it because of its ambiguity, it would have to be infinitely long.<br>\",\"date\":\"1914-09-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,22r[1] (1914--0920) (NB)\",\"ger\":\"<em>Daß</em><em> der</em> Satz ein logisches Abbild seiner Bedeutung ist leuchtet dem unbefangenen Auge ein.<br>\",\"eng\":\"That a sentence is a logical depiction of its meaning is obvious to the unbiased eye.<br>\",\"date\":\"1914-09-20\",\"pt-number\":\" 4·01\",\"pt-page\":\"8[2]\",\"tlp-number\":\"4·01 (1)\",\"cross-references\":\"20.9.14 (1)+  27.9.14 (4)**  27.10.14 (7)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,22r[2] (1914--0920) (NB)\",\"ger\":\"Gibt es Funktionen von Tatsachen? Z.B. „Es ist besser wenn dies der Fall ist als wenn jenes der Fall ist.”<br>\",\"eng\":\"Are there functions of facts? E.g. \\\"It is better for this to be the case than for that to be the case.”<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,22r[3] (1914--0920) (NB)\",\"ger\":\"Worin besteht denn die Verbindung zwischen dem Zeichen p und den übrigen Zeichen des Satzes: „Es ist gut daß p der Fall ist.”? Worin besteht diese Verbindung??<br>\",\"eng\":\"What, then, is the connection between the sign p and the other signs in the sentence \\\"It is good that p is the case\\\"? What does this connection consist in??<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,22r[4] (1914--0920) (NB)\",\"ger\":\"Der Unbefangene wird sagen: offenbar in der räumlichen Beziehung des Buchstaben p zu den zwei Nachbarzeichen. Wenn aber die Tatsache „p” eine solche wäre in welcher keine Dinge vorkommen??<br>\",\"eng\":\"The unbiased person will say: obviously in the spatial relationship of the letter p to the two neighboring signs. But what if the fact \\\"p\\\" were such as to contain no things?<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,22r[5] et 23r[1] (1914--0920) (NB)\",\"ger\":\" „Es ist gut <span class='underline_single'>daß</span> p” kann wohl analysiert / werden in „p . es ist gut <span class='underline_single'>wenn</span> p”.<br>\",\"eng\":\"\\\"It is good <span class='underline_single'>that</span> p\\\" can presumably be analyzed into \\\"p . it is good <span class='underline_single'>if</span> p\\\".<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,23r[2] (1914--0920) (NB)\",\"ger\":\"<span class='underline_single'>Wir setzen voraus: p sei </span><span class='underline_double'>nicht</span><span class='underline_single'> der Fall</span>: Was heißt es dann zu sagen, „es ist gut daß p?” Wir können ganz offenbar sagen, der Sachverhalt p sei gut ohne zu wissen ob „p” wahr oder falsch ist.<br>\",\"eng\":\"<span class='underline_single'>We</span><span class='underline_single'> suppose</span><span class='underline_single'> p is </span><span class='underline_double'>not</span><span class='underline_single'> the case</span>: now what does it mean to say \\\"it is good that p”? Quite obviously, we can say that the state of things p is good without knowing whether \\\"p\\\" is true or false.<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,23r[3] (1914--0920) (NB)\",\"ger\":\"Der Ausdruck der Grammatik: „Ein Wort bezieht sich auf ein anderes” wird hier beleuchtet.<br>\",\"eng\":\"This sheds light on the grammatical expression: \\\"One word refers to another\\\".\\t<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,23r[4] (1914--0920) (NB)\",\"ger\":\"Es handelt sich in den obigen Fällen darum anzugeben wie Sätze in sich zusammenhängen. Wie der <span class='underline_single'>Satz-Verband</span> zustande kommt.<br>\",\"eng\":\"The point of the cases above is to say how propositions are connected internally.  How a <span class='underline_single'>propositional</span><span class='underline_single'>-</span><span class='underline_single'>compound</span> comes about.<em> </em>[<em>Cf. </em>4.221.]<br>\",\"date\":\"1914-09-20\",\"pt-number\":\" 5·41011\",\"pt-page\":\"94[3]\",\"tlp-number\":\"4·221 (2) \",\"cross-references\":\"20.9.14 (8)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,23r[5] (1914--0920) (NB)\",\"ger\":\"(α β γ)         φ(α …)<br>Wie kann sich eine Funktion <span class='underline_single'>auf einen Satz beziehen</span>???? Immer die uralten Fragen!<br>\",\"eng\":\"(α β γ)         φ(α …)<br>How can a function refer <span class='underline_single'>to a proposition</span>????  Always the age-old questions!<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,24r[1] (1914--0920) (NB)\",\"ger\":\"Nur sich nicht von Fragen überhäufen lassen; nur es sich bequem machen!<br>\",\"eng\":\"Don't let yourself get overwhelmed by questions; just take it easy!<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,24r[2] et 25r[1] (1914--0920) (NB)\",\"ger\":\" „φ(ψx)”: Nehmen wir an uns sei eine Funktion eines Subjekt-Prädikat Satzes gegeben und wir wollen die Art der Beziehung der Funktion zum Satz dadurch erklären daß wir sagen: Die Funktion bezieht sich unmittelbar nur auf das Subjekt des Subjekt-Prädikat Satzes und was bezeichnet ist das logische Produkt aus dieser Beziehung und dem Subjekt-Prädikat Satzeichen. Wenn wir das nun sagen so könnte man fragen: wenn du den Satz so erklären kannst warum erklärst du dann nicht auch seine Bedeutung auf die analoge Art & Weise. Nämlich „sie sei keine Funktion einer Subjekt-Prädikat Tatsache sondern das logische Produkt einer solchen & einer Funktion ihres Subjektes”? Muß nicht der Einwand der gegen diese / Erklärung gilt auch gegen jene gelten?<br>\",\"eng\":\" “φ(ψx)”:\\tSuppose we are given a function of a subject-predicate proposition and we want to explain the way the function is related to the proposition by saying: The function only relates immediately to the subject of the subject-predicate proposition and what signifies is the logical product of this relation and the subject-predicate propositional sign. Now, if we say this, one might ask: If you can explain the proposition in this way, why don't you give an analogous explanation of its meaning? Namely: \\\"It is not a function of a subject-predicate fact but the logical product of such a fact and of a function of its subject\\\"? Must not the objection to the latter explanation hold against the former too?<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[2] (1914--0921) (NB)\",\"ger\":\"Es scheint mir jetzt plötzlich in irgend einem Sinne klar daß eine Eigenschaft eines Sachverhalts immer intern sein muß.<br>\",\"eng\":\"Now it suddenly seems to me in some sense clear that a property of a state of things must always be internal.<br>\",\"date\":\"1914-09-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[3] (1914--0921) (NB)\",\"ger\":\"φa, ψb, aRb. Man könnte sagen der Sachverhalt aRb habe immer eine gewisse Eigenschaft, wenn die beiden ersten Sätze wahr sind.<br>\",\"eng\":\" φa, ψb, aRb. One could say the state of things aRb always has a certain property, if the first two propositions are true.<br>\",\"date\":\"1914-09-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[4] (1914--0921) (NB)\",\"ger\":\"Wenn ich sage: Es ist gut daß p der Fall ist dann muß dies eben <span class='underline_single'>in sich</span> gut sein.<br>\",\"eng\":\" If I say: It is good that p is the case, then this must be good <span class='underline_single'>in itself</span>.<br>\",\"date\":\"1914-09-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[5] (1914--0921) (NB)\",\"ger\":\"Es scheint mir jetzt klar daß es keine Funktionen von Sachverhalten geben kann.<br>\",\"eng\":\"It seems clear to me now that there cannot be functions of states of things.<br>\",\"date\":\"1914-09-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[6] (1914--0923)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,25r[7] (1914--0923)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,26r[1] (1914--0923) (NB)\",\"ger\":\"Man könnte fragen: wie kann der Sachverhalt p eine Eigenschaft haben, wenn es sich am Ende gar nicht so verhält?<br>\",\"eng\":\" One could ask: how can the state of things p have a property, if in the end //it isn’t//things aren’t// that way at all?<br>\",\"date\":\"1914-09-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,26r[2] (1914--0924) (NB)\",\"ger\":\"Die Frage, wie ist eine Zuordnung von Relationen möglich, ist identisch mit dem Wahrheits-Problem.<br>\",\"eng\":\" The question how a correlation of relations is possible is identical to the problem of truth.<br>\",\"date\":\"1914-09-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,26r[3] (1914--0925) (NB)\",\"ger\":\"Denn dies ist identisch mit der Frage wie ist die Zuordnung von Sachverhalten möglich (einem bezeichnenden & einem bezeichneten).<br>\",\"eng\":\"For that is identical with the question how the correlation of states of things is possible (one that signifies and one that is signified).<br>\",\"date\":\"1914-09-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,26r[4] (1914--0925) (NB)\",\"ger\":\"Sie ist nur durch die Zuordnung der Bestandteile möglich; ein Beispiel bietet die Zuordnung von Namen & Benanntem. (Und es ist klar daß auch eine Zuordnung der Relationen auf irgend eine Weise stattfindet.)<br>\",\"eng\":\"It is only possible by correlating the constituents; the correlation of name and named is an example. (And it is clear too that there is a correlation of relations in some way).<br>\",\"date\":\"1914-09-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,26r[5] (1914--0925) (NB)\",\"ger\":\"Hier wird ein einfaches Zeichen einem Sachverhalt zugeordnet.<br>\",\"eng\":\"Here a simple sign is correlated with a state of things.<br>\",\"date\":\"1914-09-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,27r[1] (1914--0926) (NB)\",\"ger\":\"Worauf gründet sich unsere – sicher wohl begründete – Zuversicht daß wir jeden beliebigen Sinn in unserer zweidimensionalen Schrift werden ausdrücken können?!<br>\",\"eng\":\"What is the basis for our - certainly well-founded - confidence that we will be able to express any sense we like in our two-dimensional writing?<br>\",\"date\":\"1914-09-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,27r[2] (1914--0927) (NB)\",\"ger\":\"Ein Satz kann seinen Sinn ja nur dadurch ausdrücken daß er dessen logisches Abbild ist!<br>\",\"eng\":\"A proposition can express its sense <span class='underline_single'>only</span> by being its logical depiction.<br>\",\"date\":\"1914-09-27\",\"pt-number\":\" 4·071\",\"pt-page\":\"48[3]\",\"tlp-number\":\"4·03 (4)\",\"cross-references\":\"27.9.14 (1)**  3.10.14 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,27r[3] (1914--0927) (NB)\",\"ger\":\"Auffallend ist die Ähnlichkeit zwischen den Zeichen „aRb” und „aσR ∙ Rσb”.<br>\",\"eng\":\" The similarity between these signs is striking: <br>\",\"date\":\"1914-09-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,27r[4] (1914--0929) (NB)\",\"ger\":\"<em>Der allgemeine</em> Begriff des Satzes führt auch einen ganz allgemeinen Begriff der Zuordnung von Satz und Sachverhalt mit sich: Die Lösung aller meiner Fragen muß <span class='underline_single'>höchst</span> einfach sein!<br>\",\"eng\":\"The general concept of the proposition also carries with it an entirely general concept of the correlation of proposition and state of things: The answer to all my questions must be <span class='underline_single'>extremely</span> simple!<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,28r[1] (1914--0929) (NB)\",\"ger\":\"Im Satz wird eine Welt probeweise zusammengestellt. (Wie wenn im Pariser Gerichtssaal ein Automobilunglück mit Puppen etc dargestellt wird.) <br>\",\"eng\":\" In a proposition an arrangement of a world is tried out. (As when in a Parisian courtroom a car accident is represented using dolls etc.). [<em>Cf. </em>4.031 (1).]<br>\",\"date\":\"1914-09-29\",\"pt-number\":\" 4·0711\",\"pt-page\":\"48[2]\",\"tlp-number\":\"4·031* (1)\",\"cross-references\":\"29.9.14 (2)**  15.10.14 (5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,28r[2] (1914--0929) (NB)\",\"ger\":\"Daraus muß sich (wenn ich nicht blind wäre) sofort das Wesen der Wahrheit ergeben.<br>\",\"eng\":\"This must yield the essence of truth straight away (if I were not blind).<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,28r[3] (1914--0929) (NB)\",\"ger\":\"Denken wir an hieroglyphische Schriften bei denen jedes Wort seine Bedeutung darstellt! Denken wir daran daß auch <span class='underline_single'>wirkliche</span> Bilder von Sachverhalten <span class='underline_single'>stimmen</span> und <span class='underline_single'>nicht stimmen</span> können.<br>\",\"eng\":\"Let us think of hieroglyphic writing in which each word represents its meaning. Let us think also of the fact that <span class='underline_single'>real</span> pictures of states of things can be <span class='underline_single'>right</span> or <span class='underline_single'>wrong</span>. [<em>Cf </em>4.016 (1).]<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"  4·0115\",\"pt-page\":\"26[7]\",\"tlp-number\":\"4·016 (1)**\",\"cross-references\":\"29.9.14 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,28r[4] et 29r[1] (1914--0929) (NB)\",\"ger\":\" „ „: Wenn in diesem Bild der rechte Mann den Menschen A vorstellt und bezeichnet der linke den Menschen B so könnte etwa das Ganze aussagen „A ficht mit B”. Der / Satz in Bilderschrift kann wahr und falsch sein. Er hat einen Sinn unabhängig von seiner Wahr- oder Falschheit. An ihm muß sich alles Wesentliche demonstrieren lassen.<br>\",\"eng\":\"“” If the man on the right in this picture the right represents person A and the one on the left man represents person B, then the whole thing could say \\\"A fences with B\\\". The proposition in picture writing can be true or false. It has a meaning independent of its truth or falsity. It must be possible to demonstrate everything essential by considering this case. \\t<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,29r[2] (1914--0929) (NB)\",\"ger\":\"Man kann sagen wir haben zwar nicht die Gewißheit daß wir alle Sachverhalte in Bildern aufs Papier bringen können wohl aber die Gewißheit daß wir alle <span class='underline_single'>logischen</span> Eigenschaften der Sachverhalte in einer zweidimensionalen Schrift abbilden können.<br>\",\"eng\":\"One can say that while we are not certain of being able to turn every state of things into pictures on paper, still we are certain that we can depict every <span class='underline_single'>logical</span> property of states of things in a two dimensional script.<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,29r[3] (1914--0929) (NB)\",\"ger\":\"Wir sind hier noch immer sehr an der Oberfläche aber wohl auf einer guten Ader.<br>\",\"eng\":\"We are still very much on the surface here, but may well have struck a rich vein.<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,29r[4] et 30r[1] (1914--0930) (NB)\",\"ger\":\"Man kann sagen in unserem Bilde stellt der Rechte etwas dar und auch der Linke, <span class='underline_single'>aber</span> selbst wenn dies nicht der Fall wäre so könnte / ihre gegenseitige Stellung etwas darstellen. (Nämlich eine Beziehung)<br>\",\"eng\":\" One could say that in our picture the right hand figure represents something and also the left hand one, <span class='underline_single'>but</span> even if this were not the case, their relative position could represent something. (Namely a relationship.)\\t\\t <br>\",\"date\":\"1914-09-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,30r[2] (1914--0930) (NB)\",\"ger\":\"Ein Bild kann Beziehungen darstellen die es nicht gibt!!! Wie ist dies möglich?<br>\",\"eng\":\"A picture can represent relations that do not exist!!! How is that possible?<br>\",\"date\":\"1914-09-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,30r[3] (1914--0930) (NB)\",\"ger\":\"Jetzt scheint es wieder als müßten alle Beziehungen logisch sein damit ihre Existenz durch die des Zeichens verbürgt sei.<br>\",\"eng\":\"Now once more it looks as if all relations must be logical in order for their existence to be guaranteed by that of the sign.<br>\",\"date\":\"1914-09-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,30r[4] (1914--1002) (NB)\",\"ger\":\"Was in „aRb ∙ bSc” a & c verbindet ist nicht das „ ∙ ” Zeichen sondern <span class='underline_single'>das Vorkommen desselben Buchstaben</span> „b” in den beiden einfachen Sätzen.<br>\",\"eng\":\"What connects a and c in \\\"aRb ∙ bSc\\\" is not the \\\" ∙ \\\" sign but <span class='underline_single'>the occurrence of the same letter</span> \\\"b\\\" in the two simple sentences.<br>\",\"date\":\"1914-10-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,30r[5] (1914--1002) (NB)\",\"ger\":\"Man kann geradezu sagen: statt „dieser Satz hat diesen & diesen Sinn”: „dieser Satz stellt diesen & diesen Sachverhalt dar!”<br>\",\"eng\":\"Instead of \\\"this proposition has such and such a sense\\\" one can just say \\\"this proposition represents such and such a state of things”. [<em>See</em> 4.031 (2).]<br>\",\"date\":\"1914-10-02\",\"pt-number\":\" 4·0712\",\"pt-page\":\"48[4]\",\"tlp-number\":\"4·031 (2)*\",\"cross-references\":\"2.10.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[1] (1914--1002) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-10-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[2] (1914--1002) (NB)\",\"ger\":\"Nur so kann <span class='underline_single'>der Satz</span> wahr oder falsch sei: nur dadurch kann er mit der Wirklichkeit übereinstimmen oder nicht übereinstimmen daß er <span class='underline_single'>ein Bild</span> eines Sachverhaltes ist.<br>\",\"eng\":\"Only in this way can <span class='underline_single'>a</span><span class='underline_single'> proposition</span> be true or false: it can only agree or disagree with reality by being a <span class='underline_single'>picture</span> of a state of things. [<em>See</em> 4.06.]<br>\",\"date\":\"1914-10-02\",\"pt-number\":\" 4·09\",\"pt-page\":\"8[4]\",\"tlp-number\":\"4·06*\",\"cross-references\":\"2.10.14 (4)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[3] (1914--1003) (NB)\",\"ger\":\"Nur in <span class='underline_single'>soweit</span> ist der Satz ein Bild eines Sachverhalts als er logisch gegliedert ist! (Ein einfaches – ungegliedertes – Zeichen kann weder wahr noch falsch sein.)<br>\",\"eng\":\"A proposition is a picture of a state of things only in <span class='underline_single'>so</span><span class='underline_single'> </span><span class='underline_single'>far</span> as it is logically articulated. (A simple – non-articulated – sign can be neither true nor false). [<em>See</em> 4.032 (1).]<br>\",\"date\":\"1914-10-03\",\"pt-number\":\" 4·072\",\"pt-page\":\"48[5]\",\"tlp-number\":\"4·032 (1)\",\"cross-references\":\"3.10.14 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[4] (1914--1003) (NB)\",\"ger\":\"Der <span class='underline_single'>Name</span> ist <span class='underline_single'>kein</span> Bild des Benannten!<br>\",\"eng\":\"A <span class='underline_single'>name</span> is <span class='underline_single'>not</span> a picture of what’s named!<br>\",\"date\":\"1914-10-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[5] (1914--1003) (NB)\",\"ger\":\"Der Satz <span class='underline_single'>sagt nur insoweit etwas aus</span>, als er <span class='underline_single'>ein Bild</span> ist!<br>\",\"eng\":\"A proposition <span class='underline_single'>states</span><span class='underline_single'> something only insofar</span> as it is a <span class='underline_single'>picture</span>! [<em>See</em> 4.03 (4).]<br>\",\"date\":\"1914-10-03\",\"pt-number\":\" 4·071\",\"pt-page\":\"48[3]\",\"tlp-number\":\"4·03 (4)\",\"cross-references\":\"27.9.14 (1)**  3.10.14 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,31r[6] et 32r[1] (1914--1003) (NB)\",\"ger\":\"Tautologien sagen nichts aus, sie sind nicht Bilder von Sachverhalten: Sie sind / selber logisch vollkommen neutral. (Das logische Produkt einer Tautologie und eines Satzes sagt nicht mehr noch weniger aus als dieser allein.)<br>\",\"eng\":\" Tautologies state nothing, they are are not pictures of states of things. They are themselves logically completely neutral. (The logical product of a tautology and a propostion says neither more nor less than the latter by itself.) [<em>See</em> 4.462 and <em>cf</em>. 4.465.]<br>\",\"date\":\"1914-10-03\",\"pt-number\":\"4·449\",\"pt-page\":\"45[6]\",\"tlp-number\":\"4·465**\",\"cross-references\":\"3.10.14 (4)  25.5.15 (4)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,32r[2] (1914--1004) (NB)\",\"ger\":\"Es ist klar daß in „xRy” das bezeichnende Element einer Relation enthalten sein kann auch wenn „x” & „y” nichts bezeichnen. Und dann ist die Relation das einzige was in jenem Zeichen bezeichnet wird.<br>\",\"eng\":\"It is clear that \\\"xRy\\\" can contain an element signifying a relation even if \\\"x\\\" & \\\"y\\\" do not signify anything. And then the relation is the only thing that is signified in that sign.<br>\",\"date\":\"1914-10-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,32r[3] (1914--1004) (NB)\",\"ger\":\"Aber wie ist es dann [bezieht sich auf früher] möglich, daß in einem Code „Kilo” heißt: „es geht mir gut”? Hier sagt doch ein <span class='underline_single'>einfaches Zeichen</span> etwas aus und wird benützt andern etwas mitzuteilen!! –<br>\",\"eng\":\"But in that case [referring back] how is it possible for \\\"kilo\\\" in a code to mean \\\"I’m all right\\\"? Here surely <span class='underline_single'>a simple sign</span> does state something and is used to tell others something! –<br>\",\"date\":\"1914-10-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,32r[4] (1914--1004) (NB)\",\"ger\":\"Kann denn in der vorigen Bedeutung das <span class='underline_single'>Wort</span> „Kilo” nicht wahr oder falsch sein?!<br>\",\"eng\":\"For can’t the <span class='underline_single'>word</span> \\\"kilo\\\", with that meaning, be true or false?!<br>\",\"date\":\"1914-10-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,33r[1] (1914--1005) (NB)\",\"ger\":\"Jedenfalls kann man doch ein einfaches Zeichen dem Sinne eines Satzes zuordnen. ––<br>\",\"eng\":\"At any rate surely a simple sign can be correlated with the sense of a sentence. ––<br>\",\"date\":\"1914-10-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,33r[2] (1914--1005) (NB)\",\"ger\":\"Nur die Wirklichkeit interessiert die Logik. Also die Sätze <span class='underline_double'>nur</span> insoweit sie <span class='underline_single'>Bilder</span> der Wirklichkeit sind.<br>\",\"eng\":\"Logic is interested only in reality. And so in sentences <span class='underline_double'>only</span> in so far as they are <span class='underline_single'>pictures</span> of reality.<br>\",\"date\":\"1914-10-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,33r[3] (1914--1005) (NB)\",\"ger\":\"Wie aber kann <span class='underline_double'>ein</span> <span class='underline_single'>Wort</span> wahr oder falsch sein? Es kann jedenfalls nicht den <span class='underline_single'>Gedanken</span> ausdrücken, der mit der Wirklichkeit übereinstimmt oder nicht übereinstimmt. Der muß doch gegliedert sein!<br>\",\"eng\":\" But how can <span class='underline_double'>one</span> <span class='underline_single'>word</span> be true or false? However that may be, it cannot express a <span class='underline_single'>thought</span> that agrees or disagrees with reality. That <span class='underline_single'>must</span> be articulated.<br>\",\"date\":\"1914-10-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,33r[4] (1914--1005) (NB)\",\"ger\":\"Ein Wort kann nicht wahr oder falsch sein in <span class='underline_single'>dem</span> Sinne, daß es nicht mit der Wirklichkeit übereinstimmen kann, oder das Gegenteil.<br>\",\"eng\":\"A single word cannot be true or false in <span class='underline_single'>this</span> sense: it cannot agree with reality, or the opposite.\\t<br>\",\"date\":\"1914-10-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,33r[5] et 34r[1] (1914--1006) (NB)\",\"ger\":\"Der allgemeine Begriff zweier Komplexe von denen der eine das logische Bild des / <br>andern sein kann, also in <span class='underline_single'>einem</span> Sinne <span class='underline_single'>ist</span>.<br>\",\"eng\":\"The general concept of two complexes, one of which is the logical image of the other, and so <br>\",\"date\":\"1914-10-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,34r[2] (1914--1006) (NB)\",\"ger\":\" / \\\\\\tDie Übereinstimmung zweier Komplexe ist offenbar <span class='underline_single'>intern</span> und kann daher nicht ausgedrückt sondern nur gezeigt werden.<br>\",\"eng\":\"The agreement of two complexes is obviously <span class='underline_single'>internal</span> and for that reason can not be expressed but only shown.<br>\",\"date\":\"1914-10-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,34r[3] (1914--1006) (NB)\",\"ger\":\" / \\\\\\t„p” ist wahr sagt nichts anderes aus als p!<br>„‚p’ ist wahr” ist – nach dem Obigen – nur ein Scheinsatz wie alle jene Zeichenverbindungen die scheinbar etwas sagen was nur gezeigt werden kann.<br>\",\"eng\":\"\\\"p\\\" is true, says nothing else but p.<br>\\\"'p' is true\\\" is - according to the above - only a pseudo-proposition like all those combinations of signs, which apparently say something that can only be shown.<br>\",\"date\":\"1914-10-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,34r[4] (1914--1007) (NB)\",\"ger\":\"Wenn ein Satz φa gegeben ist so sind mit ihm auch <span class='underline_single'>schon</span> alle seine logischen Funktionen (~φa etc.) mitgegeben!<br>\",\"eng\":\"If a proposition φa is given, then <span class='underline_single'>at the same time</span> all its logical functions (~φa, etc.) are given. [<em>Cf</em>. 5.442.]<br>\",\"date\":\"1914-10-07\",\"pt-number\":\" 5·234\",\"pt-page\":\"36[1]\",\"tlp-number\":\"5·442**\",\"cross-references\":\" 7.10.14**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,34r[5] (1914--1008) (NB)\",\"ger\":\"Vollständige und unvollständige Abbildung eines Sachverhaltes.<br>\",\"eng\":\"Complete and incomplete depiction of a state of things.<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,35r[1] (1914--1008) (NB)\",\"ger\":\"\",\"eng\":\"[5 coded lines from the middle of 7.10.14 diary entry]<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,35r[2] (1914--1008) (NB)\",\"ger\":\" (Funktion und Argument wird durch Funktion und Argument abgebildet.)<br>\",\"eng\":\"(Function plus argument is depicted by function plus argument.)<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,35r[3] (1914--1008) (NB)\",\"ger\":\"Der Ausdruck „nicht mehr weiter zerlegbar” ist auch einer der mit „Funktion”, „Ding” etc. auf dem Index stehenden; wie aber wird das <span class='underline_single'>gezeigt</span> was wir durch ihn ausdrücken wollen?<br>\",\"eng\":\"The expression \\\"not further analysable\\\" is one of those on the Index, along with \\\"function\\\", \\\"thing\\\" etc.; but how does what we try to express by it get <span class='underline_single'>shown</span>?<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,35r[4] (1914--1008) (NB)\",\"ger\":\" (Man kann natürlich weder von einem Ding noch von einem Komplex sagen sie seien nicht mehr weiter zerlegbar.)<br>\",\"eng\":\"(Of course, it cannot be said--neither of a thing nor of a complex--that it is not further analysable).<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,35r[5] et 36r[1] (1914--1009) (NB)\",\"ger\":\"Wenn es eine unmittelbare Zuordnung von Relationen gäbe so wäre die Frage: wie sind dann die Dinge zu einander zugeordnet die in diesen Relationen stehen? Gibt es / eine direkte Zuordnung von Relationen ohne Rücksicht auf ihren <span class='underline_single'>Sinn</span>?<br>\",\"eng\":\"If there were such a thing as an immediate correlation of relations, the question would be: how are things that stand in these relations correlated with one another? Is there such a thing as a direct correlation of relations without considering their <span class='underline_single'>sense</span>?<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,36r[2] (1914--1009) (NB)\",\"ger\":\"Ob wir zu der Annahme von „Beziehungen zwischen Beziehungen” nicht nur irregeführt werden, durch die scheinbare Analogie zwischen den Ausdrücken:<br>„Beziehungen zwischen Dingen”<br>und „Beziehungen zwischen Beziehungen”?<br>\",\"eng\":\"Aren’t we misled into assuming \\\"relations between relations\\\" merely by the apparent analogy between the expressions<br>\\\"relations between things\\\"<br>and \\\"relationships between relationships\\\"?<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,36r[3] (1914--1009) (NB)\",\"ger\":\"<span class='underline_single'>Ich mache bei allen diesen Überlegungen irgendwo </span><span class='underline_single'>irgend einen</span><span class='underline_single'> </span><span class='underline_double'>grundlegenden Fehler</span>.<br>\",\"eng\":\"<span class='underline_single'>In all these considerations I am somewhere making some sort of </span><span class='underline_double'>fundamental mistake</span>.<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,36r[4] (1914--1009) (NB)\",\"ger\":\"Die Frage nach der Möglichkeit von Existenzsätzen steht nicht in der Mitte sondern am Uranfang der Logik.<br>\",\"eng\":\"The question about the possibility of existence propositions does not come in the middle but at the very first beginning of logic.<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,36r[5] (1914--1009) (NB)\",\"ger\":\"Alle Probleme die das „Axiom of Infinity“ mit sich bringt sind schon im Satze „(∃x) x = x” zu lösen!<br>\",\"eng\":\"All the problems that come along with the \\\"Axiom of Infinity\\\" have already to be solved in the proposition \\\"(∃x) x = x\\\".  [<em>Cf</em>. 5.535 (2).]<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"5·33412\",\"pt-page\":\"59[5]\",\"tlp-number\":\"5·535 (2)\",\"cross-references\":\"(9.10.14 (5)+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,36r[6] (1914--1010) (NB)\",\"ger\":\"Oft macht man eine Bemerkung und sieht erst später <span class='underline_single'>wie</span> wahr sie ist.<br>\",\"eng\":\"Often one makes a remark and only later sees <span class='underline_single'>how</span> true it is.<br>\",\"date\":\"1914-10-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,37r[1] (1914--1011) (NB)\",\"ger\":\"Unsere Schwierigkeit liegt jetzt darin daß in der Sprache allem Anscheine nach die Analysierbarkeit oder das Gegenteil nicht wiedergespiegelt wird. Das heißt: wir können, wie es scheint aus der Sprache allein <span class='underline_single'>nicht</span> entnehmen ob es z.B. wirkliche Subjekt-Prädikat Tatsachen gibt oder nicht. Wie aber <span class='underline_double'>könnten</span> wir diese Tatsache oder ihr Gegenteil <span class='underline_single'>ausdrücken</span>? <span class='underline_single'>Dies </span><span class='underline_single'>muß</span><span class='underline_single'> </span><span class='underline_single'>gezeigt</span> werden!<br>\",\"eng\":\"Our difficulty now lies in the fact that to all appearances analyzability, or its opposite, is not reflected in language. That is to say: we can <span class='underline_single'>not</span>, as it seems, gather from language alone whether there are, for example, real subject-predicate facts or not. But how <span class='underline_double'>could</span> we <span class='underline_single'>express</span> this fact or its opposite? <span class='underline_single'>This must</span> be <span class='underline_single'>shown</span>!<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,37r[2] et 38r[1] (1914--1011) (NB)\",\"ger\":\"Wie aber, wenn wir uns um die Frage der Zerlegbarkeit gar nicht kümmerten? (Wir würden dann mit Zeichen arbeiten die nichts bezeichnen, sondern nur, durch ihre logischen Eigenschaften ausdrücken <span class='underline_single'>helfen</span>.) Denn auch der unzerlegte Satz spiegelt ja logische Eigenschaften seiner Bedeutung wieder. Wie also wenn wir sagten: daß ein Satz weiter zerlegbar ist / das zeigt sich wenn wir ihn durch Definitionen weiter zerlegen und wir arbeiten mit ihm in jedem Fall gerade so als wäre er unanalysierbar.<br>\",\"eng\":\"But suppose we did not bother at all about the question of analyzability? (Then we would work with signs that do not refer to anything, but merely <span class='underline_single'>help</span> to express by their logical properties). For even the unanalysed proposition reflects logical properties of its meaning. Suppose then we said: that a proposition is further analyzable is shown in our further analyzing it by means of definitions, and we work with it in every case just as if it was unanalyzable.<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,38r[2] (1914--1011) (NB)\",\"ger\":\"Bedenke, daß die „Sätze von den <span class='underline_single'>unendlichen</span> Anzahlen” alle mit <span class='underline_single'>endlichen</span> Zeichen dargestellt sind! <br>\",\"eng\":\"Remember that all \\\"theorems about <span class='underline_single'>infinite</span> numbers\\\" are represented using <span class='underline_single'>finite</span> signs.<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,38r[3] (1914--1011) (NB)\",\"ger\":\"Aber brauchen wir – wenigstens nach Freges Methode – nicht hundert Millionen Zeichen um die Zahl 100.000.000 zu definieren? (Kommt es hier nicht darauf an ob sie auf Klassen oder Dinge angewandt wird?)<br>\",\"eng\":\"But don't we - at least on Frege's method - need a hundred million signs to define the number 100,000,000? (Doesn't this depend on whether it is applied to classes or things?)<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,38r[4] et 39r[1] (1914--1011) (NB)\",\"ger\":\"Die Sätze die von den unendlichen Zahlen handeln können wie <span class='underline_single'>alle</span> Sätze der Logik dadurch erhalten werden daß man die Zeichen selber berechnet (denn es tritt zu den ursprünglichen Urzeichen ja an keiner Stelle ein fremdes Element hinzu), / also müssen auch hier die Zeichen alle logischen Eigenschaften des Dargestellten selber haben.<br>\",\"eng\":\"The propositions dealing with infinite numbers, like <span class='underline_single'>all</span> propositions of logic, can be got by calculating the signs themselves (for at no point does a foreign element get added to the original primitive signs.) So here, too, the signs must themselves have all the logical properties of the representeds.<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,39r[2] (1914--1012) (NB)\",\"ger\":\"Die triviale Tatsache daß ein vollkommen analysierter Satz ebensoviel Namen enthält als seine Bedeutung Dinge, diese Tatsache ist ein Beispiel der allumfassenden Darstellung der Welt durch die Sprache.<br>\",\"eng\":\"The trivial fact that a completely analyzed proposition contains just as many names as there are things in its reference; this fact is an example of the all-encompassing representation of the world by language.<br>\",\"date\":\"1914-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,39r[3] (1914--1012) (NB)\",\"ger\":\"Man müßte jetzt einmal genauer die Definitionen der Kardinalzahlen untersuchen um den eigentlichen Sinn von Sätzen wie dem „Axiom of Infinity“ zu verstehen.<br>\",\"eng\":\"We must now re-examine the definitions of the cardinal numbers more exactly in order to understand the real sense of propositions like the \\\"Axiom of Infinity\\\".<br>\",\"date\":\"1914-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,39r[4] (1914--1013) (NB)\",\"ger\":\"Die Logik sorgt für sich selbst; wir müssen ihr nur zusehen wie sie es macht.<br>\",\"eng\":\"Logic takes care of itself; all we have to do is to look and see how it does it. [<em>Cf.</em> 5 .473.]<br>\",\"date\":\"1914-10-13\",\"pt-number\":\" 5·3062\",\"pt-page\":\"52[4]\",\"tlp-number\":\"5·473 (1)\",\"cross-references\":\"22.8.14 (1)  13.10.14 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,39r[5] et 40r[1] (1914--1013) (NB)\",\"ger\":\"Betrachten wir den Satz: „Es gibt eine / Klasse mit nur einem Glied”. Oder, was auf dasselbe hinauskommt den Satz:<br>Bei „(∃x)x = x” konnte man verstehen daß er tautologisch sei da er überhaupt nicht hingeschrieben werden könnte wenn er falsch wäre, aber hier! <span class='underline_single'>Dieser</span> Satz kann an Stelle des „Axiom of Infinity“ untersucht werden!<br>\",\"eng\":\"Consider the proposition: \\\"There is a class with only one member\\\". Or, what comes to the same thing, the proposition:<br>If we take \\\"(∃x)x = x\\\" it might be understand to be tautological since it could not be written down at all if it were false, but here! <span class='underline_single'>This</span> proposition can be examined in place of the \\\"Axiom of Infinity\\\"!<br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,40r[2] (1914--1013) (NB)\",\"ger\":\"Ich weiß daß die folgenden Sätze wie sie stehen unsinnig sind: Kann man von den Zahlen reden wenn es nur Dinge gibt? Wenn also z.B. die Welt nur aus einem Dinge bestünde und aus sonst nichts, könnte man sagen es gäbe <span class='underline_double'>ein</span> Ding. Russell würde wahrscheinlich sagen: wenn es ein Ding gibt dann gibt es auch die Funktion (∃x) ξ̂ = x. Aber! ——<br>\",\"eng\":\"I know that the following sentences as they stand are nonsensical: Can one speak of numbers if there are only things? So, for example, if the world consisted of only one thing and of nothing else, could say one that there was <span class='underline_double'>one</span> thing? Russell would probably say: if there is one thing then there is also a function (∃x) ξ̂ = x. But! ——<br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,40r[3] et 41r[1] (1914--1013) (NB)\",\"ger\":\"Wenn es diese Funktion nicht tut dann / kann von der 1 nur die Rede sein wenn es eine materielle Funktion gibt die nur von einem Argument befriedigt wird.<br>\",\"eng\":\"If this function does not do it then we can only talk of 1 if there is a material function which is satisfied by only one argument.<br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,41r[2] (1914--1013) (NB)\",\"ger\":\"Wie verhält es sich mit Sätzen wie: <br>       (∃φ) . (∃x) .φ(x)<br>Ist einer von diesen eine Tautologie? Sind dies Sätze einer Wissenschaft, d.h. sind dies überhaupt <span class='underline_single'>Sätze</span>?<br>       (∃φ) . (∃x) .φ(x)<br>\",\"eng\":\"       (∃φ) . (∃x) .φ(x)<br>How is it with propositions like: <br>       (∃φ) . (∃x) .φ(x)<br>Is one of these a tautology? Are these propositions of some science, i.e., are they <span class='underline_single'>propositions</span> at all?<br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,41r[3] (1914--1013) (NB)\",\"ger\":\"Erinnern wir uns aber daß die <span class='underline_single'>Variable</span> & <span class='underline_single'>nicht</span> die Allgemeinheitsbezeichnung die Logik charakterisieren!<br>\",\"eng\":\"But let us remember that it is the <span class='underline_single'>variables</span> and <span class='underline_single'>not</span> the sign for generality that are characteristic of logic.<br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,41r[4] et 42r[1] (1914--1014) (NB)\",\"ger\":\"Gibt es denn eine Wissenschaft der vollständig verallgemeinerten Sätze? Dies klingt höchst unwahrscheinlich. / <span class='underline_single'>Das ist klar</span>: Wenn es völlig verallgemeinerte <span class='underline_single'>Sätze</span> gibt, dann hängt ihr Sinn von keiner willkürlichen Zeichengebung mehr ab! Dann aber kann eine solche Zeichenverbindung die Welt nur durch ihre eigenen logischen Eigenschaften darstellen d.h. sie kann nicht falsch, & nicht wahr sein. Also gibt es keine vollständig verallgemeinerten <span class='underline_double'>Sätze</span>. Aber jetzt die Anwendung!<br>\",\"eng\":\"Is there then such a thing as a science of completely generalized propositions? This sounds highly improbable.   <br><span class='underline_single'>This is clear</span>: If there are completely generalized <span class='underline_single'>propositions</span>, then their sense does not depend on any arbitrary assignment of signs! In that case, such a connection of signs can represent the world only by means of its own logical properties i.e. it cannot be false, and not be true. So there are no completely generalized <span class='underline_double'>propositions</span>. But now the application!<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,42r[2] (1914--1014) (NB)\",\"ger\":\"Nun aber die Sätze: „(∃φ,x) .φ(x)” <br>Welcher von ihnen ist tautologisch welcher kontradiktorisch?<br>\\\"(∃φ,x) .φ(x)\\\"<br>\",\"eng\":\"But now the propositions:<br>\\\"(∃φ,x) .φ(x)\\\"<br>Which of them is tautological, which contradictory?<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,42r[3] et 43r[1] (1914--1014) (NB)\",\"ger\":\"Immer wieder entsteht das Bedürfnis nach einer vergleichenden Zusammenstellung von Sätzen die in internen Beziehungen stehen. Man könnte zu diesem Buch geradezu Bildertafeln anlegen. / <br>(Die Tautologie <span class='underline_single'>zeigt</span> was sie zu <span class='underline_single'>sagen</span> scheint, die Kontradiktion zeigt <span class='underline_single'>das Gegenteil</span> von dem was sie zu sagen scheint.)<br>\",\"eng\":\"Again and again the need arises for a comparative compilation of propositions standing in internal relations. This book might well be constructed around such illustrations.<br>(A tautology <span class='underline_single'>shows</span> what it appears to <span class='underline_single'>say</span>, a contradiction shows the <span class='underline_single'>opposite</span> of what it appears to say).<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,43r[2] (1914--1014) (NB)\",\"ger\":\"Es ist klar daß wir alle überhaupt möglichen völlig allgemeinen Sätze bilden können sobald uns nur <span class='underline_single'>eine</span> <span class='underline_single'>Sprache</span> gegeben ist. Und darum ist es doch kaum zu glauben daß solche Zeichenverbindungen wirklich etwas über die Welt aussagen sollten. –––– Andererseits aber dieser graduelle Übergang vom elementaren Satz zum völlig allgemeinen!!<br>\",\"eng\":\"It is clear that we can form all the completely general sentences that are possible at all as soon as we are given just <span class='underline_single'>one</span><span class='underline_single'> language</span>. And that is why it is scarcely credible that such combinations of signs should really state anything about the world. –––– On the other hand, however, this gradual transition from an elementary proposition to a completely general one!!<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,43r[3] (1914--1014) (NB)\",\"ger\":\"Man kann sagen: die völlig allgemeinen Sätze kann man alle <span class='underline_single'>a priori</span> bilden.<br>\",\"eng\":\"One can say: completely general propositions can all be formed <span class='underline_single'><em>a priori</em></span>.<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,43r[4] et 44r[1] (1914--1015) (NB)\",\"ger\":\"Es scheint doch als könnte die bloße Existenz der in „(∃x,φ).φx” enthaltenen / Formen die Wahr- oder Falschheit dieses Satzes <span class='underline_single'>allein nicht</span> bestimmen! Es scheint also nicht <span class='underline_single'>undenkbar</span> daß, z.B., die Verneinung keines Elementarsatzes wahr sei. Aber würde diese Aussage nicht schon den <span class='underline_double'>Sinn</span> <span class='underline_single'>der Verneinung</span> betreffen?<br>\",\"eng\":\"Yet it does <span class='underline_single'>not</span> look as if the mere existence of the forms contained in \\\"(∃x,φ).φx\\\" could <span class='underline_single'>by itself</span> determine the truth or falsity of this proposition! So it does not appear <span class='underline_single'>unthinkable</span> that, e.g., the negation of no elementary proposition should be true. But wouldn’t this statement already concern the <span class='underline_double'>sense</span> <span class='underline_single'>of negation</span>?<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,44r[2] (1914--1015) (NB)\",\"ger\":\"Offenbar können wir jeden ganz allgemeinen Satz auffassen als die Bejahung oder Verneinung der Existenz irgend einer Art von Tatsachen. Aber gilt dies nicht von allen Sätzen?<br>\",\"eng\":\"Obviously, we can conceive every entirely general proposition as the affirmation or negation of the existence of some kind of facts. But does this not hold of all propositions?<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,44r[3] (1914--1015) (NB)\",\"ger\":\"Jede Zeichenverbindung die etwas über ihren eigenen Sinn auszusagen scheint ist ein Scheinsatz (wie alle Sätze der Logik).<br>\",\"eng\":\"Every combinations of signs which appears to say something about its own sense is a pseudo-proposition (like all propositions of logic).<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,44r[4] et 45r[1] (1914--1015) (NB)\",\"ger\":\"Der Satz soll einen Sachverhalt logisch vorbilden. Das kann er aber doch nur dadurch, daß seinen Elementen willkürlich Gegenstände / zugeordnet wurden. Wenn dies nun im ganz allgemeinen Satz nicht der Fall ist so ist nicht einzusehen wie er etwas außerhalb ihm darstellen soll.<br>\",\"eng\":\"A proposition is supposed to logically prefigure a state of things. It can surely only do this because objects have beeen arbitrarily correlated with its elements. Now if this is not the case in the entirely general proposition, then it is difficult to see how it should represent anything outside itself.<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,45r[2] (1914--1015) (NB)\",\"ger\":\"Im Satze stellen wir – sozusagen – <span class='underline_single'>zur Probe</span> die Dinge zusammen wie sie sich in Wirklichkeit aber <span class='underline_single'>nicht</span> zu verhalten brauchen, wir können aber nicht etwas <span class='underline_single'>Unlogisches</span> zusammenstellen denn dazu müßten wir in der Sprache aus der Logik heraus können. – Wenn aber der ganz allgemeine Satz <span class='underline_single'>nur</span> „<span class='underline_single'>logische</span> Konstante” enthält so kann er für uns nicht mehr sein als – einfach – ein logisches Gebilde und kann nicht mehr tun als uns seine eigenen logischen Eigenschaften zu zeigen. – Wenn es ganz allgemeine Sätze gibt, – <span class='underline_single'>was</span> stellen wir in ihnen probeweise zusammen??<br>\",\"eng\":\"In a proposition we – so to speak – <span class='underline_single'>try out</span> putting things together as they do <span class='underline_single'>not</span> have to be in reality; but we cannot make any <span class='underline_single'>unlogical</span> arrangement, for in order to do that we would have to be able to get outside logic within language. – But if the entirely general proposition contains <span class='underline_single'>only</span> \\\"<span class='underline_single'>logical</span> constants\\\", then it cannot be anything more to us than – simply – a logical formation and cannot do anything more than show us its own logical properties. – If there are entirely general propositions – <span class='underline_single'>what</span> do we try out in arranging them? [Cf 4.031 (1) and 3.03.]<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"4·0711\",\"pt-page\":\"48[2]\",\"tlp-number\":\"4·031 (1)\",\"cross-references\":\"29.9.14 (2)**  15.10.14 (5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,46r[1] (1914--1015) (NB)\",\"ger\":\"Wenn man sich vor der Wahrheit fürchtet (wie ich jetzt) so ahnt man nie die <span class='underline_single'>volle</span> Wahrheit.<br>\",\"eng\":\"If one is afraid of the truth (as I am now) then it is never the <span class='underline_single'>whole</span> truth that one suspects.<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,46r[2] (1914--1015) (NB)\",\"ger\":\"Ich habe hier die Beziehungen der Satz-Elemente zu ihren Bedeutungen gleichsam als Fühler betrachtet durch welche der Satz mit der Außenwelt in Berührung steht; und das Verallgemeinern eines Satzes gleicht dann dem Einziehen der Fühler; bis endlich der ganz allgemeine Satz ganz isoliert ist. Aber stimmt dieses Bild? (Ziehe ich wirklich einen Fühler ein wenn ich statt φ(a), (∃x).φ(x) sage?)<br>\",\"eng\":\"Here I have regarded the relations of the proposition’s elements to their meanings as antennae, so to speak, by means of which a proposition is in contact with the outer world. The generalization of a proposition then resembles the retraction of antennae, until finally an entirely general proposition is completely isolated. But is this picture correct? (Do I really retract an antenna if I say (∃x).φ(x) instead of φ(a)?) [<em>Cf </em>2.1515.]<br>\",\"date\":\"1914-10-15\",\"pt-number\":\" 2·1516\",\"pt-page\":\"14[10]\",\"tlp-number\":\"2·1515\",\"cross-references\":\"15.10.14 (7)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,46r[3] et 47r[1] (1914--1016) (NB)\",\"ger\":\"Nun scheint es aber als sprächen genau dieselben Gründe die ich anführte um zu zeigen daß „(∃x,φ) . φ(x)” nicht falsch sein <span class='underline_single'>k</span><span class='underline_single'>ö</span><span class='underline_single'>nne</span>, als sprächen diese Gründe auch dafür daß „~ (∃x,φ) . φ(x)” nicht / falsch sein könne; und hier zeigt sich ein grundlegender Fehler. Denn es ist gar nicht einzusehen warum gerade der erste Satz & nicht der zweite eine Tautologie sein soll. Vergiß doch nicht daß auch die Kontradiktion „p ∙ ~p” etc. etc. nicht wahr sein kann & doch selbst ein logisches Gebilde ist.<br>\",\"eng\":\"Now, however, it looks as if exactly the same reasons I used to show that \\\"(∃x,φ) . φ(x)\\\" <span class='underline_single'>could</span> not be false, are also reasons that can be used to show that \\\"~ (∃x,φ) . φ(x)\\\" could not be false; and here a fundamental mistake becomes apparent. For it is quite impossible to see why just the first proposition and not the second is supposed to be a tautology. But don’t forget that also the contradiction \\\"p ∙ ~p\\\" etc. etc. can't be true and is nevertheless itself a logical formation.<br>\",\"date\":\"1914-10-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,47r[2] (1914--1016) (NB)\",\"ger\":\"Angenommen daß keine Verneinung eines Elementarsatzes wahr ist hat in diesem Falle „Verneinung” nicht einen anderen Sinn als im entgegengesetzten Fall?<br>\",\"eng\":\"Supposing that no negation of an elementary proposition is true, doesn't \\\"negation\\\" have a different sense in this case than in the opposite case?<br>\",\"date\":\"1914-10-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,47r[3] (1914--1016) (NB)\",\"ger\":\"<span class='underline_single'> „(</span><span class='underline_single'>∃</span><span class='underline_single'>φ</span><span class='underline_single'>):(</span><span class='underline_single'>x).</span><span class='underline_single'>φ</span><span class='underline_single'>x</span><span class='underline_single'>”</span> – von diesem Satz scheint es fast gewiß daß er weder eine Tautologie noch eine Kontradiktion ist. Hier spitzt sich das Problem unerhört zu.<br>\",\"eng\":\"<span class='underline_single'>\\\"(</span><span class='underline_single'>∃</span><span class='underline_single'>φ</span><span class='underline_single'>):(</span><span class='underline_single'>x).</span><span class='underline_single'>φ</span><span class='underline_single'>x\\\"</span> - of this proposition it appears almost certain that it is neither a tautology nor a contradiction. Here the problem becomes extremely pointed.<br>\",\"date\":\"1914-10-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,47r[4] et 48r[1] (1914--1017) (NB)\",\"ger\":\"Wenn es ganz allgemeine Sätze gibt so / scheint es also als wären solche Sätze probeweise Zusammenstellungen „logischer Konstanten”. (!)<br>\",\"eng\":\"If there are entirely general propositions then it looks as if such propositions were trial arrangements of \\\"logical constants\\\". (!)<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,48r[2] (1914--1017) (NB)\",\"ger\":\"Kann man denn aber nicht die ganze Welt vollständig mit ganz allgemeinen Sätzen beschreiben? (Das Problem zeigt sich von allen Seiten.) Ja, man könnte die Welt vollständig durch ganz allgemeine Sätze beschreiben also ganz ohne irgend einen Namen oder sonst ein bezeichnendes Zeichen zu verwenden. Und um auf die gewöhnliche Sprache zu kommen brauchte man Namen etc. nur dadurch einführen indem man nach einem „(∃x)” sagte „und dieses x ist A” u.s.w.<br>\",\"eng\":\"But can't one describe the whole world completely by means of entirely general propositions? (The problem shows up on all sides.) Yes, one could describe the world completely by entirely general propositions, and hence wholly without using any kind of name or any other referring sign. And in order to arrive at ordinary language one would only need to introduce names etc. by saying after an \\\"(∃x)\\\", \\\"and that x is A\\\" and so on. [<em>Cf</em>. 5.526.]<br>\",\"date\":\"1914-10-17\",\"pt-number\":\" 5·324\",\"pt-page\":\"            63[1]\",\"tlp-number\":\"5·526 (2)*\",\"cross-references\":\"17.10.14 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,48r[3] (1914--1017) (NB)\",\"ger\":\"Man kann also ein Bild der Welt entwerfen ohne zu sagen was was darstellt.<br>\",\"eng\":\"Thus one can outline a picture of the world without saying what is a represention of what.<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,49r[1] (1914--1017) (NB)\",\"ger\":\"Nehmen wir z.B. an die Welt bestünde aus den Dingen A und B und der Eigenschaft F und es wäre F(A) der Fall und nicht F(B).<br>Diese Welt könnten wir auch durch die folgenden Sätze beschreiben:<br>      (∃φ).(ψ).ψ = φ<br>Und hier braucht man auch Sätze von der Art der letzten zwei nur die Gegenstände identifizieren zu können.<br>      (∃φ).(ψ).ψ = φ<br>\",\"eng\":\"      (∃φ).(ψ).ψ = φ<br>Suppose, for example, that the world consisted of the things A and B and the property F, and that F(A) were the case and not F(B).<br>We could also describe this world by means of the following propositions:<br>      (∃φ).(ψ).ψ = φ<br>And here one also needs propositions of the type of the last two just to be able to identify the objects.<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,49r[2] (1914--1017) (NB)\",\"ger\":\"Aus alledem folgt natürlich daß es <span class='underline_single'>ganz allgemeine Sätze gibt</span>!<br>\",\"eng\":\"From all this, of course, it follows that <span class='underline_single'>there are </span><span class='underline_single'>entirely </span><span class='underline_single'>general propositions</span>!<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,49r[3] et 50r[1] (1914--1017) (NB)\",\"ger\":\"Genügt oben nicht der erste Satz (∃x, y, φ) φx.~φy ∙ x ≠ y?<br>/ Die Schwierigkeit der Identifizierung kann man dadurch wegschaffen indem man die ganze Welt in <span class='underline_single'>einem</span> allgemeinen Satz beschreibt welcher anfängt: „(∃x, y, z … φ, ψ …R, S etc.)” und nun folgt ein logisches Produkt etc.<br>\",\"eng\":\"Isn’t the first proposition above enough: (∃x, y, φ) φx.~φy ∙ x ≠ y?<br>The difficulty of identification can be done away with by describing the whole world in a single general proposition which starts: \\\"(∃x, y, z ... φ, ψ ...R, S etc.)\\\" and now follows a logical product, etc.<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,50r[2] (1914--1017) (NB)\",\"ger\":\"Wenn wir sagen „φ ist eine Einheitsfunktion und (x).φx” so heißt das soviel wie: „es gibt nur ein Ding”! (Wir sind hiermit <span class='underline_single'>scheinbar</span> um den Satz „(∃x) . (y) . y = x” herumgekommen.)<br>\",\"eng\":\"If we say \\\"φ is a unit function and (x).φx\\\" it means something like \\\"There is only one thing\\\"! (By this means we have <span class='underline_single'>apparently</span> got round the proposition \\\"(∃x) . (y) . y = x.\\\")<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,50r[3] (1914--1018) (NB)\",\"ger\":\"Mein Fehler liegt offenbar in einer falschen Auffassung der logischen Abbildung durch den Satz.<br>\",\"eng\":\"My mistake obviously lies in a false conception of logical depiction by a proposition.<br>\",\"date\":\"1914-10-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,50r[4] et 51r[1] (1914--1018) (NB)\",\"ger\":\" / \\\\\\tEine Aussage kann nicht den logischen Bau der Welt betreffen, denn damit eine Aussage überhaupt möglich sei, damit ein Satz <span class='underline_double'>Sinn</span> haben / <span class='underline_double'>kann</span>, muß die Welt schon den logischen Bau haben, den sie eben hat. Die Logik der Welt ist aller Wahr- & Falschheit primär.<br><span class='underline_single'>Beiläufig</span> gesprochen: bevor irgend ein Satz überhaupt Sinn haben kann müssen die <span class='underline_single'>logischen</span> Konstanten Bedeutung haben.<br>\",\"eng\":\"A statement can't be concerned with the logical construction of the world, for in order for a statement to be possible at all, in order for a proposition to be <span class='underline_double'>capable</span> of making <span class='underline_double'>sense</span>, the world must already have just the logical construction that it has. The logic of the world is prior to all truth & falsity.<br>Roughly speaking: before any proposition can make sense at all, the <span class='underline_single'>logical</span> constants must have meaning. \\t\\t <br>\",\"date\":\"1914-10-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,51r[2] (1914--1019) (NB)\",\"ger\":\"Die Beschreibung der Welt durch Sätze ist nur dadurch möglich daß das Bezeichnete nicht sein eigenes Zeichen ist! Anwendung –.<br>\",\"eng\":\"The description of the world by means of propositions is only possible because what is signified is not its own sign! Application -.<br>\",\"date\":\"1914-10-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,51r[3] (1914--1019) (NB)\",\"ger\":\"Beleuchtung von Kants Frage „wie ist reine Mathematik möglich” durch die Theorie der Tautologien!<br>\",\"eng\":\"Light on Kant's question \\\"How is pure mathematics possible?\\\" through the theory of tautologies.<br>\",\"date\":\"1914-10-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,51r[4] (1914--1019) (NB)\",\"ger\":\"Es leuchtet ein daß man den Bau der Welt ohne irgend welche <span class='underline_single'>Namen</span> zu <span class='underline_single'>nennen</span> beschreiben können muß. <br>\",\"eng\":\"It is obvious that we must be able to describe the construction of the world without mentioning any <span class='underline_single'>names</span>. [<em>Cf</em><em>.</em> 5.526 (1).]<br>\",\"date\":\"1914-10-19\",\"pt-number\":\" 5·323\",\"pt-page\":\"62[4]\",\"tlp-number\":\"5·526 (1)\",\"cross-references\":\"17.10.14 (3)* 19.10.14 (3)**   31.5.15 (1,4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,52r[1] (1914--1020) (NB)\",\"ger\":\"Aus dem Satz muß man den logischen Bau des Sachverhaltes ersehen der ihn wahr oder falsch macht. (Wie ein Bild zeigen muß in welchen räumlichen Beziehungen die darauf wiedergegebenen Dinge stehen müssen wenn das Bild richtig (wahr) ist.)<br>\",\"eng\":\"A proposition must enable us see the logical construction of the state of things that makes it true or false. (As a picture must show the spatial relations in which the things represented in it must stand if the picture is correct (true).)<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,52r[2] (1914--1020) (NB)\",\"ger\":\"Die Form eines Bildes könnte man dasjenige nennen worin das Bild mit der Wirklichkeit stimmen <span class='underline_double'>muß</span> (um sie überhaupt abbilden zu können).<br>\",\"eng\":\"The form of a picture might be called that in which the picture <span class='underline_double'>must</span> agree with reality (in order to be able to depict it in any way at all). [<em>Cf. </em>2.17 and 2.18.]<br>\",\"date\":\"1914-10-20\",\"pt-number\":\" 2·18 \",\"pt-page\":\"6[3]\",\"tlp-number\":\"2·18**\",\"cross-references\":\"20.10.14 (2,4)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,52r[3] (1914--1020) (NB)\",\"ger\":\"Die Theorie der logischen Abbildung durch die Sprache gibt als erste einen Aufschluß über das Wesen der Wahrheits-Beziehung.<br>\",\"eng\":\"The first thing that the theory of logical depiction by means of language gives us is an insight into the nature of the truth-relation.<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,52r[4] et 53r[1] (1914--1020) (NB)\",\"ger\":\"Die Theorie der logischen Abbildung durch die / Sprache sagt – ganz allgemein: Damit es möglich ist daß ein Satz wahr oder falsch sei – daß er mit der Wirklichkeit übereinstimme oder nicht – dazu muß im Satze etwas mit der Wirklichkeit <span class='underline_single'>identisch</span> sein.<br>\",\"eng\":\"The theory of logical depiction by means of language says - entirely generally: In order for it to be possible for a proposition to be true or false - agree reality or not - something in the proposition must be <em>identical</em> with reality. [<em>Cf. </em>2.18.]<br>\",\"date\":\"1914-10-20\",\"pt-number\":\" 2·18 \",\"pt-page\":\"6[3]\",\"tlp-number\":\"2·18**\",\"cross-references\":\"20.10.14 (2,4)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,53r[2] (1914--1020) (NB)\",\"ger\":\"Das was in „~p” verneint ist nicht das „~” vor dem „p” sondern dasjenige was allen Zeichen die in dieser Notation mit „~p” gleichbedeutend sind gemeinsam ist; also das Gemeinsame von <br>\",\"eng\":\"What negates in \\\"~p\\\" is not the \\\"~\\\" in front of the \\\"p\\\", rather it is done by what all signs that have the same meaning as \\\"~p\\\" in this notation have in common; and so the common factor in\\t\\t <br>\",\"date\":\"1914-10-20\",\"pt-number\":\" 5·313\",\"pt-page\":\"61[7]\",\"tlp-number\":\"5·512 (2-3)*\",\"cross-references\":\"20.10.14 (5)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,53r[3] (1914--1020) (NB)\",\"ger\":\"Scheinsätze sind solche, die, wenn analysiert, das was sie <span class='underline_single'>sagen</span> sollten doch nur wieder <span class='underline_single'>zeigen</span>.<br>\",\"eng\":\"Pseudo-propositions are such as, when analyzed, turn out after all only to <span class='underline_single'>show</span> what they were supposed to <span class='underline_single'>say</span>.<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,54r[1] (1914--1020) (NB)\",\"ger\":\"Das Gefühl daß der Satz einen Komplex auf die Art der Russellschen Beschreibungen beschreibe rechtfertigt sich jetzt: Der Satz beschreibt den Komplex durch seine logischen Eigenschaften.<br>\",\"eng\":\"Here we have a justification for the feeling that the proposition describes a complex in the kind of way Russellian descriptions do: the proposition describes the complex by means of its logical properties.<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,54r[2] (1914--1020) (NB)\",\"ger\":\"Der Satz konstruiert eine Welt mit Hilfe seines logischen Gerüstes und darum kann man am Satz auch sehen wie sich alles Logische verhielte wenn er wahr wäre: man kann aus einem falschen Satz <span class='underline_single'>Schlüsse</span> <span class='underline_single'>ziehen</span> etc. So kann ich sehen daß, wenn „(x,φ). φ(x)” wahr wäre, dieser Satz im Widerspruch stünde mit einem Satze „ψ(a)”.)<br>\",\"eng\":\"Propositions construct a world with the help of their logical scaffolding, which is why one can actually see from propositions how all logical matters would stand, if they are true: one can <span class='underline_single'>draw inferences</span> from a false proposition, etc. (In this way I can see that if \\\"(x,φ). φ(x)\\\" were true, this proposition would contradict a proposition \\\"ψ(a)\\\"). [<em>Cf</em>. 4.023.]<br>\",\"date\":\"1914-10-20\",\"pt-number\":\" 4·02322\",\"pt-page\":\"47[8]\",\"tlp-number\":\"4·023 (5)**\",\"cross-references\":\"20.10.14 (8)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,54r[3] et 55r[1] (1914--1020) (NB)\",\"ger\":\" Daß sich von materiellen Sätzen auf ganz allgemeine Sätze schließen läßt – daß diese zu jenen in <span class='underline_single'>bedeutungs</span>vollen internen Beziehungen stehen können – zeigt daß die ganz allgemeinen / Sätze logische Konstruktionen von Sachverhalten sind.<br>\",\"eng\":\"The  possibility of inferring entirely general propositions from material propositions – the fact that the former can stand in <span class='underline_single'>meaningful</span> internal relations with the latter - shows that entirely general propositions are logical constructions from states of things.<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,55r[2] (1914--1021) (NB)\",\"ger\":\"Ist die Russellsche Definition der Null nicht unsinnig? Kann man von einer Klasse x̂ (x ≠ x) überhaupt reden? – Kann man denn von einer Klasse x̂ (x = x) reden? Ist denn x ≠ x oder x = x eine Funktion von x?? – Muß nicht die Null definiert werden durch die <span class='underline_single'>Hypothese</span> (∃φ):(x)~φx? Und Analoges würde von allen anderen Zahlen gelten. Dies nun wirft ein Licht auf die ganze Frage nach der Existenz von Anzahlen von Dingen.<br>\",\"eng\":\"Isn't the Russellian definition of zero nonsensical? Can one speak of a class x̂ (x ≠ x) at all? – Can one speak of a class x̂ (x = x)? Is then x ≠ x or x = x a function of x?? - Must not 0 be defined by means of the <span class='underline_single'>hypothesis</span> (∃φ):(x)~φx? And something analogous would hold of all other numbers. Now this throws light on the whole question about the existence of numbers of things.<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,55r[3] (1914--1021) (NB)\",\"ger\":\"0 = α̂{(∃φ):(x)~φx .α = û (φu)} Def<br>[Das Gleichheitszeichen in der geschweiften Klammer könnte man <span class='underline_single'>vermeiden</span> wenn man schriebe<br>0 = û(φu) {(∃φ) : (x)~φx}.]<br>\",\"eng\":\"0 = α̂{(∃φ):(x)~φx .α = û (φu)} Def<br>[The equals sign in the curly bracket could be avoided if one wrote<br>0 = û(φu) {(∃φ) : (x)~φx}.]<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,56r[1] (1914--1021) (NB)\",\"ger\":\"Der Satz muß die <span class='underline_single'>Möglichkeit seiner Wahrheit enthalten</span> (und so zeigen). Aber nicht mehr als die <span class='underline_single'>Möglichkeit</span>.<br>\",\"eng\":\"The proposition must <span class='underline_single'>contain</span> (and in this way show) the <span class='underline_single'>possibility of its truth</span>. But not more than the <span class='underline_single'>possibility</span>. [Cf. 2.203, 3.02 and 3.13.]<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,56r[2] (1914--1021) (NB)\",\"ger\":\"Nach meiner Definition der Klassen ist (x).~ x̂(φx) die Aussage daß x̂(φx) null ist und die Definition der Null ist dann 0 = α̂ [(x).~α] Def.<br>\",\"eng\":\"By my definition of classes, (x).~ x̂(φx) is the statement that x̂(φx) is zero and the definition of 0 is in that case 0 = α̂ [(x).~α] Def.<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,56r[3] (1914--1021) (NB)\",\"ger\":\"Ich dachte, die Möglichkeit der Wahrheit eines Satzes φ(a) ist an die Tatsache (∃x,φ) .φx gebunden. Aber es ist nicht einzusehen warum φa nur dann möglich sein soll wenn es einen anderen Satz derselben Form gibt. φa braucht doch keinen Präzedenzfall. (Denn angenommen es gäbe nur die beiden Elementarsätze „φa” & „ψa” und „φa” sei falsch: warum soll dieser Satz nur dann einen Sinn haben wenn „ψa” wahr ist?!)<br>\",\"eng\":\"I thought the possibility of the truth of a proposition φ(a) is tied up with the fact (∃x,φ).φx. But it is impossible to see why φa should only be possible if there is another proposition of the same form. Surely φa needs no precedent. (For suppose that there existed only the two elementary propositions \\\"φa\\\" & \\\"ψa\\\" and \\\"φa\\\" was false: why should this proposition only make sense if \\\"ψa\\\" is true?!)<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,56r[4] et 57r[1] et 58r[1] (1914--1022) (NB)\",\"ger\":\"Im Satz muß etwas mit seiner / Bedeutung identisch sein, der Satz darf aber nicht mit seiner Bedeutung identisch sein, also muß etwas in ihm mit seiner Bedeutung <span class='underline_single'>nicht</span> identisch sein. (Der Satz ist ein Gebilde mit den logischen Zügen des Dargestellten und mit noch anderen Zügen, diese nun werden willkürlich sein und in verschiedenen Zeichensprachen verschieden.) Es muß also verschiedene Gebilde mit denselben logischen Zügen geben; das Dargestellte wird eines von diesen sein und es wird sich bei der Darstellung darum handeln dieses von anderen Gebilden mit denselben logischen Zügen zu unterscheiden (da ja sonst die Darstellung nicht eindeutig wäre). Dieser Teil der Darstellung (die Namengebung) muß nun durch willkürliche Bestimmungen geschehen. Es muß darnach also jeder Satz Züge mit willkürlich bestimmten / Bedeutungen enthalten.<br>\",\"eng\":\"In a proposition something must be identical with its meaning, but a proposition cannot be identical with its meaning, and so something in it must <span class='underline_single'>not</span> be identical with its meaning. (A proposition is a formation with the logical features of what it represents and with other features as well, which will be arbitrary and different in different sign-languages). So there must be different formations with the same logical features; what is represented will be one of them, and the representation will need to distinguish it from other formations with the same logical features. (Since otherwise the representation would be ambiguous). Now this part of the representation (the naming) must happen by means of arbitrary assignations. Thus, every proposition must contain features with arbitrarily assigned meanings. [<em>Cf</em>. 3.34 (2).]<br>\",\"date\":\"1914-10-22\",\"pt-number\":\" 3·23\",\"pt-page\":\"24[10]\",\"tlp-number\":\"3·34 (2)*\",\"cross-references\":\"22.10.14 (1)+ \",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,58r[2] (1914--1022) (NB)\",\"ger\":\"Versucht man dies auf die ganz allgemeinen Sätze anzuwenden so scheint es daß darin irgend ein grundlegender Fehler ist.<br>\",\"eng\":\"If one tries to apply this to an entirely general proposition, it appears that there is some fundamental mistake in it.<br>\",\"date\":\"1914-10-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,58r[3] (1914--1022) (NB)\",\"ger\":\"Die Allgemeinheit des ganz allgemeinen Satzes ist die zufällige. Er handelt von allen Dingen die es zufälligerweise gibt. Und darum ist er ein materieller Satz.<br>\",\"eng\":\"The generality of the entirely general proposition is an accidental generality. It deals with all things that there chance to be. And that is why it is a material proposition.<br>\",\"date\":\"1914-10-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,58r[4] (1914--1023) (NB)\",\"ger\":\"Einerseits scheint meine Theorie der logischen Abbildung die einzig mögliche andererseits scheint in ihr ein unlöslicher Widerspruch zu sein!<br>\",\"eng\":\"On the one hand my theory of logical depiction seems to be the only possible one, on the other hand there seems to be an insoluble contradiction in it!<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,58r[5] (1914--1023) (NB)\",\"ger\":\"Wenn der ganz allgemeine Satz nicht ganz entmaterialisiert ist so wird ein Satz durch die Verallgemeinerung wohl überhaupt nicht entmaterialisiert, wie ich glaubte.<br>\",\"eng\":\"If the entirely general proposition is not wholly dematerialized, then a proposition does not get dematerialized at all through generalization, as I used to believe.<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,59r[1] (1914--1023) (NB)\",\"ger\":\" Ob ich von einem bestimmten Ding oder von allen Dingen die es gibt etwas aussage, die Aussage ist gleich materiell.<br>\",\"eng\":\"Whether I assert something about a particular thing or of all things that there are, the assertion is equally material.<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,59r[2] (1914--1023) (NB)\",\"ger\":\"„Alle Dinge”, das ist sozusagen eine Beschreibung statt „a & b & c”.<br>\",\"eng\":\"\\\"All things,\\\" that is, so to speak, is a description taking the place of \\\"a and b and c.\\\"<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,59r[3] (1914--1023) (NB)\",\"ger\":\"Wie, wenn unsere Zeichen ebenso unbestimmt wären wie die Welt welche sie spiegeln?<br>\",\"eng\":\"What if our signs were just as indeterminate as the world they mirror?<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,59r[4] (1914--1023) (NB)\",\"ger\":\"Um das Zeichen im Zeichen zu erkennen muß man auf den Gebrauch achten.<br>\",\"eng\":\"To recognize the sign in the sign one must pay attention to its use. [<em>Cf</em>. 3.326.]<br>\",\"date\":\"1914-10-23\",\"pt-number\":\" 3·252\",\"pt-page\":\"55[2]\",\"tlp-number\":\"3·326**\",\"cross-references\":\"23.10.14 (6)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,59r[5] et 60r[1] (1914--1023) (NB)\",\"ger\":\"Wollten wir dasjenige welches wir durch „(x).φ(x)” ausdrücken durch das Vorsetzen eines Index vor „φ(x)” ausdrücken etwa so „Allg.φ(x)”, es würde nicht genügen (wir wüßten nicht was verallgemeinert wurde).<br>Wollten wir es durch einen Index am „x” anzeigen etwa so φ(xA) es würde / auch nicht genügen (wir wüßten auf diese Weise nicht den Bereich der Allgemeinheit.).<br>Wollten wir es durch Einfüllen einer Marke in die leeren Argumentstellen versuchen etwa so „(A,A).ψ(A,A)” es würde nicht genügen (wir könnten die Identität der Variablen nicht feststellen). Alle diese Bezeichnungsweisen genügen nicht <span class='underline_single'>weil sie nicht die notwendigen logischen Eigenschaften haben</span>. Alle jene Zeichenverbindungen vermögen den gewünschten Sinn – auf die vorgeschlagene Weise – nicht abzubilden.<br>\",\"eng\":\"If we wanted to express what is expressed by \\\"(x).φ(x)\\\", say by putting an index in front of \\\"φ(x)\\\" such as \\\"Gen.φ(x)\\\", it would not suffice (we would not know what was generalized).<br>If we tried to indicate it by adding an index \\\"x\\\" like this φ(xA) it still would not suffice (we would not know the scope of the sign of generality in this way.)<br>If we tried to do it by inserting a mark into the empty argument places  – such as \\\"(A,A).ψ(A,A)\\\" – it would not suffice (we could not ascertain the identity of the variables). All these modes of signifying are insufficient <span class='underline_single'>because they do not have the necessary logical properties</span>. All those combinations of signs are incapable of depicting the requisite sense - in the proposed way. [<em>Cf</em>. 4. 0411.]<br>\",\"date\":\"1914-10-23\",\"pt-number\":\" 4·0742\",\"pt-page\":\"76[5]\",\"tlp-number\":\"4·0411* \",\"cross-references\":\"23.10.14 (7,8,9,10)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,60r[2] (1914--1024) (NB)\",\"ger\":\"Um überhaupt eine Aussage machen zu können müssen wir – in einem Sinne – wissen wie es sich verhält wenn die Aussage wahr ist (und dies bilden wir eben ab).<br>\",\"eng\":\"In order to be able to frame a statement at all, we must - in some sense – know how things stand if the statement is true (and that is just what we depict).  [<em>Cf</em>. 4.024.]<br>\",\"date\":\"1914-10-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,60r[3] et 61r[1] (1914--1024) (NB)\",\"ger\":\"Der Satz <span class='underline_single'>drückt aus</span> was ich nicht weiß, was ich aber doch wissen muß um ihn / überhaupt aussagen zu können das <span class='underline_single'>zeige ich in ihm</span>.<br>\",\"eng\":\"A proposition <span class='underline_single'>expresses</span> what I do not know, but what I must know in order to be able to say it at all, <span class='underline_single'>I show in it</span>.<br>\",\"date\":\"1914-10-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,61r[2] (1914--1024) (NB)\",\"ger\":\"Die Definition ist eine Tautologie und zeigt interne Relationen zwischen ihren beiden Gliedern!<br>\",\"eng\":\"A definition is a tautology and shows internal relations between its two terms.<br>\",\"date\":\"1914-10-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,61r[3] (1914--1025) (NB)\",\"ger\":\"Warum aber untersuchst Du nie ein einzelnes spezielles Zeichen auf die Art & Weise hin wie es logisch abbildet?<br>\",\"eng\":\"But why do you never investigate an individual particular sign to find out how it is a logical depiction?<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,61r[4] (1914--1025) (NB)\",\"ger\":\"Der vollkommen analysierte Satz muß seine Bedeutung vorstellen.<br>\",\"eng\":\"The completely analyzed proposition must betoken its meaning.<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,61r[5] et 62r[1] (1914--1025) (NB)\",\"ger\":\"Man könnte auch sagen, unsere Schwierigkeit läuft da hinaus daß der ganz allgemeine Satz nicht zusammengesetzt zu sein scheint. –.<br>Er scheint nicht wie alle anderen Sätze aus willkürlich bezeichnenden Bestandteilen zu bestehen die in einer logischen Form vereinigt sind. Er scheint / keine Form zu <span class='underline_double'>haben</span> sondern selbst eine in sich abgeschlossene Form zu sein.<br>\",\"eng\":\"One might also say that our difficulty arises out of the entirely general proposition’s not appearing to be composite. –.<br>It does not appear, like all other propositions, to consist of arbitrarily signifying constituents which are united in a logical form. It appears not to <span class='underline_double'>have</span> a form but itself to be a self-contained form.<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,62r[2] (1914--1025) (NB)\",\"ger\":\"Man braucht bei den logischen Konstanten nie nach ihrer Existenz zu fragen, sie können ja auch <span class='underline_single'>verschwinden</span>!<br>\",\"eng\":\"With the logical constants one need never ask whether they exist, for they can even <span class='underline_single'>vanish</span>!<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,62r[3] (1914--1025) (NB)\",\"ger\":\"Warum soll „φ(x̂)” nicht vorstellen wie (x).φx ist? Kommt es da nicht <span class='underline_single'>nur</span> darauf an <span class='underline_single'>wie</span> – auf welche Art & Weise – jenes Zeichen etwas vorstellt?<br>\",\"eng\":\"Why should \\\"φ(x̂)\\\" not betoken how (x).φx is the case? Doesn't it all depend here <span class='underline_single'>only</span> on <span class='underline_single'>how</span> - in what kind of way - that sign betokens something?<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,62r[4] (1914--1025) (NB)\",\"ger\":\"⨯\\tAngenommen ich wollte vier Paare kämpfender Männer darstellen könnte ich es nicht so machen daß ich nur eines darstelle und sage: „so sehen alle viere aus”? (Durch diesen Nachsatz bestimme ich die Art & Weise der Darstellung.) (Ähnlich stelle ich (x).φx durch „φ(x̂)” dar.)<br>\",\"eng\":\"Suppose I wanted to represent four pairs of men fighting; could I not do so by representing only one and saying: \\\"That is how all four look\\\"? (By means of this addendum I determine the kind of representation.) (Similarly I represent (x).φx by means of \\\"φ(x̂)\\\").<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,62r[5] et 63r[1] (1914--1025) (NB)\",\"ger\":\"Bedenke daß es keine hypothetischen internen Beziehungen gibt. Ist / eine Struktur gegeben und eine strukturelle Beziehung zu ihr dann muß es eine andere Struktur geben die jene Beziehung zu der ersten hat. (Dies liegt ja im Wesen der strukturellen Beziehungen.)<br>Und dies spricht für die Richtigkeit der obigen Bemerkung, sie wird hierdurch zu keiner-Ausflucht.<br>\",\"eng\":\"Remember that there are no hypothetical internal relations. If a structure is given and a structural relation to it then there must be another structure which has that relation to the first one. (This is involved in the nature of structural relations).<br>And this speaks for the correctness of the above remark: it stops it from being—an evasion.<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,63r[2] (1914--1026) (NB)\",\"ger\":\"Es scheint also als wäre nicht die logische <span class='underline_single'>Identität</span> von Zeichen & Bezeichnetem nötig sondern nur <span class='underline_single'>eine</span> interne, <span class='underline_single'>logische</span>, Relation zwischen beiden. (Das Bestehen einer solchen schließt in gewissem Sinne das Bestehen einer Art grundlegender – interner – Identität mit ein.)<br>\",\"eng\":\"So it looks as if the logical <span class='underline_single'>identity</span> of sign and what it signifies were not necessary but only <span class='underline_single'>an</span> internal, <span class='underline_single'>logical</span>, relation between the two. (The holding of such a relation incorporates in a certain sense the holding of a kind of fundamental - internal - identity).<br>\",\"date\":\"1914-10-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,63r[3] et 64r[1] (1914--1026) (NB)\",\"ger\":\"Es handelt sich ja nur darum daß das Logische des Bezeichneten / durch das Logische des Zeichens & der Bezeichnungsweise allein vollständig bestimmt ist. Man könnte sagen: Zeichen & Bezeichnungsweise <span class='underline_single'>zusammen</span> müssen mit dem Bezeichneten logisch identisch sein.<br>\",\"eng\":\"The point is simply that the logical part of what is signified is completely determined just by the logical part of the sign and the mode of signification. One could say: sign and mode of signification <span class='underline_single'>together</span> must be logically identical with what is signified.<br>\",\"date\":\"1914-10-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,64r[2] (1914--1026) (NB)\",\"ger\":\"Der Sinn des Satzes ist das was er vorstellt.<br>\",\"eng\":\"The sense of a proposition is what it betokens. [<em>Cf</em>. 2.221.]<br>\",\"date\":\"1914-10-26\",\"pt-number\":\" 2·221 \",\"pt-page\":\"6[9]\",\"tlp-number\":\"2·221\",\"cross-references\":\"26.10.14 (3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,64r[3] (1914--1027) (NB)\",\"ger\":\"„x = y” ist <span class='underline_single'>keine</span> Satzform. (Folgen)<br>\\\"x = y\\\" is <span class='underline_single'>not</span> a propositional form. (Consequences.)<br>\",\"eng\":\"\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,64r[4] (1914--1027) (NB)\",\"ger\":\"Es ist ja klar daß „aRa” gleichbedeutend wäre mit „aRb ∙ a = b”. Man kann also den Scheinsatz „a = b” durch eine ganz analysierte Notation zum Verschwinden bringen. Bester Beweis für die Richtigkeit der obigen Bemerkung.<br>\",\"eng\":\"It is clear that \\\"aRa\\\" would have the same meaning as \\\"aRb ∙ a = b\\\". So one can make the pseudo-proposition \\\"a = b\\\" disappear by means of a completely analyzed notation. The best proof of the correctness of the above remark.<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,64r[5] et 65r[1] (1914--1027) (NB)\",\"ger\":\"Die Schwierigkeit vor meiner Theorie der logischen Abbildung war die, einen Zusammenhang zwischen / den Zeichen auf Papier & einem Sachverhalt draußen in der Welt zu finden.<br>\",\"eng\":\"The difficulty of my theory of logical depiction was that of finding a connection between  the signs on paper and a state of things outside in the world.<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,65r[2] (1914--1027) (NB)\",\"ger\":\"Ich sagte immer die Wahrheit ist eine Beziehung zwischen dem Satz & dem Sachverhalt konnte aber niemals eine solche Beziehung ausfindig machen.<br>\",\"eng\":\"I always said that truth is a relation between a proposition and a state of things, but could never pick out such a relation. \\t\\t <br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,65r[3] (1914--1027) (NB)\",\"ger\":\"Die Darstellung der Welt durch ganz allgemeine Sätze könnte man die unpersönliche Darstellung der Welt nennen.<br>\",\"eng\":\"The representation of the world by means of entirely general propositions might be called the impersonal representation of the world.<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,65r[4] (1914--1027) (NB)\",\"ger\":\"Wie geschieht die unpersönliche Darstellung der Welt?<br>\",\"eng\":\"How does the impersonal representation of the world take place?<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,65r[5] (1914--1027) (NB)\",\"ger\":\"/ \\\\ \\\\ \\\\ ✓ \\tDer Satz ist ein Modell der Wirklichkeit so wie wir sie uns denken.<br>\",\"eng\":\"A proposition is a model of reality as we conceive of it. [<em>See </em>4.01 (2).]<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"2·12\",\"pt-page\":\"4[5]\",\"tlp-number\":\"4·01 (1)\",\"cross-references\":\"(27.10.14 (7)+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,65r[6] et 66r[1] (1914--1028) (NB)\",\"ger\":\"Was der Scheinsatz „es gibt n Dinge” ausdrücken will zeigt sich in der Sprache durch das Vorhandensein / von n Eigennamen mit verschiedener Bedeutung. (etc.)<br>\",\"eng\":\"What the pseudo-proposition \\\"there are n things\\\" tries to express is shown in language by the presence of n proper names with different meanings. (Etc.)<br>\",\"date\":\"1914-10-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,66r[2] (1914--1028) (NB)\",\"ger\":\"Das was die ganz allgemeinen Sätze beschreiben, sind allerdings in gewissem Sinne strukturelle Eigenschaften der Welt. Dennoch können diese Sätze noch immer wahr oder falsch sein. Auch nachdem sie <span class='underline_single'>Sinn haben</span> bleibt der Welt noch immer jener Spielraum.<br>Schließlich verändert ja die Wahr- oder Falschheit <span class='underline_single'>jedes</span> Satzes etwas an der allgemeinen <span class='underline_single'>Struktur</span> der Welt. Und der Spielraum der ihre Struktur durch die <span class='underline_double'>Gesamtheit</span> aller Elementarsätze gelassen wird ist eben derjenige welchen die ganz allgemeinen Sätze begrenzen.<br>\",\"eng\":\"What entirely general propositions describe are indeed in a certain sense structural properties of the world. Nevertheless, these propositions can still be true or false. According as they <span class='underline_single'>make sense</span> the world still retains that leeway.<br>After all, the truth or falsehood of <span class='underline_single'>every</span> proposition changes something about the general <span class='underline_single'>structure</span> of the world. And the leeway that is left to its structure by the <span class='underline_double'>totality</span> of all elementary propositions is precisely what is delimited by entirely general propositions. [<em>Cf. </em>5.5262.]<br>\",\"date\":\"1914-10-28\",\"pt-number\":\" 5·326\",\"pt-page\":\"63[4]\",\"tlp-number\":\"5·5262**\",\"cross-references\":\"28.10.14 (2,3)* 29.10.14 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,66r[3] et 67r[1] (1914--1029) (NB)\",\"ger\":\"Denn, wenn ein Elementarsatz wahr ist so ist doch jedenfalls / ein Elementarsatz <span class='underline_single'>mehr</span>, wahr, u. u.<br>\",\"eng\":\"For, if an elementary proposition is true, then, at any rate, <em>yet another </em>elementary proposition is true, and conversely. [<em>See </em>5.5262.]<br>\",\"date\":\"1914-10-29\",\"pt-number\":\" 5·326\",\"pt-page\":\"63[4]\",\"tlp-number\":\"5·5262**\",\"cross-references\":\"28.10.14 (2,3)* 29.10.14 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,67r[2] (1914--1029) (NB)\",\"ger\":\"Damit ein Satz wahr sei muß er vor allem wahr sein <span class='underline_single'>können</span> und nur das geht die Logik etwas an.<br>\",\"eng\":\"In order for a proposition to be true, it must first and foremost be <span class='underline_single'>capable</span> of truth, and that is all that concerns logic.<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,67r[3] (1914--1029) (NB)\",\"ger\":\"Der Satz muß zeigen was er sagen will. – Er muß sich zu seiner Bedeutung ähnlich verhalten wie eine Beschreibung zu ihrem Gegenstand.<br>Die logische Form des Sachverhaltes aber, läßt sich nicht beschreiben. –<br>\",\"eng\":\"A proposition must show what it tries to say. - Its relation to its meaning must be like that of a description to its subject.<br>The logical form of a state of things, however, cannot be described. - – [<em>Cf</em>. 4.12 and 4.121.]<br>\",\"date\":\"1914-10-29\",\"pt-number\":\" 4·101\",\"pt-page\":\"16[13]\",\"tlp-number\":\"4·12 (1)*\",\"cross-references\":\"29.10.14 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,67r[4] (1914--1029) (NB)\",\"ger\":\"/ \\\\ \\tDie interne Relation zwischen dem Satz & seiner Bedeutung, die Bezeichnungsweise – ist das System von Koordinaten das den Sachverhalt in den Satz abbildet. Der Satz entspricht den Grundkoordinaten.<br>\",\"eng\":\"The internal relation between a proposition and its meaning, the mode of signifying - is the system of co-ordinates that projects the state of things into the proposition. The proposition corresponds to the fundamental coordinates.<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,67r[5] et 68r[1] (1914--1029) (NB)\",\"ger\":\"Man könnte zwei Koordinaten ap & bp / als einen Satz auffassen der aussagt der materielle Punkt P befinde sich im Ort (ab). Und damit diese Aussage möglich sei müssen also die Koordinaten a & b wirklich einen Ort bestimmen. Damit eine Aussage möglich ist müssen die logischen Koordinaten wirklich einen logischen Ort bestimmen!<br>\",\"eng\":\"One might construe two coordinates ap and bp as a proposition stating that the material point P is to be found in the place (ab). And for this statement to be possible the co-ordinates a and b must really specify a place. For a statement to be possible the logical co-ordinates must really specify a logical locus!<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,68r[2] (1914--1029) (NB)\",\"ger\":\" (Der Gegenstand von welchem die allgemeinen Sätze handeln ist recht eigentlich die Welt; die in ihnen durch eine logische Beschreibung eintritt. – Und darum kommt die Welt eigentlich doch nicht in ihnen vor so wie ja auch der Gegenstand der Beschreibung nicht in dieser vorkommt.)<br>\",\"eng\":\"(The subject-matter of general propositions is really the world; which makes its appearance in them by means of a logical description. - And that is why the world does not really occur in them, just as the subject of the description does not occur in it either).<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,68r[3] et 69r[1] (1914--1029) (NB)\",\"ger\":\"Daß in gewissem Sinne die logische Form von p vorhanden sein muß auch wenn p nicht der Fall ist das zeigt / sich symbolisch dadurch daß „p” in „~p” vorkommt.<br>\",\"eng\":\"That the logical form of p must in a certain sense be present even if p is not the case, is symbolically shown by \\\"p\\\"’s occurring in \\\"~p\\\".<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,69r[2] (1914--1029) (NB)\",\"ger\":\"Die Schwierigkeit ist die: wie kann es die Form von p geben wenn es keinen Sachverhalt dieser Form gibt. Und worin besteht diese Form dann eigentlich?!<br>\",\"eng\":\"This is the difficulty: How can there be such a thing as the form of p if there is no state of things of this form? And in that case, what does this form really consist in?<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,69r[3] (1914--1029) (NB)\",\"ger\":\"Analytische <span class='underline_single'>Sätze</span> gibt es nicht.<br>\",\"eng\":\"There are no such things as analytic <span class='underline_single'>propositions</span>.<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,69r[4] (1914--1030) (NB)\",\"ger\":\"Könnte man sagen: „in „~φ(x)” stellt „φ.(x)” vor wie es sich <span class='underline_single'>nicht</span> verhält”?<br>\",\"eng\":\"Could we say: In \\\"~φ(x)\\\" \\\"φ.(x)\\\" betokens how things are <span class='underline_single'>not</span>?<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,69r[5] (1914--1030) (NB)\",\"ger\":\"Man könnte auch auf einem Bild eine negative Tatsache darstellen indem man darstellt was <span class='underline_single'>nicht</span> der Fall ist.<br>\",\"eng\":\"Even in a picture one could represent a negative fact by representing what is <span class='underline_single'>not</span> the case.<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,69r[6] et 70r[1] (1914--1030) (NB)\",\"ger\":\"Wenn wir aber diese Darstellungsmethoden einräumen, was ist dann eigentlich charakteristisch für die / Beziehung des <span class='underline_single'>Darstellens</span>?<br>\",\"eng\":\"If, however, we admit these methods of representation, then what is really characteristic of the relation of <span class='underline_single'>representing</span>?<br>\",\"date\":\"1914-10-30\",\"pt-number\":\" 4·0231\",\"pt-page\":\"47[5]\",\"tlp-number\":\"4·023 (1-2)*\",\"cross-references\":\"30.10.14 (3)  31.10.14 (3)*  (14.2.15 (2)+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,70r[2] (1914--1030) (NB)\",\"ger\":\"Kann man nicht sagen: Es gibt eben verschiedene logische Koordinatensysteme!<br>\",\"eng\":\"Can’t one say: It’s just that there are different logical coordinate systems!<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,70r[3] (1914--1030) (NB)\",\"ger\":\"Es gibt eben verschiedene Darstellungsweisen, auch durch das Bild, und das Darstellende ist nicht nur das Zeichen oder Bild sondern auch die Methode der Darstellung. <span class='underline_single'>Aller Darstellung ist gemeinsam </span><span class='underline_single'>daß</span><span class='underline_single'> sie stimmen oder nicht stimmen, wahr oder falsch sein kann</span>.<br>\",\"eng\":\"There are various different modes of representing, even by means of a picture, and what represents is not merely the sign or picture but also the method of representation. <span class='underline_single'>What a</span><span class='underline_single'>ll representation</span><span class='underline_single'>s</span><span class='underline_single'> ha</span><span class='underline_single'>ve</span><span class='underline_single'> in common that </span><span class='underline_single'>they</span><span class='underline_single'> can be </span><span class='underline_single'>right</span><span class='underline_single'> or </span><span class='underline_single'>wrong</span><span class='underline_single'>, true or false</span>.<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-101,70r[4] (1914--1030) (NB)\",\"ger\":\"Denn, Bild <span class='underline_single'>und Darstellungsweise</span> sind ganz außerhalb des Dargestellten!<br>Beide zusammen sind wahr oder falsch, nämlich <span class='underline_single'>das Bild, auf eine bestimmte Art & Weise</span>. (Dies gilt natürlich auch vom Elementarsatz!)<br>\",\"eng\":\"Then—picture and mode of representing are entirely outside of what is represented!<br>The two together are true or false, namely <span class='underline_single'>the picture, in a particular way</span>. (Of course this holds for elementary propositions too!)<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,1r[1] (1914--1030) (NB)\",\"ger\":\"<span class='underline_single'>Jeder Satz</span> kann verneint werden. Und dies zeigt daß für alle Sätze „Wahr” & „Falsch” dasselbe bedeuten. (Dies ist von allerhöchster Wichtigkeit.) (Im Gegensatz zu Russell).<br>\",\"eng\":\"<span class='underline_single'>Any</span><span class='underline_single'> </span><span class='underline_single'>proposition</span> can be negated. And this shows that \\\"true\\\" and \\\"false\\\" mean the same for all propositions. (This is of the utmost importance.) (As opposed to Russell).<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,1r[2] (1914--1030) (NB)\",\"ger\":\"Die Bedeutung des Satzes muß durch <span class='underline_single'>ihn und seine Darstellung</span>sweise auf ja oder nein fixiert sein. <br>\",\"eng\":\"The meaning of a proposition must be fixed in terms of yes or no by means of <span class='underline_single'>it and</span><span class='underline_single'> </span><span class='underline_single'>its</span><span class='underline_single'> </span><span class='underline_single'>way</span><span class='underline_single'> of</span> <span class='underline_single'>re</span><span class='underline_single'>present</span><span class='underline_single'>ing</span>.<em> </em>[<em>Cf </em>4.023.]<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,1r[3] (1914--1030) (NB)\",\"ger\":\"In der Logik gibt es kein Nebeneinander, kann es keine Klassifikation geben! <br>\",\"eng\":\"In logic there are no neighbours, nor can there be any classification. [<em>S</em><em>ee </em>5.454.]<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"5·30222\",\"pt-page\":\"49[6]\",\"tlp-number\":\"5·454 (1)\",\"cross-references\":\"30.10.14 (10)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,1r[4] et 2r[1] (1914--1031) (NB)\",\"ger\":\"Ein Satz wie „(∃x,φ).φx” ist gerade so gut zusammengesetzt wie ein elementarer; / dies zeigt sich darin daß wir in der Klammer „φ” & „x” <span class='underline_single'>extra</span> erwähnen müssen. Beide stehen – unabhängig – in bezeichnenden Beziehungen zur Welt, gerade wie im Falle eines Elementarsatzes „ψ(a)”.<br>\",\"eng\":\"A proposition like \\\"(∃x,φ).φx\\\" is just as composite as an elementary one. This shows itself in our needing to mention \\\"φ\\\" & \\\"x\\\" <span class='underline_single'>ex</span><span class='underline_single'>plicitly</span> in the brackets. Both symbols independently stand in signifying relations to the world, just as in the case of an elementary proposition \\\"ψ(a)\\\". [<em>Cf </em>5.5261.]<br>\",\"date\":\"1914-10-31\",\"pt-number\":\" 5·325\",\"pt-page\":\"63[2]\",\"tlp-number\":\"5·5261 (1)*\",\"cross-references\":\"31.10.14 (1)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,2r[2] (1914--1031) (NB)\",\"ger\":\"Verhält es sich nicht so: „die logischen Konstanten charakterisieren die Darstellungsweise der Elementarformen des Satzes”?<br>\",\"eng\":\"Isn't it like this: \\\"the logical constants characterize the way in which the elementary forms of the proposition represent\\\"?<br>\",\"date\":\"1914-10-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,2r[3] (1914--1031) (NB)\",\"ger\":\"Die Bedeutung des Satzes muß durch ihn und seine Darstellungsweise auf ja oder nein fixiert sein. Dazu muß sie durch ihn vollständig beschrieben sein. <br>\",\"eng\":\"The meaning of a proposition must be fixed in terms of yes or no by means of it and its way of representing. To achieve this, the meaning must be completely described by the proposition. [<em>Cf </em>4.023.]<br>\",\"date\":\"1914-10-31\",\"pt-number\":\" 4·0231\",\"pt-page\":\"47[5]\",\"tlp-number\":\"4·023 (1-2)*\",\"cross-references\":\"30.10.14 (3)  31.10.14 (3)*  (14.2.15 (2)+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,2r[4] et 3r[1] (1914--1031) (NB)\",\"ger\":\"Die Darstellungsweise bildet <span class='underline_single'>nicht</span>  / ab; nur der Satz ist Bild. <br>\",\"eng\":\"The way of representing does not depict; only the proposition is a picture.<br>\",\"date\":\"1914-10-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,3r[2] (1914--1031) (NB)\",\"ger\":\"Die Darstellungsweise bestimmt wie die Wirklichkeit mit dem Bild verglichen werden muß.<br>\",\"eng\":\"The way of representing specifies how reality has to be compared with the picture.<br>\",\"date\":\"1914-10-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,3r[3] (1914--1031) (NB)\",\"ger\":\"Vor allem muß die Elementarsatzform abbilden, alle Abbildung geschieht durch diese.<br>\",\"eng\":\"First and foremost, the elementary propositional form must depict; all depiction takes place by means of it.<br>\",\"date\":\"1914-10-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,3r[4] (1914--1101) (NB)\",\"ger\":\"Sehr nahe liegt die Verwechslung zwischen der darstellenden Beziehung des Satzes zu seiner Bedeutung und der Wahrheitsbeziehung. Jene ist für verschiedene Sätze verschieden, diese ist eine und für alle Sätze die gleiche.<br>\",\"eng\":\"It is very easy to confuse the representational relation which the proposition has to its meaning, and the truth relation. The former is different for different propositions, the latter is one and the same for all propositions.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,3r[5] et 4r[1] (1914--1101) (NB)\",\"ger\":\"Es scheint als wäre „(x,φ).φx” die Form einer Tatsache φa ∙ ψb ∙ ϑc etc. / (Ähnlich wäre (∃x).φx die Form von φ(a) wie ich auch wirklich glaubte.) <br>\",\"eng\":\"It looks as if \\\"(x,φ).φx\\\" were the form of a fact φa ∙ ψb ∙ ϑc etc. (Similarly, (∃x).φx would be the form of φ(a) as I actually believed).<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,4r[2] (1914--1101) (NB)\",\"ger\":\"Und hier muß eben mein Fehler liegen. <br>\",\"eng\":\"And this must be where my mistake is.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,4r[3] (1914--1101) (NB)\",\"ger\":\"Untersuche doch den Elementarsatz: welches ist denn die Form von “φa” & wie verhält sie sich zu “~φa”? <br>\",\"eng\":\"Instead, examine the elementary proposition: What is the form of \\\"φa\\\" & how is it related to \\\"~φa\\\"?<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,4r[4] (1914--1101) (NB)\",\"ger\":\"Jener Präzedenzfall auf den man sich immer berufen möchte muß schon im Zeichen selber liegen. <br>\",\"eng\":\"That precedent to which one would always like to appeal must reside in the sign itself. [<em>Cf. </em>5.525 (3).]<br>\",\"date\":\"1914-11-01\",\"pt-number\":\" 5·3221\",\"pt-page\":\"76[4]\",\"tlp-number\":\"5·525 (3) \",\"cross-references\":\"1.11.14 (5)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,4r[5] (1914--1101) (NB)\",\"ger\":\" Die logische Form des Satzes muß schon durch die Formen seiner Bestandteile gegeben sein. (Und diese haben nur mit dem <span class='underline_single'>Sinn</span> der Sätze nicht mit ihrer Wahr- und Falschheit zu tun.) <br>\",\"eng\":\"The logical form of the proposition must already be given by the forms of its constituents. (And these have only to do with the sense of the propositions not with their truth and falsity).<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,5r[1] (1914--1101) (NB)\",\"ger\":\"In der Form des Subjekts & des Prädikats liegt schon die Möglichkeit des S.-P. Satzes etc.; aber – wie billig – nichts über seine Wahr- oder Falschheit. <br>\",\"eng\":\"In the form of the subject and the predicate there already resides the possibility of the subject-predicate proposition etc.; but – fair enough - nothing about its truth or falsity.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,5r[2] (1914--1101) (NB)\",\"ger\":\"Das Bild hat die Relation zur Wirklichkeit, die es nun einmal hat. Und es kommt darauf an: wie soll es darstellen. Dasselbe Bild wird mit der Wirklichkeit übereinstimmen oder nicht übereinstimmen jenachdem, wie es darstellen soll.<br>\",\"eng\":\"A picture has whatever relation to reality it does have. And the point is how it is supposed to represent. The same picture will agree or disagree with reality according to how it is supposed to represent.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,5r[3] et 6r[1] (1914--1101) (NB)\",\"ger\":\"/ \\tAnalogie zwischen Satz & Beschreibung: <span class='underline_single'>Der Komplex welcher</span> mit diesem Zeichen kongruent ist. (genau so in der graphischen Darstellung.) <br>\",\"eng\":\"Analogy between proposition and description: The <span class='underline_single'>complex which</span> is congruent with this sign. (Exactly as in representation in a picture.)<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,6r[2] (1914--1101) (NB)\",\"ger\":\"Nur kann man eben nicht <span class='underline_single'>sagen</span> dieser Komplex ist mit jenem kongruent (oder dergleichen) sondern dies zeigt sich. Und daher nimmt auch die Beschreibung einen anderen Charakter an. <br>\",\"eng\":\"Only one cannot just <span class='underline_single'>say</span> that this complex is congruent with that (or anything like that), rather this is shown. And for this reason, too, the description assumes a different character. [<em>Cf</em>. 4.023.]<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,6r[3] (1914--1101) (NB)\",\"ger\":\"/ \\tEs muß ja die Abbildungsmethode vollkommen bestimmt sein ehe man überhaupt die Wirklichkeit mit dem Satze vergleichen kann um zu sehen ob er wahr oder falsch ist. Die Vergleichsmethode muß mir gegeben sein ehe ich vergleichen kann.<br>\",\"eng\":\"The method of depiction must be completely fixed before one can compare reality with a proposition to see whether it is true or false. The method of comparison must be given me before I can make the comparison.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,6r[4] et 7r[1] (1914--1101) (NB)\",\"ger\":\"Ob ein Satz wahr oder falsch ist muß sich zeigen. <br>Wir müssen aber im Voraus wissen  / <span class='underline_single'>wie</span> es sich zeigen wird. <br>\",\"eng\":\"Whether a proposition is true or false is something that must be shown. <br>We must however know in advance <span class='underline_single'>how</span> it will be shown.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,7r[2] (1914--1101) (NB)\",\"ger\":\"Daß zwei Leute nicht kämpfen kann man darstellen indem man sie nicht-kämpfend darstellt und auch so indem man sie kämpfend darstellt und sagt das Bild zeige wie es sich <span class='underline_single'>nicht</span> verhält. Man <span class='underline_single'>könnte</span> mit negativen Tatsachen ebensogut darstellen wie mit positiven –. Wir aber wollen bloß die Prinzipe der Darstellung <span class='underline_single'>überhaupt</span> untersuchen. <br>\",\"eng\":\"That two people aren't fighting can be represented by representing them as not fighting and also by representing them fighting and saying the picture shows how things are <span class='underline_single'>not</span>. One <span class='underline_single'>could</span> represent by using negative facts just as easily as with positive ones. – However, all we want is to examine the principles of representation <span class='underline_single'>as such</span>.  [<em>Cf</em>. 4.062.]<br>\",\"date\":\"1914-11-01\",\"pt-number\":\" 4·092\",\"pt-page\":\"28[5]\",\"tlp-number\":\" 4·062*\",\"cross-references\":\"1.11.14 (14)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,7r[3] et 8r[1] (1914--1101) (NB)\",\"ger\":\"Der Satz „‘p’ ist wahr” ist gleichbedeutend mit dem logischen Produkt von ‚p’ und einem Satz „‘p’” der den Satz ‚p’ beschreibt und einer Zuordnung der Bestandteile der beiden  / Sätze. – Die internen Beziehungen von Satz & Bedeutung werden durch die internen Beziehungen zwischen ‚p’ und „‘p’” abgebildet. (Schlechte Bemerkung) <br>\",\"eng\":\"The proposition \\\"'p' is true\\\" has the same meaning as the logical product of 'p' and a proposition \\\"'p'\\\" describing the proposition 'p', and a correlation of the constituents of the two propositions. - The internal relations between proposition and meaning are depicted by the internal relations between 'p' and \\\"'p'\\\". (Bad remark)  <br>\",\"date\":\"1914-11-01\",\"pt-number\":\" 6·004\",\"pt-page\":\"74[6]\",\"tlp-number\":\"5·542**\",\"cross-references\":\"AüL 191 (4)+   MN 223 (3)+   1.11.14 (15)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,8r[2] (1914--1101) (NB)\",\"ger\":\"Nur sich nicht in Teilfragen verstricken sondern immer dort hinaus flüchten wo man freien Überblick über das ganze <span class='underline_single'>eine</span> große Problem hat wenn auch dieser Überblick noch unklar ist! <br>\",\"eng\":\"Don’t get entangled in partial questions but always take flight out to where one has an unhindered perspective on the whole <span class='underline_single'>single</span> great problem, even if this perspective is still unclear!<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,8r[3] (1914--1101) (NB)\",\"ger\":\" „Ein Sachverhalt ist denkbar” („vorstellbar”) heißt: Wir können uns ein Bild von ihm machen. <br>\",\"eng\":\"“A state of things is thinkable” (“imaginable”) means: we can make ourselves a picture of it. [<em>See</em> 3.001.]<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"3·001\",\"pt-page\":\"42[6]\",\"tlp-number\":\"3·001**\",\"cross-references\":\"1.11.14 (17)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,8r[4] et 9r[1] (1914--1101) (NB)\",\"ger\":\"/ \\tDer Satz muß einen logischen Ort bestimmen. <br>Die Existenz dieses logischen  / Orts ist durch die Existenz der Bestandteile allein verbürgt, durch die Existenz des sinnvollen Satzes. <br>Wenn auch kein Komplex in dem logischen Ort ist so ist doch Einer: nicht in dem logischen Ort. <br>\",\"eng\":\"The existence of the proposition’s constituents — the existence of the proposition with a sense — suffices to guarantee the existence of this logical locus.<br>Even if there is no complex in the logical locus, there still is one, but not in that logical locus. [<em>Cf. </em>3.4.]<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"3·2101\",\"pt-page\":\"43[3]\",\"tlp-number\":\"3·4\",\"cross-references\":\"1.11.14 (18, 19)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,9r[2] (1914--1102) (NB)\",\"ger\":\"In der Tautologie heben die Bedingungen der Übereinstimmung mit der Welt (die Wahrheitsbedingungen) – die darstellenden Beziehungen – einander auf so daß sie in keiner darstellenden Beziehung zur Wirklichkeit steht (nichts sagt).<br>\",\"eng\":\"In a tautology, the conditions of agreement with the world (the truth conditions) - the representing relations - cancel one another out, so that it does not stand in any representing relation to reality (says nothing). [<em>Cf. </em>4.462.]<br>\",\"date\":\"1914-11-02\",\"pt-number\":\" 4·4483\",\"pt-page\":\"44[7]\",\"tlp-number\":\"4·462 (2)\",\"cross-references\":\"2.11.14 (1)*  MN 223 (3)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,9r[3] (1914--1102) (NB)\",\"ger\":\"a = a ist nicht in demselben Sinne eine Tautologie wie p⊃p. <br>\",\"eng\":\"a = a is not a tautology in the same sense as p⊃p.<br>\",\"date\":\"1914-11-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,10r[1] (1914--1102) (NB)\",\"ger\":\" / \\tDaß ein Satz wahr ist besteht nicht darin daß er eine <span class='underline_single'>bestimmte</span> Beziehung zur Wirklichkeit hat sondern darin daß er zu ihr eine bestimmte Beziehung wirklich <span class='underline_single'>hat</span>. <br>\",\"eng\":\"For a proposition to be true does not consist in its having a <span class='underline_single'>particular</span> relation to reality but in its really <span class='underline_single'>having</span> a particular relation.<br>\",\"date\":\"1914-11-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,10r[2] (1914--1102) (NB)\",\"ger\":\"Verhält es sich nicht so: Der falsche Satz hat wie der wahre und unabhängig von seiner Falsch- oder Wahrheit einen Sinn aber keine Bedeutung? (Ist hier nicht ein besserer Gebrauch des Wortes „Bedeutung”?) <br>\",\"eng\":\"Isn’t it like this: The false proposition makes sense like the true, and independently of its falsity or truth, has a sense but no meaning? (Isn't this a better use of the word \\\"meaning\\\"?)<br>\",\"date\":\"1914-11-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,10r[3] et 11r[1] (1914--1102) (NB)\",\"ger\":\"Könnte man sagen: sobald mir Subjekt und Prädikat gegeben sind so ist mir eine Relation gegeben die zwischen einem S.-P. Satz & seiner Bedeutung  / bestehen oder nicht <span class='underline_single'>bestehen</span> wird. Sobald ich nur Subjekt & Prädikat kenne kann ich auch um jene Relation wissen die ja auch für den Fall daß der S.-P. Satz falsch ist eine unumgängliche Voraussetzung ist. <br>\",\"eng\":\"Could one say: The moment I am given subject and predicate I am given a relation which will obtain or not <span class='underline_single'>obtain</span> between a subject-predicate proposition and its meaning. The moment I know just subject and predicate I can also know about the relation, which is also an indispensable presupposition for the subject-predicate proposition’s being false.<br>\",\"date\":\"1914-11-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,11r[2] (1914--1103) (NB)\",\"ger\":\"Damit es den negativen Sachverhalt geben kann muß es das Bild des positiven geben. <br>\",\"eng\":\"For for there to be a negative state of things, there must be a picture of the positive state of things. [Cf. 5.5151.]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,11r[3] (1914--1103) (NB)\",\"ger\":\"Die Kenntnis der darstellenden Relation <span class='underline_single'>darf</span> sich ja auch nur auf die Kenntnis der Bestandteile des Sachverhalts gründen! <br>\",\"eng\":\"Knowledge of the representing relation <span class='underline_single'>must</span> be based just on knowledge of the constituents of the state of things!<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,11r[4] et 12r[1] (1914--1103) (NB)\",\"ger\":\"Könnte man also sagen: Die Kenntnis  / des S.-P. Satzes & von Subjekt und Prädikat gibt uns die Kenntnis einer internen Relation etc.? <br>Auch dies ist strenggenommen nicht richtig da wir kein bestimmtes Subjekt oder Prädikat zu kennen brauchen. <br>\",\"eng\":\"Could one then say: Knowledge of the subject-predicate proposition and of subject and predicate gives us knowledge of an internal relation, etc.? <br>Strictly speaking even this is incorrect, since we do not need to know any particular subject or predicate.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,12r[2] (1914--1103) (NB)\",\"ger\":\"<span class='underline_single'>Offenbar</span> daß wir den Elementarsatz als das Bild eines Sachverhalts empfinden –, wie geht das zu? <br>\",\"eng\":\"It is <span class='underline_single'>evident</span> that an elementary proposition strikes us as a picture of a state of things. -- How does that go? [<em>Cf.</em> 4.012.]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"4·01121\",\"pt-page\":\"56[2]\",\"tlp-number\":\"4·012 a*\",\"cross-references\":\"3.11.14 (5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,12r[3] (1914--1103) (NB)\",\"ger\":\"Muß nicht die Möglichkeit der darstellenden Beziehung durch den Satz <span class='underline_single'>selbst</span> gegeben sein? <br>\",\"eng\":\"Mustn’t the possibility of the representing relation be given by the proposition <span class='underline_single'>itself</span>?<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,12r[4] et 13r[1] (1914--1103) (NB)\",\"ger\":\"Der Satz <span class='underline_single'>selber</span> scheidet das mit ihm Kongruierende von dem nicht Kongruierenden. / Zum Beispiel: ist also der Satz gegeben und Kongruenz dann ist der Satz wahr wenn der Sachverhalt mit ihm kongruent <span class='underline_single'>ist</span> oder es sind gegeben der Satz und Nicht-Kongruenz, dann ist der Satz wahr wenn der Sachverhalt mit ihm nicht kongruent ist. <br>\",\"eng\":\"The proposition <span class='underline_single'>itself</span> divides what is congruent with it from what is not. For example: if the proposition is given, and congruence, then the proposition is true if the state of things <span class='underline_single'>is</span> congruent with it. Or: if the proposition is given and non-congruence, then the proposition is true if the state of things is not congruent with it.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,13r[2] et 14r[1] (1914--1103) (NB)\",\"ger\":\"Wie aber wird uns die Kongruenz oder Nicht-Kongruenz, oder dergl., gegeben. <br>Wie kann mir <span class='underline_single'>mitgeteilt</span> werden <span class='underline_single'>wie</span> der Satz darstellt. Oder kann mir das überhaupt nicht <span class='underline_single'>gesagt</span> werden. Und wenn dem so ist kann ich es „<span class='underline_single'>wissen</span>”? Wenn es mir gesagt werden sollte so müßte dies durch einen Satz geschehen; der könnte es aber  / nur zeigen. <br>\",\"eng\":\"But how is congruence or non-congruence, or suchlike, given to us? <br>How can I be <span class='underline_single'>told how</span> the proposition represents? Or can this not be <span class='underline_single'>said</span> to me at all? And if that is so, how can I \\\"<span class='underline_single'>know</span>\\\" it? If it was supposed to be said to me then this would have to be done by means of a proposition; but the proposition could only show it.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,14r[2] (1914--1103) (NB)\",\"ger\":\"Was gesagt werden kann, kann nur durch einen Satz gesagt werden, also kann nichts was zum Verständnis <span class='underline_single'>aller</span> Sätze nötig ist gesagt werden. <br>\",\"eng\":\"What can be said can only be said by means of a proposition, so nothing that is necessary for understanding <span class='underline_single'>all</span> propositions can be said.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,14r[3] et 15r[1] (1914--1103) (NB)\",\"ger\":\"Jene willkürliche Zuordnung von Zeichen & Bezeichnetem die die Möglichkeit der Sätze bedingt und die ich in den ganz allgemeinen Sätzen vermißte geschieht dort durch die Allgemeinheitsbezeichnung geradeso wie beim Elementarsatz durch Namen (denn die Allgemeinheitsbezeichnung gehört nicht zum <span class='underline_single'>Bild</span>). Daher empfand man  / auch immer daß die Allgemeinheit ganz wie ein Argument auftritt. <br>\",\"eng\":\"That arbitrary correlation of a sign and what it signifies which is a condition of the possibility of the propositions, and which I found lacking in wholly general propositions, occurs there by means of the sign for generality just as in the elementary proposition it occurs by means of names. (For the sign for generality does not belong to the <span class='underline_single'>picture</span>). Hence, the constant feeling that generality figures just like an argument. [<em>Cf</em>. 5.523.]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\" 5·322\",\"pt-page\":\"63[5]\",\"tlp-number\":\"3.11.14 (12)** 2.12.16 (1)+  (Pilch: PT 5·3221)\",\"cross-references\":\"3.11.14 (12)** 2.12.16 (1)+  (Pilch: PT 5·3221)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,15r[2] (1914--1103) (NB)\",\"ger\":\"Verneinen kann man nur einen fertigen Satz. (Ähnliches gilt von allen ab-Funktionen.) <br>\",\"eng\":\"Only a finished proposition can be negated. (Likewise for all ab-functions). [<em>Cf</em>. 4.064 and 4.0641.]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\" 4·095\",\"pt-page\":\"45[9]\",\"tlp-number\":\"4·064*\",\"cross-references\":\"3.11.14 (15)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,15r[3] (1914--1103) (NB)\",\"ger\":\"Der Satz ist das logische Bild eines Sachverhaltes. <br>\",\"eng\":\"A proposition is a logical picture of a state of things.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,15r[4] (1914--1103) (NB)\",\"ger\":\"Die Verneinung bezieht sich auf den <span class='underline_single'>fertigen</span> Sinn des verneinten Satzes und nicht auf dessen Darstellungsweise. <br>\",\"eng\":\"Negation alludes to the <span class='underline_single'>finished</span> sense of the negated proposition, and not to its way of presenting. [<em>Cf</em>. 4.064 and 4.0641.]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\" 4·095\",\"pt-page\":\"45[9]\",\"tlp-number\":\"4·064*\",\"cross-references\":\"3.11.14 (15)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,15r[5] et 16r[1] (1914--1103) (NB)\",\"ger\":\"Wenn ein Bild auf die vorhin erwähnte Weise darstellt was-nicht-der-Fall-ist so geschieht dies auch nur dadurch daß es  / <span class='underline_single'>dasjenige</span> darstellt was nicht der Fall ist. <br>\",\"eng\":\"If a picture represents what-is-not-the-case in the above-mentioned way, this only happens through its also representing <span class='underline_single'>that</span> which <span class='underline_single'>is</span> not the case.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,16r[2] (1914--1103) (NB)\",\"ger\":\"Denn das Bild sagt gleichsam: „<span class='underline_single'>so</span> ist es <span class='underline_single'>nicht</span>” und auf die Frage „<span class='underline_single'>wie</span> ist es nicht?” ist eben die Antwort der positive Satz. <br>\",\"eng\":\"For the picture says, as it were, \\\"<span class='underline_single'>This</span> is how it is <span class='underline_single'>not</span>\\\" and the answer to the question \\\"<span class='underline_single'>How</span> is it not?\\\" is just the positive proposition.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,16r[3] (1914--1103) (NB)\",\"ger\":\"Man könnte sagen: die Verneinung bezieht sich schon auf den logischen Ort den der verneinte Satz bestimmt. <br>\",\"eng\":\"One could say: the negation already alludes to the logical locus traced out by the negated proposition. [<em>See</em> 4.0641 (3).]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"4·0952\",\"pt-page\":\"40[5]\",\"tlp-number\":\"4·0641 (3)*\",\"cross-references\":\"3.11.14 (18, 20, 22)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,16r[4] (1914--1103) (NB)\",\"ger\":\"Nur den festen Grund auf dem man einmal gestanden ist nicht verlieren! <br>\",\"eng\":\"But don’t lose the firm ground on which you have just been standing!<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,16r[5] (1914--1103) (NB)\",\"ger\":\"Der verneinende Satz bestimmt einen <span class='underline_single'>anderen</span> logischen Ort als der verneinte. <br>\",\"eng\":\"The negating proposition traces out a <span class='underline_single'>different</span> logical locus from the negated proposition. [<em>See</em> 4.0641 (3).]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"4·0952\",\"pt-page\":\"40[5]\",\"tlp-number\":\"4·0641 (3)*\",\"cross-references\":\"3.11.14 (18, 20, 22)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,17r[1] (1914--1103) (NB)\",\"ger\":\"Der verneinte Satz zieht nicht nur die Grenzlinie zwischen dem verneinten Gebiet & dem übrigen, sondern er deutet auch schon auf das verneinte Gebiet. <br>\",\"eng\":\"The negated proposition not only draws the boundary between the negated domain and the rest, but it also actually points to the negated domain.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,17r[2] (1914--1103) (NB)\",\"ger\":\"Der verneinende Satz bestimmt seinen logischen Ort mit Hilfe des logischen Ortes des verneinten Satzes. Indem er jenen als den außerhalb diesem liegenden beschreibt. <br>\",\"eng\":\"The negating proposition traces out its logical locus using the logical locus of the negated proposition by describing it as lying outside the latter. [<em>See</em> 4.0641 (3).]<br>\",\"date\":\"1914-11-03\",\"pt-number\":\" 4·0952\",\"pt-page\":\"40[5]\",\"tlp-number\":\"4·0641 (3)*\",\"cross-references\":\"3.11.14 (18, 20, 22)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,17r[3] (1914--1103) (NB)\",\"ger\":\"Der Satz ist wahr, wenn es das gibt was er vorstellt. <br>\",\"eng\":\"A proposition is true if what it betokens exists.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,17r[4] (1914--1104) (NB)\",\"ger\":\"Wie bestimmt der Satz den logischen Ort? <br>\",\"eng\":\"How does a proposition trace out a logical locus?<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,18r[1] (1914--1104) (NB)\",\"ger\":\"Wie repräsentiert das Bild einen Sachverhalt? <br>\",\"eng\":\"How does a picture represent a state of things?<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,18r[2] (1914--1104) (NB)\",\"ger\":\"Selbst ist es doch nicht der Sachverhalt, ja dieser braucht gar nicht der Fall zu sein. <br>\",\"eng\":\"After all, it is not the state of things itself—indeed, that need not be the case at all.<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,18r[3] (1914--1104) (NB)\",\"ger\":\"\\\\ \\\\ \\\\ \\tEin Name repräsentiert ein Ding ein anderer ein anderes Ding und selbst sind sie verbunden; so stellt das Ganze – wie ein lebendes Bild – den Sachverhalt vor. <br>\",\"eng\":\"One name represents one thing, another represents another thing, and they themselves are connected, so that the whole, like a <em>tableau vivant</em>, betokens a state of things. [<em>Cf</em>. 4.0311.]<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,18r[4] et 19r[1] (1914--1104) (NB)\",\"ger\":\"Die logische Verbindung muß natürlich unter den repräsentierten Dingen möglich sein und dies wird immer der Fall sein wenn die Dinge wirklich repräsentiert sind. Wohlgemerkt jene Verbindung / ist keine Relation sondern nur das <span class='underline_single'>Bestehen</span> einer Relation. <br>\",\"eng\":\"A logical connection must of course be one that is possible for the things that are represented, and this will always be the case if the things really are represented. Of course, that connection is not a relation but only the <span class='underline_single'>obtaining</span> of a relation.<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,19r[2] (1914--1105) (NB)\",\"ger\":\"So stellt der Satz den Sachverhalt gleichsam auf eigene Faust dar. <br>\",\"eng\":\"In this way, a proposition represents a state of things on its own terms, as it were.<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,19r[3] (1914--1105) (NB)\",\"ger\":\"Wenn ich aber sage: Die Verbindung der Satzbestandteile muß für die repräsentierten Dinge möglich sein: liegt nicht hierin das ganze Problem! Wie kann eine Verbindung zwischen Gegenständen möglich sein, die nicht ist. <br>\",\"eng\":\"But if I say: The connection of the constituents of the proposition must be possible for the things that are represented—doesn’t this contain whole problem? How can a non-existent connection between objects be possible?<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,19r[4] et 20r[1] (1914--1105) (NB)\",\"ger\":\"Die Verbindung muß möglich sein heißt: der Satz & die Bestandteile des Sachverhalts müssen in  / einer bestimmten Relation stehen. <br>\",\"eng\":\"“The connection must be possible” means: the proposition and the constituents of the state of things must stand in a particular relation.<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,20r[2] (1914--1105) (NB)\",\"ger\":\"Damit also ein Satz einen Sachverhalt darstelle ist nur nötig daß seine Bestandteile die des Sachverhalt repräsentieren und daß jene in einer für diese möglichen Verbindung stehen. <br>\",\"eng\":\"So in order for a proposition to represent a state of things, it is only necessary for its constituents to represent those of the state of things and for the former to stand in a connection which is possible for the latter.<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,20r[3] (1914--1105) (NB)\",\"ger\":\"Das Satzzeichen verbürgt die Möglichkeit der Tatsache welche es darstellt (nicht daß diese Tatsache wirklich der Fall ist) das gilt auch für die allgemeinen Sätze. <br>\",\"eng\":\"A propositional sign guarantees the possibility of the fact it represents (not that this fact is actually the case) - this holds for general propositions too.<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,20r[4] et 21r[1] (1914--1105) (NB)\",\"ger\":\"Denn wenn die positive Tatsache φa gegeben ist dann ist auch die <span class='underline_single'>Möglichkeit</span> für (x).φx, ~(∃x).φx, ~φ(a) etc. etc. gegeben. (Alle / logischen Konstanten sind bereits im Elementarsatz enthalten.) <br>\",\"eng\":\"For if a positive fact φa is given then so is the <span class='underline_single'>possibility</span> of (x).φx, ~(∃x).φx, ~φ(a) etc. etc. (An elementary proposition already contains all logical constants.) [<em>Cf</em>. 5.47 (2).]<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"5·3031 SchonEnth. 51[6]\",\"pt-page\":\"5·3031 SchonEnth. 51[6]\",\"tlp-number\":\"5·47 (2)*\",\"cross-references\":\"5.11.14 (6)**  12.11.14 (5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,21r[2] (1914--1105) (NB)\",\"ger\":\" / \\\\\\tSo entsteht das Bild. – Um mit dem Bilde einen logischen Ort zu bezeichnen müssen wir zu ihm eine Bezeichnungsweise setzen (die positive, negative, etc.). <br>\",\"eng\":\"That is how the picture is formed. - In order for the picture to signify a logical locus we must add a way of signifying to it (positive, negative, etc.).<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,21r[3] (1914--1105) (NB)\",\"ger\":\" \\\\ Man könnte z.B. mittelst fechtenden Puppen zeigen wie man <span class='underline_single'>nicht</span> fechten solle. <br>\",\"eng\":\"For example, one could use fencing dolls to show how <span class='underline_single'>not</span> to fence.<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,21r[4] (1914--1106) (NB)\",\"ger\":\"Und der Fall ist hier ganz der gleiche wie bei ~φa obwohl das Bild von dem handelt was nicht geschehen <span class='underline_single'>soll</span> statt von dem was nicht geschieht. <br>\",\"eng\":\"And it is just the same with this case as with ~φa, although the picture is about what <span class='underline_single'>should</span>n’t happen instead of what doesn’t happen.<br>\",\"date\":\"1914-11-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,21r[5] et 22r[1] (1914--1106) (NB)\",\"ger\":\"Daß man den verneinten Satz wieder  / verneinen kann zeigt, daß das was verneint wird schon ein Satz und nicht erst die Vorbereitung zu einem Satz ist. <br>\",\"eng\":\"That the negated proposition can be negated once more shows that what is negated is already a proposition, and not just something preliminary to a proposition. [<em>See</em> 4.0641 (4).]<br>\",\"date\":\"1914-11-06\",\"pt-number\":\" 4·0953\",\"pt-page\":\"41[1]\",\"tlp-number\":\"4·0641 (4)**\",\"cross-references\":\"6.11.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,22r[2] (1914--1106) (NB)\",\"ger\":\" / \\\\\\tKönnte man sagen?: „Hier ist das Bild, aber ob es stimmt oder nicht kann man nicht sagen ehe man weiß was damit gesagt sein soll.” <br>\",\"eng\":\"Could one say: \\\"Here is the picture, but one cannot say whether it is right or not before one knows what it is supposed to say\\\".<br>\",\"date\":\"1914-11-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,22r[3] (1914--1106) (NB)\",\"ger\":\"Das Bild muß nun wieder seinen Schatten auf die Welt werfen. <br>\",\"eng\":\"The picture must now in turn cast its shadow on the world.<br>\",\"date\":\"1914-11-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,22r[4] (1914--1107) (NB)\",\"ger\":\"Der räumliche & der logische Ort stimmen darin überein daß beide die Möglichkeit einer Existenz sind. <br>\",\"eng\":\"A spatial and a logical locus agree to this extent: that each is the source of something’s existence. [3.411.]<br>\",\"date\":\"1914-11-07\",\"pt-number\":\" 3·2103\",\"pt-page\":\"43[5]\",\"tlp-number\":\"3·411\",\"cross-references\":\"7.11.14\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,23r[1] (1914--1108) (NB)\",\"ger\":\"Was sich in den Sätzen über Wahrscheinlichkeit durch das Experiment bestätigen läßt kann unmöglich Mathematik sein! <br>\",\"eng\":\"What can be confirmed by experiment, in propositions about probability, cannot possibly be mathematics. [<em>Cf</em>. 5.154 (1-2).]<br>\",\"date\":\"1914-11-08\",\"pt-number\":\" 5·0934\",\"pt-page\":\"78[8]\",\"tlp-number\":\"\",\"cross-references\":\"8.11.14 (1)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,23r[2] (1914--1108) (NB)\",\"ger\":\"Wahrscheinlichkeitssätze sind Auszüge naturwissenschaftlicher Gesetze. <br>\",\"eng\":\"\",\"date\":\"1914-11-08\",\"pt-number\":\" 5·0933\",\"pt-page\":\"78[7]\",\"tlp-number\":\"5·156 (5)** \",\"cross-references\":\"8.11.14 (2) +\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,23r[3] (1914--1108) (NB)\",\"ger\":\"Sie sind Verallgemeinerungen und drücken eine unvollständige Kenntnis jener Gesetze aus. <br>\",\"eng\":\"They are generalizations and express an incomplete knowledge of those laws. [<em>Cf</em>. 5.156 (1).]<br>\",\"date\":\"1914-11-08\",\"pt-number\":\" 5·092\",\"pt-page\":\"78[3]\",\"tlp-number\":\"5·156 (1) \",\"cross-references\":\"8.11.14 (3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,23r[4] et 24r[1] (1914--1108) (NB)\",\"ger\":\"Wenn ich z.B. schwarze & weiße Ballen aus einer Urne ziehe so kann ich nicht vor einem Zug sagen ob ich einen weißen oder schwarzen Ballen ziehen werde da ich hierzu die Naturgesetze nicht genau genug kenne aber  / <span class='underline_single'>das weiß ich doch</span> daß im Falle gleich viel schwarze & weiße Ballen vorhanden sind die Zahlen der gezogenen schwarzen sich der der weißen bei fortgesetztem Ziehen nähern wird, so genau kenne ich die Naturgesetze eben <span class='underline_single'>doch</span>. <br>\",\"eng\":\"For example, if I draw black and white balls from an urn, I cannot say before taking one out whether I will draw a white or a black ball because I do not know the laws of nature well enough, but <span class='underline_single'>surely</span><span class='underline_single'> </span><span class='underline_single'>I do</span><span class='underline_single'> </span><span class='underline_single'>know</span> that in the case of equal numbers of black & white balls, the number of black balls drawn will approach the numbers of white balls drawn as the drawing continues; I do know the laws of nature well enough for <span class='underline_single'>that</span>. [<em>Cf</em>. 5.154.]<br>\",\"date\":\"1914-11-08\",\"pt-number\":\" +5·154\",\"pt-page\":\"107[1]\",\"tlp-number\":\"5·154\",\"cross-references\":\"8.11.14 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,24r[2] (1914--1109) (NB)\",\"ger\":\"Was ich nun in den Wahrscheinlichkeitssätzen kenne, sind gewisse allgemeine Eigenschaften der unverallgemeinerten naturwissenschaftlichen Sätze wie z.B. ihre Symmetrie in gewissen Beziehungen ihre Asymmetrie in anderen etc. <br>\",\"eng\":\"Now what I know now in probability statements are certain general properties of ungeneralized scientific propositions such as, for example, their symmetry in certain respects, their asymmetry in others, etc. [<em>Cf</em>. 5.156 (3).]<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"5·0931\",\"pt-page\":\"78[5]\",\"tlp-number\":\"5·156 (3)* \",\"cross-references\":\"9.11.14 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,24r[3] (1914--1109) (NB)\",\"ger\":\" / \\\\\\tVexierbilder & das Sehen von Sachverhalten. <br>\",\"eng\":\"Puzzle pictures and seeing states of things. [<em>Cf</em>. 5. 5423.]<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"6·0051\",\"pt-page\":\"93[8]\",\"tlp-number\":\"5·5423 (2-3) \",\"cross-references\":\"9.11.14 (2)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,25r[1] (1914--1109) (NB)\",\"ger\":\"Es war das was ich mein starkes scholastisches Gefühl nennen möchte, was die Ursache meiner besten Entdeckungen war. <br>\",\"eng\":\"The source of my best discoveries has been what I should like to call my strong scholastic feeling.<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,25r[2] (1914--1109) (NB)\",\"ger\":\"„nicht p” & „p” widersprechen einander, beide können nicht wahr sein; aber doch kann ich beide aussprechen, <span class='underline_single'>beide Bilder gibt es</span>. Sie liegen nebeneinander. <br>\",\"eng\":\"\\\"Not p\\\" and \\\"p\\\" contradict each other, both can't be true; but still I can articulate both, <span class='underline_single'>both pictures exist</span>. They are next to each other.<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,25r[3] (1914--1109) (NB)\",\"ger\":\" / \\\\\\tOder vielmehr „p” & „~p” sind wie ein Bild und die unendliche Ebene außerhalb dieses Bildes (logischer Ort). <br>Den unendlichen Raum außerhalb kann ich nur mit Hilfe des Bildes herstellen indem ich ihn durch dieses begrenze. <br>\",\"eng\":\"Or rather \\\"p\\\" & \\\"~p\\\" are like a picture and the infinite plane outside this picture (logical location). <br>I can construct the infinite space outside only by using the picture to bound that space.<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,26r[1] (1914--1110) (NB)\",\"ger\":\"Wenn ich sage „p ist möglich” heißt das ‚„p” hat einen Sinn’? redet jener Satz von der Sprache so daß also für seinen Sinn die Existenz eines Satzzeichens („p”) wesentlich ist? (Dann wäre er ganz unwichtig.) Aber will er nicht vielmehr das sagen was „p ⌵ ~p” zeigt? <br>\",\"eng\":\"If I say \\\"p is possible\\\", does that mean that \\\" 'p' makes sense\\\"? Is the former proposition talking about language in such a way that the existence of a propositional sign (\\\"p\\\") is essential for its sense? (Then it would be quite unimportant.) But doesn't it rather try to say what \\\"p ⌵ ~p\\\" shows?<br>\",\"date\":\"1914-11-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,26r[2] et 27r[1] (1914--1110) (NB)\",\"ger\":\"Entspricht nicht mein Studium der Zeichensprache dem Studium der Denkprozesse, welches die Philosophen für die Philosophie der Logik immer für so wesentlich hielten? – Nur verwickelten sie sich immer in unwesentliche psychologische Untersuchungen & eine analoge Gefahr gibt es auch bei / meiner Methode. <br>\",\"eng\":\"Does not my examination of sign-language correspond to the examination of thought-processes, which philosophers always used to consider so essential to the philosophy of logic? Only they always got involved in irrelevant psychological investigations, and there is an analogous danger in following my method. [<em>See</em> 4.1121 (3).]<br>\",\"date\":\"1914-11-10\",\"pt-number\":\" 4·1001531\",\"pt-page\":\"41[3]\",\"tlp-number\":\"4·1121 (3)*\",\"cross-references\":\"10.11.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,27r[2] (1914--1110) (NB)\",\"ger\":\"Da „a = b” kein Satz; „x = y” keine Funktion ist so ist eine ‚Klasse x̂(x = x)’ ein Unding und ebenso die sogenannte Nullklasse. (Man hatte übrigens immer schon das Gefühl daß überall da wo man sich in Satzkonstruktionen mit x = x, a = a, etc. half, daß es sich in allen solchen Fällen um ein sich-heraus-schwindeln handelte; so wenn man sagte „a existiert” heißt „(∃x) x = a”.) <br><span class='underline_single'>Dies ist falsch: da die Definition der Klassen selbst die Existenz der wirklichen Funktionen verbürgt</span>. <br>\",\"eng\":\"Since \\\"a = b\\\" is not a proposition, nor \\\"x = y\\\" a function, a \\\"class x̂(x = x)\\\" is an absurdity and so equally the so-called null class. (For that matter, one did always have the feeling that wherever one helped oneself to x = x, a = a, etc. in constructing sentences, that in all such cases it was a matter of fraudulently getting out of trouble; as though one said \\\"a exists\\\" means \\\"(∃x) x = a\\\"). <br><span class='underline_single'>This is wrong: since the definition of classes itself guarantees the existence of the real functions</span>. <br>\",\"date\":\"1914-11-10\",\"pt-number\":\"5·3344\",\"pt-page\":\"43[9]\",\"tlp-number\":\"5·5352*\",\"cross-references\":\"11.11.14 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,28r[1] (1914--1110) (NB)\",\"ger\":\"Wenn ich nun eine Funktion von der Nullklasse auszusagen scheine so sage ich daß diese Funktion von allen Funktionen wahr ist welche null sind – und dies kann ich auch dann sagen wenn <span class='underline_single'>keine</span> Funktion null ist. <br>\",\"eng\":\"Now, if I appear to assert a function of the null class, I am saying that this function is true of all functions which are null - and I can say this even if <span class='underline_single'>no</span> function is null.<br>\",\"date\":\"1914-11-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,28r[2] (1914--1110) (NB)\",\"ger\":\"Ist x ≠ x .≡x. φx identisch mit <br>\",\"eng\":\"Is x ≠ x .≡x. φx identical with <br>\",\"date\":\"1914-11-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,28r[3] (1914--1110) (NB)\",\"ger\":\"Der Satz deutet auf die Möglichkeit, daß es sich so & so verhält. <br>\",\"eng\":\"A proposition points to the possibility that such and such is the case.<br>\",\"date\":\"1914-11-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,28r[4] (1914--1112) (NB)\",\"ger\":\"Die Verneinung ist im selben Sinne <span class='underline_single'>eine Beschreibung</span> wie der Elementarsatz selbst. <br>\",\"eng\":\"A negation is <span class='underline_single'>a description</span> in the same sense as the elementary proposition itself.<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,29r[1] (1914--1112) (NB)\",\"ger\":\"Man könnte die Wahrheit eines Satzes möglich, die einer Tautologie gewiß und die einer Kontradiktion unmöglich nennen. Hier tritt schon das Anzeichen einer Gradation auf die wir in der Wahrscheinlichkeitsrechnung brauchen. <br>\",\"eng\":\"One might call the truth of a proposition possible, that of a tautology certain, and that of a contradiction impossible. Here we already get a hint of the graduation needed in probability theory.<br>\",\"date\":\"1914-11-12\",\"pt-number\":\" 4·44861\",\"pt-page\":\"42[3]\",\"tlp-number\":\"4·464 (2)*\",\"cross-references\":\"12.11.14 (2)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,29r[2] (1914--1112) (NB)\",\"ger\":\"In der Tautologie bildet der Elementarsatz – selbstverständlich – noch immer ab aber er ist mit der Wirklichkeit so lose verbunden daß dieser unbeschränkte Freiheit hat. Die Kontradiktion wieder setzt solche Schranken daß keine Wirklichkeit in ihnen existieren kann. <br>\",\"eng\":\"Of course in a tautology an elementary proposition still depicts, but it is so loosely connected with reality that reality has unlimited<em> </em>freedom. The constraints set by a contradiction in its turn are such that no reality can exist under them.<br>\",\"date\":\"1914-11-12\",\"pt-number\":\" 4·4484\",\"pt-page\":\"42[1]\",\"tlp-number\":\"\",\"cross-references\":\"12.11.14 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,30r[1] (1914--1112) (NB)\",\"ger\":\"\\\\\\tEs ist als projizierten die logischen Konstanten das Bild des Elementarsatzes auf die Wirklichkeit – die dann mit dieser Projektion stimmen oder nicht-stimmen kann. <br>Obwohl im einfachen Satz bereits alle logischen Konstanten vorkommen so <span class='underline_single'>muß</span> in ihm doch auch sein eigenes Urbild ganz & unzerlegt vorkommen! <br>\",\"eng\":\"It is as if the logical constants project the image of the elementary proposition onto reality - which then can agree or disagree with this projection. <br>Although all logical constants already occur in a simple proposition, nevertheless, its own prototype <span class='underline_single'>must</span> also occur in it complete and undivided.<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"5·3031 SchonEnth. 51[6]\",\"pt-page\":\"5·3031 SchonEnth. 51[6]\",\"tlp-number\":\"5·47 (2)*\",\"cross-references\":\"5.11.14 (6)**  12.11.14 (5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,30r[2] (1914--1112) (NB)\",\"ger\":\"Ist also etwa nicht der einfache Satz das Bild sondern vielmehr sein Urbild welches in ihm vorkommen muß. <br>\",\"eng\":\"Then is the picture perhaps not the simple proposition but rather its prototype which must occur in it?<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,30r[3] et 31r[1] (1914--1112) (NB)\",\"ger\":\" Dieses Urbild ist dann wirklich  / kein Satz (hat aber die Gestalt eines Satzes) und <span class='underline_single'>es</span> könnte der Fregeschen „Annahme” entsprechen. <br>\",\"eng\":\"Then this prototype is not actually a proposition (though it has the appearance of a proposition) and it might correspond to Frege's \\\"assumption\\\".<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,31r[2] (1914--1112) (NB)\",\"ger\":\" Der Satz bestünde dann aus Ur<span class='underline_single'>bildern</span>, die auf die Welt projiziert wären. <br>\",\"eng\":\"In that case, a proposition would consist of proto<span class='underline_single'>types</span>, which were projected onto the world.<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,31r[3] (1914--1113) (NB) \",\"ger\":\"Bei dieser Arbeit lohnt es sich mehr als bei jeder anderen Fragen die man für gelöst hält immer wieder von neuen Seiten als ungelöst zu betrachten. <br>\",\"eng\":\"In this work, more than any other, it is worthwhile to keep on looking at questions one considers answered from other perspectives, as though they were unanswered.<br>\",\"date\":\"1914-11-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,31r[4] et 32r[1] (1914--1113) (NB)\",\"ger\":\"Denke an die Darstellung <span class='underline_single'>negativer</span> Tatsachen durch Modelle. Etwa: So & so dürfen  / zwei Eisenbahnzüge nicht auf den Gleisen stehen. Der Satz, das Bild, das Modell sind – im negativen Sinn – wie ein fester Körper der die Bewegungsfreiheit der anderen beschränkt, im positiven Sinne wie der von fester Substanz begrenzte Raum worin ein Körper Platz hat.<br>Diese Vorstellung ist <span class='underline_single'>sehr</span> deutlich und müßte zur Lösung führen. <br>\",\"eng\":\"Think of the representation of <span class='underline_single'>negative</span> facts by means of models. For example: Two railway trains must not stand on the tracks in such and such a way. A proposition, a picture, or a model is, in the negative sense, like a solid body restricting the freedom of movement of another; in the positive sense, like a space bounded by solid substance in which there is room for a body. [<em>Cf. </em>4.463  (2).]<br>This idea is <span class='underline_single'>very</span> clear and should lead to the solution. <br>\",\"date\":\"1914-11-13\",\"pt-number\":\" 4·4322\",\"pt-page\":\"41[4]\",\"tlp-number\":\"4·463 (2)*\",\"cross-references\":\"14.11.14 (1) \",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,32r[2] (1914--1115) (NB)\",\"ger\":\"Projektion des Bildes auf die Wirklichkeit <br>(Maxwells Methode der mechanischen Modelle) <br>\",\"eng\":\"Projection of picture onto reality<br>(Maxwell's method of mechanical models.)<br>\",\"date\":\"1914-11-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,33r[1] (1914--1115) (NB)\",\"ger\":\"Nur sich nicht um das kümmern was man einmal geschrieben hat! Nur immer von frischem anfangen zu denken als ob noch gar nichts geschehen wäre! <br>\",\"eng\":\"Don’t worry about what you have already written. Just keep on starting to think afresh as if nothing at all had happened yet.<br>\",\"date\":\"1914-11-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,33r[2] (1914--1115) (NB)\",\"ger\":\"Jener Schatten welchen das Bild gleichsam auf die Welt wirft: Wie soll ich ihn exakt fassen? <br>     Hier ist ein tiefes Geheimnis. <br>\",\"eng\":\"That shadow which the picture casts on the world, as it were: How am I to get a precise grasp on it? <br>     Here is a deep mystery.<br>\",\"date\":\"1914-11-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,33r[3] (1914--1115) (NB)\",\"ger\":\" Es ist das Geheimnis der Negation: Es verhält sich nicht so, und doch können wir sagen <span class='underline_single'>wie</span> es sich <span class='underline_single'>nicht</span> verhält. – <br>\",\"eng\":\"It is the mystery of negation: This is not how things are, and yet we can say <span class='underline_single'>how</span> things are <span class='underline_single'>not</span>. - –<br>\",\"date\":\"1914-11-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,33r[4] et 34r[1] (1914--1115) (NB)\",\"ger\":\"Der Satz ist eben nur die <span class='underline_single'>Beschreibung</span> eines Sachverhalts. (Aber das ist alles noch an der Oberfläche.) / <span class='underline_single'>Eine</span> Einsicht am Ursprung ist mehr wert als noch so viele irgendwo in der Mitte. <br>\",\"eng\":\"A proposition just is a <span class='underline_single'>description</span> of a state of things. (But that is all still on the surface.) [<em>Cf</em>. 4.023.]<br><span class='underline_single'>One</span> insight at the very beginning is more valuable than ever so many somewhere in the middle. <br>\",\"date\":\"1914-11-15\",\"pt-number\":\" 4·0232\",\"pt-page\":\"47[6]\",\"tlp-number\":\"4·023 (3)\",\"cross-references\":\"15.11.14(6)**  16.1.15 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,34r[2] (1914--1116) (NB)\",\"ger\":\"Einführung des Zeichens „0” um die Dezimalnotation möglich zu machen: Die logische Bedeutung dieses Vorgehens. <br>\",\"eng\":\"The introduction of the sign \\\"0\\\" as making decimal notation possible: The logical meaning of this procedure.<br>\",\"date\":\"1914-11-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,34r[3] (1914--1117) (NB)\",\"ger\":\"Angenommen „φ(a)” ist wahr: Was heißt es zu sagen ~φa ist möglich? <br>(φa ist selber gleichbedeutend mit ~(~φa).) <br>\",\"eng\":\"Suppose \\\"φ(a)\\\" is true: what does it mean to say ~φa is possible? <br>(φa itself means the same as ~(~φa).)<br>\",\"date\":\"1914-11-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,34r[4] (1914--1118) (NB)\",\"ger\":\"Es handelt sich da immer nur um die Existenz des logischen Orts. <br>Was – zum Teufel – ist aber dieser „logische Ort”!? <br>\",\"eng\":\"It is all simply a matter of the existence of the logical location. <br>But what— hang it all — is this \\\"logical location\\\"!?<br>// But what the hell is this \\\"logical location\\\"!?//<br>\",\"date\":\"1914-11-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,34r[5] et 35r[1] (1914--1119) (NB)\",\"ger\":\"/ Der Satz & die logischen Koordinaten: das ist der logische Ort. <br>\",\"eng\":\"A proposition with its logical coordinates: this gives us a logical location. [<em>Cf. </em>3.41.]<br>//A sentence plus its logical coordinates: this gives us a logical location. [<em>Cf. </em>3.41.]//<br>\",\"date\":\"1914-11-19\",\"pt-number\":\" 3·2102\",\"pt-page\":\"43[4]\",\"tlp-number\":\"3·41\",\"cross-references\":\"19.11.14\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,35r[2] (1914--1120) (NB)\",\"ger\":\"+ 43[2]\\t—\\t\\t<span class='underline_single'>20.11.14 (1)</span><br>Die Realität die dem Sinne des Satzes entspricht kann doch nichts anderes sein als seine Bestandteile da wir doch <span class='underline_single'>alles</span> andere nicht <span class='underline_single'>wissen</span>. <br>\",\"eng\":\"The reality that corresponds to the sense of a proposition can surely be nothing but its constituent parts; since we are, surely, <span class='underline_single'>ignorant</span> of <span class='underline_single'>everything</span> else.<br>\",\"date\":\"1914-11-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,35r[3] (1914--1120) (NB)\",\"ger\":\"Wenn die Realität in noch etwas anderem besteht so kann dies jedenfalls weder bezeichnet noch ausgedrückt werden, denn im ersten Fall wäre es noch ein Bestandteil im zweiten wäre der Ausdruck ein Satz für den wieder dasselbe Problem bestünde wie für den ursprünglichen. <br>\",\"eng\":\"If reality consists in anything else as well, this can in any case neither be referred to nor expressed, for in the first case it would be a further constituent, in the second case the expression would be a proposition for which the same problem would arise in turn as for the original one.<br>\",\"date\":\"1914-11-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,35r[4] et 36r[1] (1914--1121) (NB)\",\"ger\":\"/ Was weiß ich eigentlich wenn ich den Sinn von „φa” verstehe aber nicht weiß ob es wahr oder falsch ist? Dann weiß ich doch nicht mehr als φa ⌵ ~φa; und das heißt ich <span class='underline_single'>wei</span><span class='underline_single'>ß</span> nichts. <br>\",\"eng\":\"What do I really know if I understand the sense of \\\"φa\\\" but don’t know whether it is true or false? In that case, I surely know no more than φa ⌵ ~φa; and that means I <span class='underline_single'>know</span> nothing.<br>\",\"date\":\"1914-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,36r[2] (1914--1121) (NB)\",\"ger\":\"Da die Realitäten die dem Sinn des Satzes entsprechen nur seine Bestandteile sind so können sich auch die logischen Koordinaten nur auf jene beziehen. <br>\",\"eng\":\"As the realities corresponding to the sense of the proposition are only its constituents, the logical coordinates too can only refer to these.<br>\",\"date\":\"1914-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,36r[3] (1914--1122) (NB)\",\"ger\":\"An dieser Stelle versuche ich wieder etwas auszudrücken was sich nicht ausdrücken läßt. <br>\",\"eng\":\"At this point I am again trying to express something that cannot be expressed.<br>\",\"date\":\"1914-11-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,36r[4] et 37r[1] (1914--1123) (NB)\",\"ger\":\"Obwohl der Satz nur auf einen Ort des logischen Raumes deuten darf  / so muß doch durch ihn <span class='underline_single'>schon</span> der ganze logische Raum gegeben sein. – Sonst würden durch Verneinung, Disjunktion etc. immer <span class='underline_single'>neue</span> Elemente – und zwar in Koordination – eingeführt was natürlich nicht geschehen darf. <br>\",\"eng\":\"Although a proposition may specify only one location in logical space, still the entire logical space must <span class='underline_single'>already</span> be given by it. - Otherwise negation, disjunction etc. would introduce more and more <span class='underline_single'>new</span> elements - and in coordination – which, of course, must not happen. [<em>Cf</em>. 3.42.]<br>\",\"date\":\"1914-11-23\",\"pt-number\":\" 3·2104\",\"pt-page\":\"43[6]\",\"tlp-number\":\"3·42 (1-2)\",\"cross-references\":\"23.11.14\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,37r[2] (1914--1124) (NB)\",\"ger\":\"Satz und Sachverhalt verhalten sich zu einander wie der Meterstab zu der zu messenden Länge. <br>\",\"eng\":\"Proposition and state of things are related to one another like a yardstick and a length to be measured. [<em>Cf</em>. 2.1512.]<br>\",\"date\":\"1914-11-24\",\"pt-number\":\" 2·1513\",\"pt-page\":\"14[3]\",\"tlp-number\":\"\",\"cross-references\":\"24.11.14 (1,4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,37r[3] et 38r[1] (1914--1124) (NB)\",\"ger\":\"Daß man aus dem <span class='underline_single'>Satz</span> „(x)φx” auf den <span class='underline_single'>Satz</span> „φa” schließen kann das zeigt wie die Allgemeinheit auch im <span class='underline_single'>Zeichen</span> „(x)φx” vorhanden ist. <br>Und das gleiche gilt natürlich für die Allgemeinheitsbezeichnung  / überhaupt. <br>\",\"eng\":\"The possibility of inferring the <span class='underline_single'>proposition</span> \\\"φa\\\" from the <span class='underline_single'>proposition</span> \\\"(x)φx\\\" shows how generality is present even in the <span class='underline_single'>sign</span> \\\"(x)φx\\\". <br>And of course the same holds of any sign for generality. [<em>Cf</em>. 5.1311 (2).]<br>\",\"date\":\"1914-11-24\",\"pt-number\":\" 5·04113\",\"pt-page\":\"52[3]\",\"tlp-number\":\"5·1311 (2)**\",\"cross-references\":\"24.11.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,38r[2] (1914--1124) (NB)\",\"ger\":\"Im Satze legen wir ein Urbild an die Wirklichkeit an. <br>In a proposition we place a prototype against reality. [<em>Cf</em>. 2.1512.]<br>\",\"eng\":\"\",\"date\":\"1914-11-24\",\"pt-number\":\" 2·1513\",\"pt-page\":\"14[3]\",\"tlp-number\":\"\",\"cross-references\":\"24.11.14 (1,4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,38r[3] (1914--1124) (NB)\",\"ger\":\"(Immer wieder ist es einem bei der Untersuchung der negativen Tatsachen als ob sie die Existenz des Satzzeichens voraussetzten.)<br>\",\"eng\":\"(When investigating negative facts one keeps on feeling as though they presuppose the existence of the propositional sign).<br>\",\"date\":\"1914-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,38r[4] et 39r[1] (1914--1124) (NB)\",\"ger\":\"<span class='underline_single'>Muß</span> das Zeichen des negativen Satzes mit dem Zeichen des positiven gebildet werden? (Ich glaube, ja!) <br>     Warum sollte man den negativen nicht durch eine negative Tatsache ausdrücken können?! Es ist wie wenn man statt des Meterstabes den Raum außerhalb des Meterstabes als  / Vergleichsobjekt nähme. <br>\",\"eng\":\"<span class='underline_single'>Must</span> the sign for a negative proposition be constructed by means of that for the positive proposition? (I believe so.) <br>     Why shouldn’t it be possible to express a negative proposition by means of a negative fact?! It is as if one were to take the space outside the yardstick as the object of comparison object instead of the yardstick. [<em>Cf</em>. 5.5151.]<br>\",\"date\":\"1914-11-24\",\"pt-number\":\" 5·3101\",\"pt-page\":\"50[2]\",\"tlp-number\":\"5·5151 (1)**\",\"cross-references\":\"24.11.14 (6,7)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,39r[2] (1914--1124) (NB)\",\"ger\":\"Wie widerspricht eigentlich der <span class='underline_single'>Satz</span> „~p” dem <span class='underline_single'>Satze</span> „p”? Die internen Relationen der beiden Zeichen müssen Widerspruch bedeuten. <br>\",\"eng\":\"How does the <span class='underline_single'>proposition</span> \\\"~p\\\" really contradict the <span class='underline_single'>proposition</span> \\\"p\\\"? The internal relations of the two signs must mean contradiction.<br>\",\"date\":\"1914-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,39r[3] (1914--1124) (NB)\",\"ger\":\"Freilich muß nach jedem negativen Satz gefragt werden können: <span class='underline_single'>Wie</span> verhält es sich <span class='underline_single'>nicht</span>; aber die Antwort hierauf ist ja nur wieder ein Satz. (Diese Bemerkung unvollständig.)<br>\",\"eng\":\"Of course, it must be possible to ask about any negative proposition: <span class='underline_single'>What</span> is it that is <span class='underline_single'>not</span> the case? But the answer to this is, of course, in its turn only a proposition. (This remark incomplete.)<br>\",\"date\":\"1914-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,39r[4] (1914--1125) (NB)\",\"ger\":\"Jener negative Tatbestand der als Zeichen dient kann doch wohl bestehen ohne einen Satz der ihn wiederum ausdrückt. <br>\",\"eng\":\"That negative matter of fact that functions as a sign can, of course, perfectly well obtain without a proposition that in turn expresses it.<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,39r[5] et 40r[1] (1914--1125) (NB)\",\"ger\":\" Immer wieder ist es bei der Untersuchung  / dieser Probleme als wären sie schon gelöst und diese Täuschung kommt daher daß die Probleme oft ganz unseren Blicken entschwinden. <br>\",\"eng\":\"Time and again when investigating these problems, it’s as if they had already been solved, and this illusion is due to the fact that the problems often completely vanish from our view.<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,40r[2] (1914--1125) (NB)\",\"ger\":\"Daß ~φa der Fall ist kann ich durch die Beobachtung von φx̂ & a allein ersehen. <br>\",\"eng\":\"I can see that ~φa is the case just by observing φx̂ & a.<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,40r[3] et 41r[1] (1914--1125) (NB)\",\"ger\":\"Die Frage ist hier: Ist die positive Tatsache primär die negative sekundär, oder sind sie gleichberechtigt. Und wenn so, wie ist es dann mit den Tatsachen p ⌵ q, p ⊃ q etc. sind diese nicht mit ~p gleichberechtigt? Aber <span class='underline_single'>m</span><span class='underline_single'>ü</span><span class='underline_single'>ssen</span> denn nicht <span class='underline_single'>alle Tatsachen</span> gleichberechtigt sein. Die Frage ist eigentlich die: / Gibt es Tatsachen außer den positiven. (Es ist nämlich schwer das was nicht der Fall ist nicht zu verwechseln mit dem was stattdessen der Fall <span class='underline_single'>ist</span>.) <br>\",\"eng\":\"The question here is: Is the positive fact primary, the negative secondary, or are they on an equal footing? And if so, what about the facts p ⌵ q, p ⊃ q etc.? Aren’t they on an equal footing with ~p? But then <span class='underline_single'>must</span> not <span class='underline_single'>all facts</span> be on an equal footing? The question is really this:  Are there facts other than the positive ones? (Because it is hard not to confuse what is not the case with what <em>is</em> the case in its place).<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,41r[2] (1914--1125) (NB)\",\"ger\":\" Es ist ja klar daß alle die ab-Funktionen nur so viele verschiedene Meßmethoden der Wirklichkeit sind. – Und gewiß haben die Meßmethoden durch p und ~p etwas Besonderes allen anderen voraus. – <br>\",\"eng\":\"It is clear that all the ab-functions are only so many different methods for measuring reality. - And certainly the methods of measuring by means of p and ~p have some special advantage over all others. - –<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,41r[3] et 42r[1] (1914--1125) (NB)\",\"ger\":\"Es ist der <span class='underline_single'>Dualismus</span>, positive & negative Tatsachen, der mich nicht zur Ruhe kommen läßt. So einen Dualismus kann es  / ja nicht geben. Aber wie ihm entgehen? <br>\",\"eng\":\"It is the <span class='underline_single'>dualism</span> of positive and negative facts that keeps me on my toes. There can be no such dualism. But how to get away from it?<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,42r[2] (1914--1125) (NB)\",\"ger\":\"Alles das würde sich von selbst lösen durch ein Verständnis des Wesens des Satzes! <br>\",\"eng\":\"All this would resolve itself if we understood the nature of the proposition.<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,42r[3] (1914--1126) (NB)\",\"ger\":\"Wenn von einem Dinge alle positiven Aussagen gemacht sind, sind doch nicht schon alle negativen auch gemacht! Und darauf kommt alles an! <br>\",\"eng\":\"If all the positive statements about a thing are made, aren’t all the negative ones already made too? And that is the whole point.<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,42r[4] (1914--1126) (NB)\",\"ger\":\"Der gefürchtete Dualismus von positiv & negativ besteht nicht denn (x).φx etc., etc., sind weder positiv noch negativ. <br>\",\"eng\":\"The dreaded dualism of positive and negative does not exist because (x).φx etc., etc., are neither positive nor negative.<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,42r[5] et 43r[1] (1914--1126) (NB)\",\"ger\":\"Wenn schon der positive Satz nicht im negativen vorkommen  / <span class='underline_single'>muß</span>, muß nicht in jedem Fall das Urbild des positiven Satzes im negativen vorkommen. <br>\",\"eng\":\"Indeed, if the positive proposition doesn’t <span class='underline_single'>have</span> to occur in the negative, mustn’t the prototype of the positive proposition occur in the negative one in any case?<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,43r[2] (1914--1126) (NB)\",\"ger\":\" Indem wir – und zwar in jeder möglichen Notation – zwischen ~aRb & ~bRa unterscheiden setzen wir in einer jeden eine bestimmte Zuordnung von Argument & Argumentstelle im negativen Satze voraus; die ja das Urbild des verneinten positiven Satzes ausmacht. <br>\",\"eng\":\"By distinguishing – as we do in any possible notation – between ~aRb & ~bRa we presuppose in any notation a particular correlation of argument and argument place in the negative proposition; the correlation amounts to the prototype of the negated positive proposition.<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,43r[3] (1914--1126) (NB)\",\"ger\":\"Ist also nicht jene Zuordnung der Bestandteile des Satzes mit welcher noch nichts <span class='underline_single'>gesagt</span> ist das eigentliche Bild im Satze? <br>\",\"eng\":\"Then isn’t the real picture in the proposition that correlation of the proposition’s constituents by means of which nothing is yet <span class='underline_single'>said</span>?<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,44r[1] (1914--1126) (NB)\",\"ger\":\"Ob nicht meine Unklarheit auf dem Unverständnis des Wesens der Relationen beruht? <br>\",\"eng\":\"Isn’t my unclarity due to a lack of understanding of the nature of relations?<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,44r[2] (1914--1126) (NB)\",\"ger\":\"Kann man denn ein <span class='underline_single'>Bild</span> verneinen? Nein. Und darin liegt der Unterschied zwischen Bild & Satz. Das Bild kann als Satz dienen. Dann tritt aber etwas zu ihm hinzu was macht daß es nun etwas <span class='underline_single'>sagt</span>. Kurz: Ich kann nur verneinen daß das Bild stimmt, aber das <span class='underline_single'>Bild</span> kann ich nicht verneinen. <br>\",\"eng\":\"Is it possible to negate a <span class='underline_single'>picture</span>? No. And therein lies the difference between picture and proposition. The picture can serve as a proposition. But then something is added to it which now makes it <span class='underline_single'>say</span> something. In short: I can only deny that the picture is right, but I cannot deny the <span class='underline_single'>picture</span>.<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,44r[3] et 45r[1] (1914--1126) (NB)\",\"ger\":\"Dadurch daß ich den Bestandteilen des Bildes Gegenstände zuordne, <span class='underline_single'>dadurch</span> stellt es nun einen Sachverhalt dar und stimmt nun entweder  / oder stimmt nicht. (Z.B. stellt ein Bild das Innere eines Zimmers dar etc.) <br>\",\"eng\":\"<span class='underline_single'>As a result of</span> my correlating the constituents of the picture with objects, it thus represents a state of affairs and is either right or wrong. (E.g. a picture represents the inside of a room, etc.)<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,45r[2] et 46r[1] (1914--1127) (NB)\",\"ger\":\"„~p” ist wahr wenn p falsch ist. Also, in dem wahren Satz „~p” ist der Teil ein falscher Satz. Wie kann ihn nun der Haken „~” mit der Wirklichkeit zum Stimmen bringen? Wir haben freilich schon gesagt daß es nicht der Haken „~” allein ist sondern alles was den verschiedenen Verneinungszeichen gemeinsam ist. Und was diesen allen gemeinsam ist muß offenbar aus der Bedeutung der Verneinung selbst hervorgehen. Und so muß sich also in dem Negationszeichen  / doch seine eigene Bedeutung spiegeln. <br>\",\"eng\":\"\\\"~p\\\" is true if p is false. Therefore, part of the proposition \\\"~p\\\", when true, is false. How then can the hook \\\"~\\\" make it agree with reality? Of course, we have already said that it is not the hook \\\"~\\\" alone but what all the different negation signs have in common. And what is common to all of them must obviously follow from the meaning of negation itself. And so the negation sign must surely mirror its own meaning. [<em>Cf </em>5.512.]<br>\",\"date\":\"1914-11-27\",\"pt-number\":\" 5·312\",\"pt-page\":\"61[6]\",\"tlp-number\":\"5·512**\",\"cross-references\":\"27.11.14\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,46r[2] (1914--1128) (NB)\",\"ger\":\"Die Negation vereinigt sich mit den ab-Funktionen des elementaren Satzes. Und die logischen Funktionen des Elementarsatzes müssen ebenso wie alle anderen ihre Bedeutung wiederspiegeln. <br>\",\"eng\":\"Negation unites with the ab-functions of the elementary proposition. And the logical functions of the elementary proposition must reflect their meaning just as much as all the others.<br>\",\"date\":\"1914-11-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,46r[3] (1914--1129) (NB)\",\"ger\":\"Die ab-Funktion bleibt nicht <span class='underline_single'>vor</span> dem Elementarsatz stehen sondern sie durchdringt ihn. <br>\",\"eng\":\"The ab-function does not stop short of the elementary proposition but penetrates it.<br>\",\"date\":\"1914-11-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,46r[4] (1914--1129) (NB)\",\"ger\":\"Was gezeigt werden <span class='underline_single'>kann</span> kann nicht gesagt werden. <br>\",\"eng\":\"What <span class='underline_single'>can</span> be shown cannot be said.<br>\",\"date\":\"1914-11-29\",\"pt-number\":\" 4·1031\",\"pt-page\":\"41[2]\",\"tlp-number\":\"4·1212*\",\"cross-references\":\"29.11.14 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,46r[5] et 47r[1] (1914--1129) (NB)\",\"ger\":\"Ich glaube man könnte das Gleichheitszeichen ganz aus  / unserer Notation entfernen und die Gleichheit immer nur durch die Gleichheit der Zeichen (u.u.) andeuten. Es wäre dann freilich φ(a,a) kein spezieller Fall von (x, y).φ(x, y) und φa keiner von (∃x,y).φx.φy. Dann aber könnte man statt φx.φy ⊃x, y x = y einfach schreiben ~(∃x, y).φx.φy. <br>\",\"eng\":\"I believe one could completely eliminate the identity sign from our notation and always indicate identity just by the identity of the signs (and vice versa). Of course, then φ(a,a) would not be a special case of (x, y).φ(x, y), and φa would not be a special case of (∃x,y).φx.φy. But then, instead of φx.φy ⊃x, y x = y, one could simply write ~(∃x, y).φx.φy. [<em>Cf. </em>5.53 and 5.533.]<br>\",\"date\":\"1914-11-29\",\"pt-number\":\" 5·32\",\"pt-page\":\"18[10]\",\"tlp-number\":\"5·53\",\"cross-references\":\"29.11.14 (3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,47r[2] (1914--1129) (NB)\",\"ger\":\"Durch diese Notation verlören auch der Scheinsatz (x)x = a oder ähnliche allen Schein von Berechtigung. <br>\",\"eng\":\"Also, this notation would remove any semblance of legitimacy from a pseudo-proposition such as (x)x = a. <br>\",\"date\":\"1914-11-29\",\"pt-number\":\" 5·334\",\"pt-page\":\"19[2]\",\"tlp-number\":\"5·534\",\"cross-references\":\"29.11.14 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,47r[3] et 48r[1] (1914--1130) (NB)\",\"ger\":\"Der Satz sagt gleichsam: Dieses Bild kann auf diese Weise keinen (oder kann einen) Sachverhalt  / darstellen. <br>\",\"eng\":\"The proposition says as it were: This picture cannot (or can) represent a state of things in this way. <br>\",\"date\":\"1914-11-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,48r[2] (1914--1201) (NB)\",\"ger\":\"Es kommt eben darauf an das festzusetzen was den Satz vom bloßen Bild unterscheidet. <br>\",\"eng\":\"The issue here is just what distinguishes a proposition from a mere picture.<br>\",\"date\":\"1914-12-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,48r[3] (1914--1204) (NB)\",\"ger\":\"Sehen wir uns z.B. die Gleichung ~ ~p = p an: diese bestimmt mit anderen das Zeichen für p da sie besagt daß es etwas sei was „p” & „~~p” gemein haben. Dadurch erhält jenes Zeichen Eigenschaften die wiederspiegeln daß die doppelte Verneinung eine Bejahung ist. <br>\",\"eng\":\"For example, let's look at the identity ~ ~p = p: this, together with others, determines the sign for p since it says that there is something that \\\"p\\\" and \\\"~~p\\\" have in common. As a result, that sign acquires properties which reflect the fact that double negation is an affirmation.<br>\",\"date\":\"1914-12-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,48r[4] (1914--1205) (NB)\",\"ger\":\"\",\"eng\":\"How does \\\"p⌵~p\\\" say nothing?<br>\",\"date\":\"1914-12-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,48r[5] et 49r[1] et 50r[1] et 51r[1] et 52r[1] et 53r[1] (1914--1206) (NB)\",\"ger\":\"Die Newtonsche Mechanik bringt die Weltbeschreibung / auf eine einheitliche Form. <br>Denken wir uns eine weiße Fläche auf der unregelmäßige schwarze Flecken wären. Wir sagen nun: Was immer für ein Bild hierdurch entsteht immer werde ich seiner Beschreibung beliebig nahe kommen können indem ich die Fläche mit einem entsprechend feinen quadratischen Netzwerk bedecke und nun von jedem Quadrat sage daß es weiß oder schwarz ist. Ich werde auf diese Weise die Beschreibung dieser Fläche auf eine einheitliche Form gebracht haben. Diese Form ist beliebig denn ich hätte mit dem  / gleichen Erfolge ein dreieckiges oder sechseckiges Netz verwenden können. Es kann sein daß die Beschreibung mit Hilfe eines dreieckigen Netzes einfacher geworden wäre d.h. daß wir die Fläche mit einem gröberen Dreiecksnetz genauer beschreiben könnten als mit einem feineren quadratischen (oder umgekehrt) etc. Den verschiedenen Netzen entsprechen verschiedene Systeme der Weltbeschreibung. <br>Die Mechanik bestimmt die Form der Weltbeschreibung indem sie sagt: Alle Sätze der Weltbeschreibung  / müssen aus einer Anzahl gegebener Sätze – den mechanischen Axiomen – auf eine gegebene Art & Weise erhalten werden können. Hierdurch liefert sie die Bausteine zum Bau des wissenschaftlichen Gebäudes und sagt: Welches Gebäude Du immer aufführen willst jedes mußt Du irgendwie mit diesen & nur diesen Bausteinen zusammenbringen. <br>     Wie man mit dem Zahlensystem jede beliebige Anzahl muß hinschreiben können so muß man mit dem System der Mechanik jeden beliebigen Satz der Physik / hinschreiben können. <br>Und hier sehen wir nun die gegenseitige Stellung von Logik & Mechanik. <br>(Man könnte das Netz auch aus verschiedenartigen Figuren bestehen lassen.) <br>Daß sich ein Bild wie das vorhin erwähnte durch ein Netz von gegebener Form beschreiben läßt, sagt über das Bild nichts aus (denn dies gilt für jedes solche Bild). Das aber charakterisiert das Bild daß es sich durch ein bestimmtes Netz, von <span class='underline_single'>bestimmter</span> Feinheit, beschreiben läßt. So auch sagt es nichts über die Welt aus daß sie sich durch die Newtonsche Mechanik  / beschreiben läßt; aber wohl daß sie sich so durch jene beschreiben läßt wie dies eben der Fall ist. (Dies habe ich schon seit <span class='underline_single'>langer</span> Zeit gefühlt.) – Auch das sagt etwas von der Welt daß sie sich durch die eine Mechanik einfacher beschreiben läßt als durch die andere. <br>Die Mechanik ist <span class='underline_single'>ein</span> Versuch alle Sätze welche wir zur Weltbeschreibung benötigen nach <span class='underline_single'>einem</span> Plan zu konstruieren. (Die unsichtbaren Massen Hertz's.) <br>Die unsichtbaren Massen Hertz's sind <span class='underline_single'>eingestandenermaßen</span> Scheingegenstände.<br>\",\"eng\":\"Newtonian mechanics introduces uniformity into world description. <br>Imagine a white surface with irregular black spots. We then say: whatever kind of picture develops from these, I could always get as near as I like to its description, by covering the surface with a sufficiently fine square mesh and going on to say of every square that it is white or black. In this way I will have managed to introduce uniformity into my description of the surface. The form is arbitrary, because I could have just as well applied a triangular or hexagonal net. It may be that the description using a triangular net would have been simpler, that is, we might be able to describe the surface more accurately with a coarser triangular mesh than with a finer square mesh or vice versa, etc. Different systems of describing the world correspond to different nets. <br>Mechanics specifies a form of world description by saying: all propositions used in a description of the world must be obtainable in a given way from a number of given propositions - the mechanical axioms. In this way it supplies the building blocks for constructing the edifice of science, and says: Whatever building you want to erect, it must somehow be assembled from these, and only these, building blocks.<br>Just as I must be able to write down any arbitrary number by means of the number system, so I must be able to write down any arbitrary proposition of physics by means of the system of mechanics. [<em>See</em>. 6.341.]<br>And now we can see the position in which logic and mechanics stand to each other.<br>(One might also arrange for the net to consist of different kinds of mesh.) <br>That a picture of the above-mentioned kind can be described by a net of a given form tells us nothing<em> </em>about the picture (for this holds of every such picture.) But what does characterize a picture is that it can be described by a specific net of a <span class='underline_single'>specific</span><em> </em>fineness. Likewise, that the world can be described by Newtonian mechanics tells us nothing about the world; but what does tell us something about it is that the world can be described in precisely this way. (I have felt this for a <span class='underline_single'>long</span> time.) – We are also told something about the world by the fact that it can be described more simply by means of one system of mechanics than by means of another. [<em>Cf</em>. 6.342.]<br>Mechanics is <span class='underline_single'>one</span> attempt to construct according to a <span class='underline_single'>single</span> plan all propositions we need for a description of the world.  Hertz’s invisible masses.) [<em>Cf</em>. 6.343.]<br>Hertz’s invisible masses are admittedly pseudo-objects.<br>\",\"date\":\"1914-12-06\",\"pt-number\":\"6·341\",\"pt-page\":\"73[2]\",\"tlp-number\":\"6·343\",\"cross-references\":\"6.12.14 (6)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,53r[2] et 54r[1] (1914--1207) (NB)\",\"ger\":\"Die logischen Konstanten des Satzes sind die Bedingungen seiner  / Wahrheit. <br>\",\"eng\":\"A proposition’s logical constants are its truth conditions.<br>\",\"date\":\"1914-12-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,54r[2] (1914--1208) (NB)\",\"ger\":\"Hinter unseren Gedanken, wahren & falschen, liegt immer wieder ein dunkler Grund, den wir erst später in's Licht ziehen, & als einen Gedanken aussprechen können. <br>\",\"eng\":\"Behind our thoughts, true and false, there is always a dark background, which we can only later bring into the light and express as a thought.<br>\",\"date\":\"1914-12-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,54r[3] (1914--1212) (NB)\",\"ger\":\"p . taut. = p d.h. taut. sagt nichts! <br>\",\"eng\":\"p . Taut = p,  i.e. Taut. says nothing. [<em>Cf. </em>4.465.]<br>\",\"date\":\"1914-12-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,54r[4] (1914--1213) (NB)\",\"ger\":\"Erschöpft es das Wesen der Negation daß sie eine Operation ist die sich selbst aufhebt? Dann müßte χ die Negation bedeuten wenn χχp = p vorausgesetzt daß χp ≠ p. <br>\",\"eng\":\"Does it exhaust the essence of negation that it is an operation that cancels itself? Then χ would have to mean negation if χχp = p, assuming that χp ≠ p.<br>\",\"date\":\"1914-12-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,54r[5] et 55r[1] (1914--1213) (NB)\",\"ger\":\"Das ist einmal sicher daß nach diesen beiden Gleichungen χ nicht mehr die Bejahung ausdrücken  / kann! <br>     Und zeigt nicht die Fähigkeit des Verschwindens dieser Operationen daß sie logische sind? <br>\",\"eng\":\"To begin with, it’s certain that according to these two equations χ can no longer express affirmation.<br>     And doesn’t these operations’ ability to vanish show that they are logical?<br>\",\"date\":\"1914-12-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,55r[2] (1914--1214? --1215?) (NB)\",\"ger\":\"Es ist offenbar: wir können als Schriftzeichen der ab-Funktionen einführen welche wir wollen das eigentliche Zeichen wird sich automatisch bilden. Und welche Eigenschaften werden sich hierbei von selbst herausbilden? <br>\",\"eng\":\"It’s obvious that we can introduce whatever we like as characters for the ab-functions, and that the real sign will provide itself automatically. And what properties will evolve on their own while doing so?<br>\",\"date\":\"1914-12-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,55r[3] (1914--1215) (NB)\",\"ger\":\"Das logische Gerüst um das Bild (des Satzes) herum bestimmt den logischen Raum. <br>The logical scaffolding enclosing a picture (a proposition) specifies logical space. [<em>Cf</em>. 3.42.]<br>\",\"eng\":\"\",\"date\":\"1914-12-15\",\"pt-number\":\"3·2141\",\"pt-page\":\"43[7]\",\"tlp-number\":\"3·42 (3a)*\",\"cross-references\":\"15.12.14 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,55r[4] (1914--1216) (NB)\",\"ger\":\"Der Satz muß den ganzen logischen Raum durchgreifen. <br>\",\"eng\":\"Propositions must probe the whole of logical space. [<em>Cf</em>. 3.42.]<br>\",\"date\":\"1914-12-16\",\"pt-number\":\"3·2142\",\"pt-page\":\"43[8]\",\"tlp-number\":\"3·42 (3b)*\",\"cross-references\":\"16.12.14*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,56r[1] (1914--1217) (NB)\",\"ger\":\"Die ab-Funktionszeichen sind nicht materiell sonst könnten sie nicht verschwinden. <br>\",\"eng\":\"The ab-function signs are not material, otherwise they could not disappear. [<em>Cf. </em>5.44 and 5.441.]<br>\",\"date\":\"1914-12-17\",\"pt-number\":\"5·23\",\"pt-page\":\"38[6]\",\"tlp-number\":\"5·44 (1)*\",\"cross-references\":\"17.12.14**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,56r[2] (1914--1218) (NB)\",\"ger\":\"Am eigentlichen Satzzeichen muß geradesoviel zu unterscheiden sein, als am Sachverhalt zu unterscheiden ist. Darin besteht ihre Identität.         <br>\",\"eng\":\"In a proper propositional sign there must be exactly as many distinguishable features as can be distinguished in the state of things. That is what their identity consists in.    [<em>Cf</em>. 4.04.]<br>\",\"date\":\"1914-12-18\",\"pt-number\":\"4·073\",\"pt-page\":\"48[6]\",\"tlp-number\":\"4·04 (1)\",\"cross-references\":\"18.12.14**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,56r[3] (1914--1220) (NB)\",\"ger\":\"In „p” ist nicht mehr & nicht weniger zu erkennen als in „~p”. <br>\",\"eng\":\"In \\\"p\\\" neither more nor less can be recognised than in \\\"~p\\\".<br>\",\"date\":\"1914-12-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,56r[4] (1914--1220) (NB)\",\"ger\":\"Wie kann ein Sachverhalt mit „p” übereinstimmen und mit „~p” nicht übereinstimmen. <br>\",\"eng\":\"How can a state of things agree with \\\"p\\\" and not agree with \\\"~p\\\"?<br>\",\"date\":\"1914-12-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,56r[5] et 57r[1] (1914--1220) (NB)\",\"ger\":\" Man könnte auch so fragen: Wenn ich zum Zweck der Verständigung mit einem Anderen  / <span class='underline_single'>Die Sprache</span> erfinden wollte was für Regeln müßte ich mit ihm über unseren Ausdruck vereinbaren? <br>\",\"eng\":\"One could also ask: If I wanted to invent <span class='underline_single'>Language</span> for the purpose of communicating with another, what kind of rules would I have to agree on with him about our mode of expression?<br>\",\"date\":\"1914-12-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,57r[2] (1914--1223) (NB)\",\"ger\":\"Charakteristisches Beispiel zu meiner Theorie der Bedeutung der physikalischen Naturbeschreibung: die beiden Wärmetheorien; einmal die Wärme als ein Stoff ein andermal als eine Bewegung aufgefaßt. <br>\",\"eng\":\"Characteristic example of my theory of the significance of description in physics: The two theories of heat; heat conceived of as a substance at one time, at another time as a movement.<br>\",\"date\":\"1914-12-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,57r[3] et 58r[1] (1914--1225) (NB)\",\"ger\":\"Der Satz sagt etwas, ist identisch mit: Er hat ein bestimmtes Verhältnis zur Wirklichkeit, w<span class='underline_single'>as immer diese sein mag</span>. Und, wenn <span class='underline_single'>sie</span> gegeben ist und jenes Verhältnis so ist der Sinn des Satzes bekannt. „p ⌵ q” hat  / ein anderes Verhältnis zur Wirklichkeit als „p.q”, etc. <br>\",\"eng\":\"The proposition says something, is identical with: It has a specific relation to reality, <span class='underline_single'>whatever </span><span class='underline_single'>this</span><span class='underline_single'> may be</span>. And, if this reality is given and so is that relation, then the sense of the proposition is known. \\\"p ⌵ q\\\" has a different relation to reality than \\\"p.q\\\", etc.<br>\",\"date\":\"1914-12-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,58r[2] (1914--1225) (NB)\",\"ger\":\" Die Möglichkeit des Satzes basiert natürlich auf dem Prinzip der <span class='underline_double'>Vertretung</span> von Gegenständen durch Zeichen. <br>\",\"eng\":\"The possibility of propositions is, of course, based on the principle that signs function as <span class='underline_double'>representatives</span> for objects. [<em>Cf</em>. 4.0312 (1).]<br>\",\"date\":\"1914-12-25\",\"pt-number\":\"4·0102\",\"pt-page\":\"41[5]\",\"tlp-number\":\"4·0312 (1)*\",\"cross-references\":\"25.12.14 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,58r[3] (1914--1225) (NB)\",\"ger\":\"Im Satz haben wir also die Vertretung von etwas durch <span class='underline_single'>etwas anderes</span>. <br>Aber auch das <span class='underline_single'>gemeinsame</span> Bindemittel. <br>\",\"eng\":\"So in a proposition, something represents <span class='underline_single'>something else</span>. <br>But there is also the <span class='underline_single'>shared</span> cement.<br>\",\"date\":\"1914-12-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,58r[4] (1914--1225) (NB)\",\"ger\":\"Mein Grundgedanke ist daß die logischen Konstanten nicht vertreten. Daß sich die <span class='underline_single'>Logik</span> der Tatsache nicht vertreten <span class='underline_single'>läßt</span>. <br>\",\"eng\":\"\",\"date\":\"1914-12-25\",\"pt-number\":\"4·0103\",\"pt-page\":\"41[6]\",\"tlp-number\":\"4·0312 (2)\",\"cross-references\":\"25.12.14 (5)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,58r[5] et 59r[1] (1914--1229) (NB)\",\"ger\":\"Im Satze vertritt den Gegenstand  / der Name. <br>\",\"eng\":\"In a proposition, a name stands in for an object. [<em>See</em> 3.22.]<br>\",\"date\":\"1914-12-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,59r[2] (1915--0111) (NB)\",\"ger\":\"Ein Meterstab sagt nicht daß ein zu messendes Objekt einen Meter lang sei. <br>Auch dann nicht wenn wir wissen daß er zum Messen <span class='underline_single'>eines</span> || dieses <span class='underline_single'>bestimmten</span> Objektes dienen soll. <br>\",\"eng\":\"A yardstick does not say that an object being measured is one yard long. <br>Not even if we know that it is supposed to serve for measuring this <span class='underline_single'>particular</span> object.<br>\",\"date\":\"1915-01-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,59r[3] (1915--0111) (NB)\",\"ger\":\"Könnte man nicht fragen?: was muß zu jenem Meterstab dazukommen damit er etwas über die Länge des Objektes <span class='underline_single'>aussagt</span>? <br>\",\"eng\":\"Couldn’t one ask: what must be added to that yardstick so that it <span class='underline_single'>asserts</span> something about the length of the object?<br>\",\"date\":\"1915-01-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,59r[4] (1915--0111) (NB)\",\"ger\":\"(Der Meterstab ohne diesen Zusatz wäre die „Annahme”.) <br>\",\"eng\":\"(The yardstick without this addition would be the \\\"assumption\\\").<br>\",\"date\":\"1915-01-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,59r[5] et 60r[1] (1915--0114) (NB)\",\"ger\":\"Das Satzzeichen „p ⌵ q” stimmt  / wenn p der Fall ist, wenn q der Fall ist und wenn beide der Fall sind anderenfalls stimmt es nicht: dies scheint unendlich einfach zu sein; und <span class='underline_single'>so</span> einfach wird die Lösung sein. <br>\",\"eng\":\"The propositional sign \\\"p ⌵ q\\\" is right if p is the case, if q is the case, and if both are the case, otherwise it is wrong. This seems to be immensely simple; and the solution will be <span class='underline_single'>as</span> simple as this.<br>\",\"date\":\"1915-01-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,60r[2] (1915--0116) (NB)\",\"ger\":\"Der Satz ist einem hypothetischen Sachverhalt zugeordnet. <br>\",\"eng\":\"A proposition is correlated with a hypothetical state of things.<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,60r[3] (1915--0116) (NB)\",\"ger\":\"Dieser Sachverhalt ist durch seine Beschreibung gegeben. <br>\",\"eng\":\"This state of things is given by its description.<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,60r[4] (1915--0116) (NB)\",\"ger\":\"Der Satz ist die Beschreibung eines Sachverhalts. <br>\",\"eng\":\"A proposition is a description of a state of things.  [<em>See</em> 4.023 (3).]<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"4·0232\",\"pt-page\":\"47[6]\",\"tlp-number\":\"4·023 (3)\",\"cross-references\":\"15.11.14(6)**  16.1.15 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,60r[5] et 61r[1] (1915--0116) (NB)\",\"ger\":\"Wie die Beschreibung eines Gegenstandes nach seinen externen Eigenschaften, so beschreibt der  / Satz die Tatsache nach ihren internen Eigenschaften. <br>\",\"eng\":\"Just as a description describes an object in accordance with its external properties, so a proposition describes a fact in accordance with its internal properties.  [<em>See</em> 4.023 (4).]<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"4·02321\",\"pt-page\":\"47[7]\",\"tlp-number\":\"4·023 (4)*\",\"cross-references\":\"16.1.15 (4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,61r[2] (1915--0116) (NB)\",\"ger\":\"Die Beschreibung stimmt, wenn der Gegenstand die besagten Eigenschaften hat: Der Satz stimmt, wenn der Sachverhalt die, durch den Satz aufgegebenen, internen Eigenschaften hat. <br>\",\"eng\":\"A description is right if the object has the asserted property. A proposition is right if the state of things has the internal properties assigned by the proposition.<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,61r[3] (1915--0117) (NB)\",\"ger\":\"Der Sachverhalt p.q <span class='underline_single'>fällt unter</span> den Satz „p ⌵ q”. <br>\",\"eng\":\"The state of things p.q <span class='underline_single'>comes within</span> the domain of the proposition \\\"p ⌵ q\\\".<br>\",\"date\":\"1915-01-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,61r[4] et 62r[1] (1915--0117) (NB)\",\"ger\":\"Zu dem Netz-Gleichnis der Physik: Obwohl die Flecke geometrische Figuren sind so kann uns doch selbstverständlich die Geometrie gar nichts über ihre Form & Lage sagen. Das Netz aber ist <span class='underline_single'>rein</span> geometrisch alle  / seine Eigenschaften können a priori angegeben werden. <br>\",\"eng\":\"On the network analogy for physics: Although the spots are geometrical figures, geometry can obviously tell us nothing about their form and position. But the network is <span class='underline_single'>purely</span> geometrical; all its properties can be specified <em>a priori</em>. [<em>See</em> 6.35 (1).]<br>\",\"date\":\"1915-01-17\",\"pt-number\":\"6·35\",\"pt-page\":\"74[1]\",\"tlp-number\":\"6·35 (1)\",\"cross-references\":\"17.1.15 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,62r[2] (1915--0118) (NB)\",\"ger\":\"Der Vergleich zwischen Satz & Beschreibung ist rein logisch und <span class='underline_single'>muß</span> daher weiter geführt werden.<br>\",\"eng\":\"The comparison between proposition and description is purely logical and for that reason <span class='underline_single'>must</span> be pursued.<br>\",\"date\":\"1915-01-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,62r[3] (1915--0120) (NB)\",\"ger\":\"Wieso ist <span class='underline_single'>Alle</span> ein logischer Begriff? <br>\",\"eng\":\"How is it that <span class='underline_single'>all</span> is a logical concept?<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,62r[4] (1915--0120) (NB)\",\"ger\":\"Wieso ist <span class='underline_single'>Alle</span> ein Begriff der Form?? <br>\",\"eng\":\"How is it that <span class='underline_single'>all</span> is a concept of form??<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,62r[5] (1915--0120) (NB)\",\"ger\":\"Wie kommt es daß <span class='underline_single'>Alle</span> in jedem Satz vorkommen kann? <br>Denn dies ist das Charakteristikum des Formbegriffs! <br>\",\"eng\":\"How does it come about that <span class='underline_single'>all</span> can occur in any proposition? <br>For that is characteristic of the concept of form.<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,62r[6] et 63r[1] (1915--0120) (NB)\",\"ger\":\"<span class='underline_single'>Alle</span> <span class='underline_double'>scheint</span> dem Inhalt des Satzes näher zu stehen als der Form. / Alle: Dinge, Alle: Funktionen, Alle: Beziehungen: Es ist als ob Alle ein Binde<span class='underline_single'>glied</span> zwischen dem Begriff des Dinges, der Funktion etc. und dem einzelnen Ding der einzelnen Funktion sei. <br>\",\"eng\":\"<span class='underline_single'>All</span> <span class='underline_double'>appears</span> to be closer to the proposition’s content than to its form. All: things, All: functions, All: relations: It is as if All were a connecting <span class='underline_single'>link</span> between the concept of thing, function, etc., and the individual thing, the individual functions.<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,63r[2] (1915--0120) (NB)\",\"ger\":\"Die Allgemeinheit ist wesentlich mit der Elementar-<span class='underline_double'>Form</span> verbunden. <br>\",\"eng\":\"Generality is essentially connected with the elementary <span class='underline_double'>form</span>.<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,63r[3] (1915--0120) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,63r[4] (1915--0121) (NB)\",\"ger\":\"Der Übergang von der allgemeinen Betrachtung der Satzform: <span class='underline_single'>Unendlich schwierig, fabelhaft</span>. <br>\",\"eng\":\"Moving on from general consideration of propositional form: immensely difficult, fabulous.<br>\",\"date\":\"1915-01-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,63r[5] et 64r[1] (1915--0122) (NB)\",\"ger\":\"Meine <span class='underline_single'>ganze</span> Aufgabe besteht darin, das Wesen des Satzes zu erklären. / Das heißt, das Wesen aller Tatsachen anzugeben, deren Bild der Satz <span class='underline_single'>ist</span>. <br>\",\"eng\":\"My <span class='underline_single'>whole</span> task consists in explaining the nature of the proposition. That is to say, in giving the nature of all facts, whose picture the proposition <span class='underline_single'>is</span>.<br>\",\"date\":\"1915-01-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[2] (1915--0122) (NB)\",\"ger\":\"Das Wesen alles Seins angeben. <br>\",\"eng\":\"In giving the nature of all being.<br>\",\"date\":\"1915-01-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[3] (1915--0122) (NB)\",\"ger\":\"(Und hier bedeutet Sein nicht existieren – dann wäre es unsinnig.) <br>\",\"eng\":\"(And here „being“ does not mean existing—if so, it would be nonsensical.)<br>\",\"date\":\"1915-01-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[4] (1915--0123) (NB)\",\"ger\":\"Die Verneinung ist eine Operation. <br>\",\"eng\":\"\",\"date\":\"1915-01-23\",\"pt-number\":\"5·0012\",\"pt-page\":\"63[6]\",\"tlp-number\":\"5·2341 (2)**\",\"cross-references\":\"23.1.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[5] (1915--0123) (NB)\",\"ger\":\"\",\"eng\":\"An operation refers to an operation.<br>\",\"date\":\"1915-01-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[6] (1915--0123) (NB)\",\"ger\":\"Das Wort ist eine Sonde, manches reicht tief; manches nur wenig tief. <br>\",\"eng\":\"Words are probes: some reach deep, some only a little way.<br>\",\"date\":\"1915-01-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,64r[7] et 65r[1] (1915--0123) (NB)\",\"ger\":\"Eine Operation sagt natürlich nichts aus, nur ihr Resultat, und dies hängt von ihrem  / Gegenstand ab. <br>Die logischen Scheinfunktionen <span class='underline_single'>sind</span> Operationen. <br>\",\"eng\":\"Indeed, an operation says nothing, only its result does; and this depends on its object. [<em>Cf</em>. 5.25 (2).]<br>\",\"date\":\"1915-01-23\",\"pt-number\":\"5·0021\",\"pt-page\":\"64[1]\",\"tlp-number\":\"5·25 (2)** \",\"cross-references\":\"23.1.15 (4)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,65r[2] (1915--0124) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-24\",\"pt-number\":\" 5·0022\",\"pt-page\":\"64[2]\",\"tlp-number\":\"   5·254*\",\"cross-references\":\"24.1.15 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,65r[3] (1915--0124) (NB)\",\"ger\":\"Der negative Satz schließt die Wirklichkeit aus. <br>Negative propositions exclude reality.<br>\",\"eng\":\"\",\"date\":\"1915-01-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,65r[4] (1915--0124) (NB)\",\"ger\":\"Wie kann die allumfassende, weltspiegelnde Logik so spezielle Haken & Manipulationen gebrauchen?! Nur indem sich alle diese zusammen zu einem <span class='underline_single'>unendlich</span> feinen Netzwerk, zu dem großen Spiegel verknüpfen! <br>\",\"eng\":\"How can an all-embracing, world-reflecting logic use such contrived hooks and manipulations? Only by knitting them all together in an <span class='underline_single'>infinitely</span> fine network, the great mirror. [<em>See </em>5.511.]<br>\",\"date\":\"1915-01-24\",\"pt-number\":\" 5·311\",\"pt-page\":\"61[5]\",\"tlp-number\":\"5·511\",\"cross-references\":\"24.1.15 (4)*  (6.3.15+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,65r[5] (1915--0125) (NB)\",\"ger\":\"Man kann auch sagen; ~p ist falsch, wenn p wahr ist. <br>\",\"eng\":\"One can also say: if p is true, ~p is false.<br>\",\"date\":\"1915-01-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,65r[6] et 66r[1] (1915--0129) (NB)\",\"ger\":\"/ Die Sprache ist artikuliert. <br>\",\"eng\":\"\",\"date\":\"1915-01-29\",\"pt-number\":\" 3·1603\",\"pt-page\":\"38[5]\",\"tlp-number\":\"3·141 (2)\",\"cross-references\":\"29.1.15+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,66r[2] (1915--0207) (NB)\",\"ger\":\"Die musikalischen Themen sind in gewissem Sinne Sätze. Die Kenntnis des Wesens der Logik wird deshalb zur Kenntnis des Wesens der Musik führen. <br>\",\"eng\":\"Musical themes are in a certain sense propositions. So knowledge of the nature of logic will lead to knowledge of the nature of music. [<em>Cf. </em>3.141 (1).]<br>\",\"date\":\"1915-02-07\",\"pt-number\":\" 3·1602\",\"pt-page\":\"38[4]\",\"tlp-number\":\"3·141 (1)**\",\"cross-references\":\"7.2.15+  5.4.15   11.4.15\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,66r[3] (1915--0214) (NB)\",\"ger\":\"Gäbe es mathematische Gegenstände – logische Konstante – so wäre der Satz „ich esse 5 Pflaumen” ein Satz der Mathematik. Und er ist auch kein Satz der angewandten Mathematik. <br>\",\"eng\":\"If there were mathematical objects – logical constants – the proposition \\\"I am eating five plums\\\" would be a proposition of mathematics. And it is not even a proposition of applied mathematics.<br>\",\"date\":\"1915-02-14\",\"pt-number\":\" 4·0231\",\"pt-page\":\"47[5]\",\"tlp-number\":\"4·023 (1-2)*\",\"cross-references\":\"30.10.14 (3)  31.10.14 (3)*  (14.2.15 (2)+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,66r[4] (1915--0214) (NB)\",\"ger\":\"Der Satz muß seine Bedeutung <span class='underline_single'>vollständig</span> beschreiben.    <br>A proposition must describe its meaning <span class='underline_single'>completely</span><em>. </em>[<em>Cf. </em>4.023.]     <br>\",\"eng\":\"\",\"date\":\"1915-02-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,66r[5] et 67r[1] (1915--0218)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-02-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,67r[2] (1915--0304) (NB)\",\"ger\":\"Die Melodie ist eine Art Tautologie, sie ist in sich selbst abgeschlossen; sie befriedigt sich selbst. <br>\",\"eng\":\"A tune is a kind of tautology. It is self-contained; it satisfies itself.<br>\",\"date\":\"1915-03-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,67r[3] (1915--0305) (NB)\",\"ger\":\"Die Menschheit hat immer geahnt, daß es ein Gebiet von Fragen geben muß worin die Antworten – a priori – symmetrisch, und zu einem abgeschlossenen regelmäßigen Gebilde vereint – liegen. <br>\",\"eng\":\"People have always had an inkling that there must be a realm in which the answers to questions combine symmetrically - <em>a priori - </em>into a self-contained regular formation. [<em>See </em>5.4541 (2-3).]<br>\",\"date\":\"1915-03-05\",\"pt-number\":\" 5·30225\",\"pt-page\":\"76[3]\",\"tlp-number\":\"5·4541 (2-3)* \",\"cross-references\":\"5.3.15 (1)  19.9.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,67r[4] (1915--0305) (NB)\",\"ger\":\"(Je älter ein Wort ist desto tiefer reicht es.) <br>\",\"eng\":\"(The older a word, the deeper it reaches.)<br>\",\"date\":\"1915-03-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,67r[5] et 68r[1] (1915--0306) (NB)\",\"ger\":\"Die Probleme der Verneinung, der Disjunktion, von Wahr & Falsch – sind nur Spiegelbilder des einen, großen Problems, in  / den verschieden gestellten großen und kleinen Spiegeln der Philosophie. <br>\",\"eng\":\"The problems of negation, of disjunction, of true and false, are only reflections of the one great problem in the variously placed great and small mirrors of philosophy. [<em>Cf</em>. 5.511.]<br>\",\"date\":\"1915-03-06\",\"pt-number\":\" 5·311\",\"pt-page\":\"61[5]\",\"tlp-number\":\"5·511\",\"cross-references\":\"24.1.15 (4)*  (6.3.15+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,68r[2] (1915--0307) (NB)\",\"ger\":\"Wie ~ξ, ~ξ . ⌵ . ~ξ etc. dieselbe Funktion ist so ist auch ~η ⌵ η, η⊃η etc. dieselbe – nämlich die tautologische – Funktion. Wie die anderen so kann auch sie – und vielleicht mit Vorteil – untersucht werden. <br>\",\"eng\":\"Just as ~ξ, ~ξ . ⌵ . ~ξ etc. are the same function, so too are ~η ⌵ η, η⊃η<em>, </em>etc. the same – that is, the tautological – function. Like the others, it can be investigated – and perhaps advantageously.<br>\",\"date\":\"1915-03-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,68r[3] (1915--0308) (NB)\",\"ger\":\"Meine Schwierigkeit ist nur eine – enorme – Schwierigkeit des Ausdrucks. <br>\",\"eng\":\"My difficulty is only an – enormous – difficulty of expression.<br>\",\"date\":\"1915-03-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,68r[4] (1915--0318) (NB)\",\"ger\":\"Es ist klar daß die genaueste Untersuchung des Satzzeichens nicht ergeben kann was es aussagt – wohl aber was es aussagen <span class='underline_single'>kann</span>. <br>\",\"eng\":\"lt is clear that the closest examination of the propositional sign cannot yield what it asserts – but what it can yield is what it is <span class='underline_single'>capable</span><em> </em>of asserting.<br>\",\"date\":\"1915-03-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,69r[1] (1915--0327) (NB)\",\"ger\":\"Das Bild kann eine Beschreibung ersetzen. <br>A picture can replace a description.<br>\",\"eng\":\"\",\"date\":\"1915-03-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,69r[2] (1915--0329) (NB)\",\"ger\":\"Das Kausalitätsgesetz ist kein Gesetz sondern die Form <span class='underline_single'>eines</span> Gesetzes. <br>\",\"eng\":\"The law of causality is not a law but the form of <span class='underline_single'>a</span> law. [<em>See</em> 6.32.]<br>\",\"date\":\"1915-03-29\",\"pt-number\":\" 6·3\",\"pt-page\":\"71[5]\",\"tlp-number\":\"6·32\",\"cross-references\":\"29.3.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,69r[3] (1915--0329) (NB)\",\"ger\":\"„Kausalitätsgesetz” das ist ein Gattungsname. Und wie es in der Mechanik – sagen wir – Minimumgesetze gibt – etwa der kleinsten Wirkung – so gibt es in der Physik <span class='underline_double'>ein</span> Kausalitätsgesetz, ein Gesetz von der Kausalitätsform. <br>\",\"eng\":\"“Law of causality”  is a generic name. And just as in mechanics there are, for instance, minimum-laws, such as that of least action, so too in physics there is <span class='underline_double'>a</span><em> </em>law of causality, a law of the form of causality. [<em>Cf.</em> 6.321.]<br>\",\"date\":\"1915-03-29\",\"pt-number\":\" 6·31\",\"pt-page\":\"71[6]\",\"tlp-number\":\"6·321**\",\"cross-references\":\"29.3.15 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,69r[4] et 70r[1] (1915--0329) (NB)\",\"ger\":\"Wie die Menschen ja auch eine Ahnung davon gehabt haben daß es <span class='underline_single'>ein</span> „Gesetz  / der kleinsten Wirkung” geben müsse ehe sie genau wußten wie es lautete. <br>     (Hier wie so oft stellt sich das Aprioristische als etwas rein Logisches heraus.) <br>\",\"eng\":\"Just as people also had a notion that there must be <span class='underline_single'>a</span><em> </em>“law of least action” before they knew exactly how it was to be spelled out. <br>(Here, as so often, what is <em>a priori </em>turns out to be something purely logical.) [<em>Cf.</em> 6.3211.]<br>\",\"date\":\"1915-03-29\",\"pt-number\":\" 6·311\",\"pt-page\":\"71[7]\",\"tlp-number\":\"6·3211*\",\"cross-references\":\"29.3.15 (3,4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,70r[2] (1915--0403) (NB)\",\"ger\":\"Der Satz ist ein Maß der Welt. <br>\",\"eng\":\"The proposition is a measure of the world.<br>\",\"date\":\"1915-04-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,70r[3] (1915--0403) (NB)\",\"ger\":\"Dies ist das Bild eines Vorgangs und stimmt nicht. Wie kann es dann noch immer das Bild jenes Vorgangs sein? <br>\",\"eng\":\"This is the picture of a process and is wrong. How, then, can it still be a picture of that process?<br>\",\"date\":\"1915-04-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,70r[4] et 71r[1] (1915--0403) (NB)\",\"ger\":\"Daß „a” a vertreten <span class='underline_single'>kann</span> & „b” b vertreten <span class='underline_single'>kann</span> wenn „a” in der Relation „R” zu „b” steht, darin eben besteht  / jene gesuchte <span class='underline_double'>potentielle</span> interne – Relation. <br>\",\"eng\":\"That \\\"a\\\" <span class='underline_single'>can</span> represent a and \\\"b\\\" <span class='underline_single'>can</span> represent b if \\\"a\\\" stands in relation \\\"R\\\" to \\\"b\\\": this is what that <span class='underline_double'>potential</span> internal relation we are seeking consists in.<br>\",\"date\":\"1915-04-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,71r[2] (1915--0405) (NB)\",\"ger\":\"Der Satz ist kein Wörtergemisch. <br>\",\"eng\":\"\",\"date\":\"1915-04-05\",\"pt-number\":\" 3·1602\",\"pt-page\":\"38[4]\",\"tlp-number\":\"3·141 (1)**\",\"cross-references\":\"7.2.15+  5.4.15   11.4.15\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,71r[3] (1915--0410) (NB)\",\"ger\":\"Auch die Melodie ist kein Tongemisch, wie alle Unmusikalischen glauben. <br>\",\"eng\":\"Nor is a tune a mixture of notes, as all unmusical people think. [<em>Cf.</em> 3.141.]<br>\",\"date\":\"1915-04-10\",\"pt-number\":\" 3·1602\",\"pt-page\":\"38[4]\",\"tlp-number\":\"3·141 (1)**\",\"cross-references\":\"7.2.15+  5.4.15   11.4.15\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,71r[4] (1915--0412) (NB)\",\"ger\":\"Ich <span class='underline_single'>kann</span> von dem Wesen des Satzes <span class='underline_single'>nicht</span> auf die einzelnen logischen Operationen kommen!!! <br>\",\"eng\":\"I <span class='underline_single'>cannot</span> get from the nature of the proposition to the individual logical operations!!!<br>\",\"date\":\"1915-04-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,71r[5] et 72r[1] (1915--0415) (NB)\",\"ger\":\"Ich kann eben nicht herausbringen inwiefern der Satz das <span class='underline_single'>Bild</span> des Sachverhaltes ist! <br>      Beinahe bin ich bereit  / alle Bemühungen aufzugeben. ‒ ‒ <br>\",\"eng\":\"I just can't bring out how a proposition is a <span class='underline_single'>picture</span> of a state of things! <br>      I am almost willing to give up all my efforts. ‒ ‒<br>\",\"date\":\"1915-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,72r[2] (1915--0416) (NB)\",\"ger\":\"Die Beschreibung ist auch sozusagen eine Operation deren Basis ihre Hilfsmittel und deren Resultat der beschriebene Gegenstand ist. <br>\",\"eng\":\"A description is also, as it were, an operation that takes its means of description as its basis and its described object as its result. <br>\",\"date\":\"1915-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,72r[3] (1915--0416) (NB)\",\"ger\":\"Das Zeichen „Nicht” ist die Klasse aller verneinender Zeichen. <br>\",\"eng\":\"The sign \\\"not\\\" is the class of all negating signs.<br>\",\"date\":\"1915-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,72r[4] (1915--0417) (NB)\",\"ger\":\"\",\"eng\":\"Das subjektive Universum. <br>The subjective universe.<br>\",\"date\":\"1915-04-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,72r[5] et 73r[1] (1915--0417) (NB)\",\"ger\":\"Statt die logischen Operationen im Satz an dessen Teilsätzen zu vollziehen, können wir diesen auch <span class='underline_single'>Marken</span> zuordnen und mit ihnen  / operieren. Dann ist <span class='underline_single'>einem</span> Satzbild ein mit ihm in kompliziertester Weise zusammenhängendes Markensternbild zugeordnet. <br>\",\"eng\":\"Instead of performing a proposition’s logical operations on its component propositions, we can also correlate <span class='underline_single'>marks</span> with them and operate on them.  Then a single sentence picture is correlated with a constellation of marks connected with it in a most complicated way.<br>\",\"date\":\"1915-04-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,73r[2] (1915--0418) (NB)\",\"ger\":\"Für die Operation der Verneinung ist der Übergang von p auf ~p <span class='underline_single'>nicht</span> charakteristisch. (Der <span class='underline_single'>beste Beweis</span>: sie führt auch von ~p zu p.) -----------------<br>\",\"eng\":\"The transition from p to ~p is <span class='underline_single'>not</span> what is characteristic of the operation of negation. (The <span class='underline_single'>best proof</span> of this: negation also leads from ~p to p.) -----------------<br>\",\"date\":\"1915-04-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,73r[3] (1915--0419) (NB)\",\"ger\":\"Was sich in der Sprache spiegelt, kann ich nicht mit ihr ausdrücken. <br>\",\"eng\":\"Whatever is mirrored in language I cannot use language to express. [<em>Cf</em>. 4.121 (2).]<br>\",\"date\":\"1915-04-19\",\"pt-number\":\" 4·1021\",\"pt-page\":\"17[8]\",\"tlp-number\":\"4·121 (2)\",\"cross-references\":\"19.4.15**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,73r[4] et 74r[1] (1915--0423) (NB)\",\"ger\":\"Wir glauben nicht a priori an ein Erhaltungsgesetz  / sondern wir <span class='underline_single'>wissen</span> a priori die Möglichkeit seiner logischen Form. <br>\",\"eng\":\"We do not believe <em>a priori </em>in a law of conservation, rather we <span class='underline_single'>know</span><em> a priori </em>the possibility of its logical form. [<em>See</em> 6.33.]<br>\",\"date\":\"1915-04-23\",\"pt-number\":\"6·32\",\"pt-page\":\"71[8]\",\"tlp-number\":\"6·33*\",\"cross-references\":\"23.4.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,74r[2] (1915--0423) (NB)\",\"ger\":\"Alle jene a priori gewissen Sätze, wie der Satz vom Grunde von der Kontinuität in der Natur etc. etc., alle diese sind aprioristische Einsichten bezüglich der möglichen Formgebung der Sätze der Wissenschaft. <br>\",\"eng\":\"All such <em>a priori</em> certain propositions, including the principle of sufficient reason, the laws of continuity in nature etc. etc. - all these are <em>a priori </em>insights about possible formulations of scientific propositions. [<em>Cf.</em> 6.34.]<br>\",\"date\":\"1915-04-23\",\"pt-number\":\"6·33\",\"pt-page\":\"71[9]\",\"tlp-number\":\"6·34*\",\"cross-references\":\"23.4.15 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,74r[3] et 75r[1] (1915--0423) (NB)\",\"ger\":\"„Ockhams Devise” ist <span class='underline_single'>natürlich</span> keine willkürliche oder durch ihren praktischen Erfolg gerechtfertigte Regel. Sie besagt daß unnötige Zeichen-Einheiten nichts be / deuten. <br>\",\"eng\":\"<span class='underline_single'>Of course</span>, Occam's razor is no arbitrary rule, nor one that is justified by its practical success. Its point is that unnecessary<em> </em>sign-units mean nothing. [<em>See </em>5.47321 (1).]<br>\",\"date\":\"1915-04-23\",\"pt-number\":\"5·30633\",\"pt-page\":\"60[4]\",\"tlp-number\":\"5·47321 (1)\",\"cross-references\":\"23.4.15 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,75r[2] (1915--0423) (NB)\",\"ger\":\"Es ist klar daß Zeichen, die denselben Zweck erfüllen logisch identisch sind. Das rein Logische <span class='underline_single'>ist</span> eben das was <span class='underline_single'>alle</span> diese leisten können. <br>\",\"eng\":\"It is clear that signs that serve the same<em> </em>purpose are logically identical. What <span class='underline_single'>all</span> of these are able to accomplish just <span class='underline_single'>is</span> strictly logical. [<em>Cf. </em>5.47321 (2).]<br>\",\"date\":\"1915-04-23\",\"pt-number\":\" 5·30634\",\"pt-page\":\"60[5]\",\"tlp-number\":\"5·47321 (2)\",\"cross-references\":\"23.4.15 (4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,75r[3] (1915--0424) (NB)\",\"ger\":\"In der Logik (Mathematik) sind Prozeß & Resultat gleichwertig. (Darum keine Überraschungen.) <br>\",\"eng\":\"In logic (mathematics) process and result are equivalent. (Hence, no surprises.) [<em>See </em>6.1261.]<br>\",\"date\":\"1915-04-24\",\"pt-number\":\" 6·11343\",\"pt-page\":\"70[5]\",\"tlp-number\":\"6·1261                   \",\"cross-references\":\"24.4.15*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,75r[4] et 76r[1] (1915--0425) (NB)\",\"ger\":\"Da die Sprache in <span class='underline_single'>internen</span> Relationen zur Welt steht, so bestimmt <span class='underline_single'>sie</span> und diese Relationen die logische Möglichkeit der Tatsachen. Haben wir ein bedeutungsvolles Zeichen so muß es in einer bestimmten  / internen Relation zu einem Gebilde stehen. Zeichen & Relation bestimmen eindeutig die logische Form des Bezeichneten. <br>\",\"eng\":\"Since language stands in <span class='underline_single'>internal</span> relations to the world, <span class='underline_single'>it</span> and these relations decide the logical possibility of facts. If we have a meaningful sign, it must stand in a particular internal relation to a structure. Sign and relation unambiguously decide the logical form of that which it signifies.<br>\",\"date\":\"1915-04-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,76r[2] (1915--0425) (NB)\",\"ger\":\"Aber kann nicht irgendein sogenanntes Ding mit irgend einem solchen auf ein und dieselbe Weise zugeordnet werden? <br>     Es ist z.B. ganz klar daß wir die Wörter der Sprache als miteinander logisch äquivalente Einheiten – empfinden und – gebrauchen. <br>\",\"eng\":\"But can't any so-called thing be correlated in one and the same way with any other such thing? <br>     For example, it is quite clear that we use—and experience—the words of language as logically equivalent units.<br>\",\"date\":\"1915-04-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,76r[3] (1915--0426) (NB)\",\"ger\":\"Es scheint immer als ob es etwas gäbe was man <span class='underline_single'>als Ding betrachten könne, andererseits</span> wirkliche einfache Dinge. <br>\",\"eng\":\"It always seems as if there were on the one hand, something that one <span class='underline_single'>could regard as a thing</span>, and <span class='underline_single'>on the other</span><span class='underline_single'> hand</span>, real simple things.<br>\",\"date\":\"1915-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,77r[1] (1915--0426) (NB)\",\"ger\":\"Es ist klar: Weder ein Bleistiftstrich noch ein Dampfschiff sind einfach. Besteht zwischen diesen beiden wirklich eine logische Äquivalenz? <br>\",\"eng\":\"It is clear that neither a pencil stroke nor a steamship is simple. Is there really a logical equivalence between these two?<br>\",\"date\":\"1915-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,77r[2] (1915--0426) (NB)\",\"ger\":\"„Gesetze” wie der Satz vom Grunde etc. handeln vom Netz, nicht von dem was das Netz beschreibt. <br>\",\"eng\":\"“Laws” like the principle of sufficient reason, etc. are about the net and not about what the net describes.<br>\",\"date\":\"1915-04-26\",\"pt-number\":\" 6·36\",\"pt-page\":\"74[2]\",\"tlp-number\":\"6·35 (2)\",\"cross-references\":\"25.4.15 (6)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,77r[3] (1915--0426) (NB)\",\"ger\":\"Durch die Allgemeinheit müssen die gebräuchlichen Sätze ihr einfaches Gepräge kriegen. <br>\",\"eng\":\"Ordinary propositions must get their imprint of simplicity by means of generality.<br>\",\"date\":\"1915-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,77r[4] (1915--0426) (NB)\",\"ger\":\"Wir müssen erkennen, <span class='underline_single'>wie</span> die Sprache für sich selbst sorgt. <br>\",\"eng\":\"\",\"date\":\"1915-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,77r[5] et 78r[1] (1915--0426) (NB)\",\"ger\":\"Der Satz welcher vom „Komplex” handelt steht in interner Beziehung zum Satze welcher  / von dessen Bestandteil handelt. <br>\",\"eng\":\"A proposition about a \\\"complex\\\" stands in a internal relation to a proposition about its constituents. [<em>See</em> 3.24 (1).]<br>\",\"date\":\"1915-04-26\",\"pt-number\":\" 3·20104\",\"pt-page\":\"41[7]\",\"tlp-number\":\"3·24 (1)\",\"cross-references\":\"26.4.15 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,78r[2] (1915--0427) (NB)\",\"ger\":\"Die Willensfreiheit besteht darin daß zukünftige Ereignisse jetzt nicht <span class='underline_double'>gewußt</span> werden <span class='underline_single'>können</span>. Nur dann könnten wir sie wissen, wenn die Kausalität eine <span class='underline_double'>innere</span> Notwendigkeit wäre – wie etwa die des logischen Schlusses. – Der Zusammenhang von Wissen & Gewußtem ist <span class='underline_single'>der</span> der logischen Notwendigkeit. <br>\",\"eng\":\"Freedom of the will consists in the <span class='underline_single'>impossibility</span> of our <span class='underline_double'>knowing</span> future events now. We could know them only if causality were an <span class='underline_double'>inner</span> necessity like, say, that of logical inference. - The connection between knowing and the known is that of logical necessity.<br>\",\"date\":\"1915-04-27\",\"pt-number\":\"5·0444\",\"pt-page\":\"41[8]\",\"tlp-number\":\"5·1362 (1)\",\"cross-references\":\"27.4.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,78r[3] (1915--0427) (NB)\",\"ger\":\"Ich darf mich nicht um die Sprache kümmern brauchen. <br>\",\"eng\":\"I cannot need to worry about language.<br>\",\"date\":\"1915-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,78r[4] et 79r[1] (1915--0427? --0428?) (NB)\",\"ger\":\"Das Nicht-Stimmen ist ähnlich wie die Nicht-Identität. /<br>\",\"eng\":\"Non-truth is like non-identity.<br>\",\"date\":\"1915-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,79r[2] (1915--0428) (NB)\",\"ger\":\"Die Operation des Verneinens besteht nicht etwa im Vorsetzen von ~ sondern in der Klasse aller verneinender Operationen. <br>\",\"eng\":\"The operation of negation does not consist in, say, prefixing a ~, but in the class of all negating operations.<br>\",\"date\":\"1915-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,79r[3] (1915--0428) (NB)\",\"ger\":\"Was für Eigenschaften hat aber dann eigentlich diese ideale verneinende Operation? <br>\",\"eng\":\"But in that case, what really are the properties of this ideal negating operation?<br>\",\"date\":\"1915-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,79r[4] (1915--0428) (NB)\",\"ger\":\"Wie zeigt es sich wenn sich zwei Aussagen miteinander vertragen? <br>Wenn man in p ⌵ q statt q p setzt so wird die Aussage zu p! <br>\",\"eng\":\"If two statements are compatible, how is that made clear? <br>If one puts p instead of q in p ⌵ q, the statement turns into p.<br>\",\"date\":\"1915-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,79r[5] et 80r[1] (1915--0428) (NB)\",\"ger\":\"Gehört das Zeichen p.q auch  / unter diejenigen welche p bejahen? – Ist p eins von den Zeichen für p ⌵ q? <br>\",\"eng\":\"Does the sign p.q also belong among those which affirm p? - Is p one of the signs for p ⌵ q?<br>\",\"date\":\"1915-04-28\",\"pt-number\":\" 5·04103\",\"pt-page\":\"61[2]\",\"tlp-number\":\"5·124\",\"cross-references\":\"28.4.15 (5)+   30.4.15 (2)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,80r[2] (1915--0428? --0429?) (NB)\",\"ger\":\"Kann man so sagen?: Alle Zeichen welche p <span class='underline_single'>nicht</span> bejahen, <span class='underline_single'>nicht</span> von p bejaht werden und p <span class='underline_single'>nicht</span> als Tautologie oder Kontradiktion enthalten alle diese Zeichen verneinen p.          <br>\",\"eng\":\"Can one say the following?: All signs that do <span class='underline_single'>not</span> affirm p, are <span class='underline_single'>not</span> affirmed by p, and do not contain p as a tautology or contradiction does—all these signs negate p.     <br>\",\"date\":\"1915-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,80r[3] (1915--0429) (NB)\",\"ger\":\"Das heißt: alle Zeichen die von p abhängig sind & die weder p bejahen noch von p bejaht werden.<br>\",\"eng\":\"That is to say: all signs that depend on p and that neither affirm p nor are affirmed by p.  <br>\",\"date\":\"1915-04-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,80r[4] et 81r[1] (1915--0430) (NB)\",\"ger\":\"Das Vorkommen einer <span class='underline_single'>Operation</span> kann <span class='underline_single'>natürlich</span> allein  / nichts besagen! <br>\",\"eng\":\"The occurrence of an <span class='underline_single'>operation</span> cannot, of course, have any significance in isolation.<br>\",\"date\":\"1915-04-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,81r[2] (1915--0430) (NB)\",\"ger\":\"p wird von allen Sätzen bejaht aus denen es folgt. <br>     Jeder Satz der p widerspricht verneint p. <br>\",\"eng\":\"p is affirmed by all propositions from which it follows. [<em>See</em><em> </em>5.124.]<br>\",\"date\":\"1915-04-30\",\"pt-number\":\"5·04105\",\"pt-page\":\"61[4]\",\"tlp-number\":\"5·1241 (3)\",\"cross-references\":\"30.4.15 (3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,81r[3] (1915--0501) (NB)\",\"ger\":\"Daß p.~p eine Kontradiktion ist zeigt daß ~p p widerspricht. <br>\",\"eng\":\"That p.~p is a contradiction shows that ~p contradicts p. [<em>Cf</em><em>.</em><em> </em>6.1201.]<br>\",\"date\":\"1915-05-01\",\"pt-number\":\" 6·1201\",\"pt-page\":\"116[7]\",\"tlp-number\":\"6·1201 \",\"cross-references\":\"1.5.15 (1)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,81r[4] (1915--0501) (NB)\",\"ger\":\"Skeptizismus ist <span class='underline_single'>nicht</span> unwiderleglich sondern <span class='underline_single'>offenbar unsinnig</span> wenn er bezweifeln will wo nicht gefragt werden kann. <br>\",\"eng\":\"Scepticism is <span class='underline_single'>not</span> irrefutable, but <span class='underline_single'>obviously nonsensical</span>, if it tries to raise doubts where no questions can be asked. [<em>See</em> 6.51 (1).]<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"6·51\",\"pt-page\":\"50[1]\",\"tlp-number\":\"\",\"cross-references\":\"1.5.15 (2,3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,81r[5] et 82r[1] (1915--0501) (NB)\",\"ger\":\"Denn Zweifel kann nur bestehen wo eine Frage besteht; eine Frage kann nur bestehen wo eine Antwort besteht, und diese  / nur wo etwas <span class='underline_single'>gesagt</span> werden <span class='underline_single'>kann</span>. <br>\",\"eng\":\"For doubt can only exist where there is a question, a question can only exist where there is an answer, and an answer only where something <span class='underline_single'>can</span> be <span class='underline_single'>said</span>. [<em>See</em> 6.51 (2).]<br>\",\"date\":\"1915-05-01\",\"pt-number\":\" 6·51\",\"pt-page\":\"50[1]\",\"tlp-number\":\"6·51\",\"cross-references\":\"1.5.15 (2,3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,82r[2] (1915--0501) (NB)\",\"ger\":\"Alle Theorien die besagen: „Es <span class='underline_single'>muß</span> sich doch so verhalten, sonst könnten wir ja nicht philosophieren” oder „sonst könnten wir doch nicht leben” etc. etc., müssen natürlich verschwinden. <br>\",\"eng\":\"All theories that say: \\\"This is how it <span class='underline_single'>must</span> be, otherwise we could not philosophize\\\" or \\\"otherwise we surely could not live\\\" etc. etc., must of course disappear.<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,82r[3] (1915--0501) (NB)\",\"ger\":\"Meine Methode ist es nicht das Harte vom Weichen zu, sondern die Härte des Weichen zu sehen. <br>\",\"eng\":\"My method is not to separate the hard from the soft, but to see the hardness of the soft.<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,82r[4] (1915--0501) (NB)\",\"ger\":\"Es ist eine Hauptkunst des Philosophen sich nicht mit Fragen zu beschäftigen, die ihn nichts angehen. <br>\",\"eng\":\"It is one of the chief skills of  the philosopher not to occupy himself with questions that do not concern him.<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,82r[5] et 83r[1] (1915--0501) (NB)\",\"ger\":\"Russells Methode in seiner „Scientific Method / in Philosophy” ist geradezu ein Rückschritt von der Methode der Physik.<br>\",\"eng\":\"Russell's method in his \\\"Scientific method in philosophy\\\" is simply a step back from the method of physics.<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,83r[2] (1915--0502) (NB)\",\"ger\":\"Die Klasse aller Zeichen die sowohl p als auch q bejahen ist das Zeichen für p.q. Die Klasse aller Zeichen die entweder p oder q bejahen ist der Satz „p ⌵ q”. <br>\",\"eng\":\"The class of all signs that affirm both p and q is the class of signs for p.q. The class of all signs that affirm either p or q is the proposition \\\"p ⌵ q\\\". [<em>Cf </em>5.513 (1).]<br>\",\"date\":\"1915-05-02\",\"pt-number\":\"5·3131\",\"pt-page\":\"61[9]\",\"tlp-number\":\"5·513 (1)\",\"cross-references\":\"2.5.15+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,83r[3] (1915--0503) (NB)\",\"ger\":\"Man kann nicht sagen daß sowohl Tautologien als Kontradiktionen <span class='underline_single'>nichts</span> sagen in dem Sinne daß sie etwa beide Nullpunkte in der Skala der Sätze wären. Denn zum Mindesten sind sie <span class='underline_single'>entgegenge</span>setzte Pole. <br>\",\"eng\":\"One cannot say that both tautology and contradiction say <span class='underline_single'>nothing</span> in the sense that they are both, say, zero points on a scale of propositions. For at least they are <span class='underline_single'>opposite</span> poles.<br>\",\"date\":\"1915-05-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,83r[4] et 84r[1] (1915--0503) (NB)\",\"ger\":\"Kann man sagen: Zwei Sätze sind einander entgegengesetzt wenn  / es kein Zeichen gibt das sie beide bejaht – was eigentlich heißt: wenn sie kein gemeinsames Glied haben. <br>\",\"eng\":\"Can one say: two propositions are opposites of one another if there is no sign that affirms them both - which really means: if they have no common term? [<em>Cf.</em><em> </em>5.1241 (2).]<br>\",\"date\":\"1915-05-03\",\"pt-number\":\"5·04104\",\"pt-page\":\"61[3]\",\"tlp-number\":\"5·1241 (2)\",\"cross-references\":\"3.5.15 (2)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,84r[2] (1915--0503) (NB)\",\"ger\":\" Man stellt sich also die Sätze als Klassen von Zeichen vor – die Sätze „p” und „q” haben das Glied „p.q” gemeinsam – und zwei Sätze sind einander entgegengesetzt wenn sie ganz außerhalb einander liegen. <br>\",\"eng\":\"So one imagines propositions as classes of signs - the propositions \\\"p\\\" and \\\"q\\\" have the term \\\"p.q\\\" in common - and two propositions are opposites if they lie entirely outside one another. [<em>Cf.</em><em> </em>5.513 (2).]<br>\",\"date\":\"1915-05-03\",\"pt-number\":\"5·3132\",\"pt-page\":\"62[1]\",\"tlp-number\":\"5·513 (2)\",\"cross-references\":\"3.5.15 (3)+   6.6.15 (13)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,84r[3] (1915--0504) (NB)\",\"ger\":\"Das sogenannte Gesetz der Induktion kann jedenfalls kein logisches Gesetz sein, denn es ist offenbar ein Satz. <br>\",\"eng\":\"At any rate, what has been styled the law of induction cannot be a law of logic, for it is obviously a proposition. [<em>See</em> 6.31.]<br>\",\"date\":\"1915-05-04\",\"pt-number\":\" 6·12112\",\"pt-page\":\"71[4]\",\"tlp-number\":\"6·31\",\"cross-references\":\"4.5.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,84r[4] et 85r[1] (1915--0504) (NB)\",\"ger\":\"Die Klasse aller Sätze von der  / Form F(x) ist der Satz (x) φx. <br>\",\"eng\":\"The class of all propositions of the form F(x) is the proposition (x) φx.<br>\",\"date\":\"1915-05-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,85r[2] (1915--0505) (NB)\",\"ger\":\"Gibt es die allgemeine Satzform? <br>Ja, wenn darunter die eine „logische Konstante” verstanden ist! <br>\",\"eng\":\"Does the general propositional form exist? <br>Yes, if by that is understood the sole \\\"logical constant\\\".  [<em>Cf.</em><em> </em>5.47 (4-5).]<br>\",\"date\":\"1915-05-05\",\"pt-number\":\" 5·305\",\"pt-page\":\"47[1]\",\"tlp-number\":\"5·47 (5)\",\"cross-references\":\"(5.5.15+)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,85r[3] (1915--0505) (NB)  \",\"ger\":\"Immer wieder scheint die Frage einen Sinn zu haben: „Gibt es einfache Dinge?” Und doch muß diese Frage unsinnig sein! – <br>\",\"eng\":\"It keeps on looking as if the question \\\"Are there simple things?\\\" makes sense. Yet surely this question must be nonsense! --<br>\",\"date\":\"1915-05-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,85r[4] (1915--0506) (NB)\",\"ger\":\"Man würde sich vergeblich bemühen den Scheinsatz „gibt es einfache Dinge?” in Zeichen der Begriffsschrift auszudrücken. [<em>Cf.</em> 5.534]<br>\",\"eng\":\"One would try in vain to express the pseudo-proposition \\\"Are there simple things?\\\" in conceptual notation.<br>\",\"date\":\"1915-05-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,86r[1] (1915--0506) (NB)\",\"ger\":\"Es ist doch klar daß ich einen Begriff vom Ding, von der einfachen Zuordnung vor mir habe wenn ich über diese Sache denke. <br>     Wie stelle ich mir aber das Einfache vor? Da kann ich immer nur sagen „‚x’ hat Bedeutung”. – Hier ist ein großes Rätsel! <br>\",\"eng\":\"Yet it’s clear that when I think about this issue I have a concept of a thing, of a simple correlation.<br>But how am I imagining a simple? There all I can say is always \\\"'x' has meaning\\\".— Here is a huge riddle!<br>\",\"date\":\"1915-05-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,86r[2] (1915--0506) (NB)\",\"ger\":\"Als Beispiele des Einfachen denke ich immer an Punkte des Gesichtsbildes. (Wie mir als typisch „zusammengesetzte Gegenstände” immer Teile des Gesichtsbildes vorschweben.) <br>\",\"eng\":\"I always think of points in the visual field as examples of simples. (Just as parts of the visual field always come to mind as typical “composite objects”).<br>\",\"date\":\"1915-05-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,86r[3] (1915--0507) (NB)\",\"ger\":\"Ist räumliche Zusammengesetztheit auch logische Zusammengesetztheit? Es scheint doch, ja! <br>\",\"eng\":\"Is spatial complexity also logical complexity? It surely seems to be.<br>\",\"date\":\"1915-05-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,87r[1] (1915--0507) (NB)\",\"ger\":\"Aus was besteht aber z.B. ein gleichförmig gefärbter Teil meines Gesichtsbildes? Aus minimum sensibile? Wie sollte man denn den Ort eines jeden solchen bestimmen? <br>\",\"eng\":\"But what is a uniformly coloured part of my visual field, for example, made up of? Of minima sensibilia? How would one specify the location of each of them?<br>\",\"date\":\"1915-05-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,87r[2] (1915--0507) (NB)\",\"ger\":\"Auch wenn die von uns gebrauchten Sätze alle Verallgemeinerungen enthalten, so müssen in ihnen doch die Urbilder der Bestandteile ihrer Spezialfälle vorkommen. Also bleibt die Frage bestehen wie wir zu jenen kommen. <br>\",\"eng\":\"Even if the sentences which we ordinarily use all contain generalizations, the prototypes of the constituents of their special cases must surely occur in them. So the question remains how we arrive at those.<br>\",\"date\":\"1915-05-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,87r[3] et 88r[1] (1915--0508) (NB)\",\"ger\":\"Daß es keine Zeichen eines bestimmten Urbilds gibt zeigt nicht daß jenes Urbild nicht vorhanden ist. Die zeichensprachliche Abbildung geschieht  / nicht so daß ein <span class='underline_single'>Zeichen</span> eines Urbilds einen <span class='underline_single'>Gegenstand</span> desselben Urbilds vertritt. Das Zeichen und die interne Relation zum Bezeichneten bestimmen das Urbild dieses; wie Grundkoordinaten und Ordinaten die Punkte einer Figur bestimmen. <br>\",\"eng\":\"The fact that there is no sign for a particular prototype does not show that this prototype does not exist. Depiction by means of sign language does not happen in such a way that a <span class='underline_single'>sign</span> of a prototype stands for an <span class='underline_single'>object</span> of that prototype. The sign and the internal relation to what it signifies prescribe the prototype of the latter; as basic co-ordinates together with the axes prescribe the points of a graph.<br>\",\"date\":\"1915-05-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,88r[2] (1915--0509) (NB)\",\"ger\":\"Eine Frage: Können wir ohne einfache Gegenstände in der <span class='underline_double'>Logik</span> auskommen? <br>\",\"eng\":\"A question: can we get by without simple objects in <span class='underline_double'>logic</span>?<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,88r[3] et 89r[1] (1915--0509) (NB)\",\"ger\":\"<span class='underline_single'>Offenbar</span> sind Sätze möglich welche keine einfachen Zeichen enthalten d.h. keine Zeichen welche unmittelbar eine Bedeutung haben. Und diese sind wirklich <span class='underline_single'>Sätze</span> die einen Sinn haben und die Definitionen ihrer Bestandteile  / brauchen auch nicht bei ihnen zu stehen. <br>\",\"eng\":\"<span class='underline_single'>Obviously</span> propositions are possible which contain no simple signs, i.e. no signs which have an immediate meaning. And these really are <span class='underline_single'>propositions</span> that make sense, and the definitions of their constituents do not need to accompany them.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,89r[2] (1915--0509) (NB)\",\"ger\":\"Es ist doch klar daß Bestandteile unserer Sätze durch Definitionen zerlegt werden können, und müssen, wenn wir uns der eigentlichen Struktur des Satzes nähern wollen. <span class='underline_single'>Jedenfalls gibt es also einen </span><span class='underline_single'>Prozeß</span><span class='underline_single'> der Analyse.</span> Und kann nun nicht gefragt werden ob dieser Prozeß einmal zu einem Ende kommt? Und wenn, ja: Was wird das Ende sein?? <br>\",\"eng\":\"But it is clear that constituents of our propositions can be broken down by means of definitions, and must be, if we want to approach the real structure of the proposition. <span class='underline_single'>However</span><span class='underline_single'> that may be</span><span class='underline_single'>, there is a process of analysis.</span> And can it not now be asked whether this process will come to an end? And if so: What will the end be?<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,89r[3] et 90r[1] (1915--0509) (NB)\",\"ger\":\"Wenn es wahr ist daß jedes definierte Zeichen via seine Definitionen bezeichnet dann muß wohl die Kette der Definitionen  / einmal ein Ende haben. <br>\",\"eng\":\"If it is true that every defined sign signifies <em>via</em> its definitions then presumably the chain of definitions must end at some point. [<em>Cf.</em> 3.261.]<br>\",\"date\":\"1915-05-09\",\"pt-number\":\" 3·20211\",\"pt-page\":\"51[3]\",\"tlp-number\":\"3·261*\",\"cross-references\":\"9.5.15 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,90r[2] (1915--0509) (NB)\",\"ger\":\"Der zerlegte Satz redet von mehr als der unzerlegte. <br>\",\"eng\":\"The analysed proposition mentions more than the unanalysed.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,90r[3] (1915--0509) (NB)\",\"ger\":\"Zerlegung macht den Satz komplizierter als er war aber kann & darf ihn nicht komplizierter machen als seine Bedeutung von Haus aus war. <br>\",\"eng\":\"Analysis makes a proposition more complicated than it was, but cannot and should not make it more complicated than its meaning actually was.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,90r[4] (1915--0509) (NB)\",\"ger\":\" Wenn der Satz gerade so komplex ist wie seine Bedeutung, dann ist er <span class='underline_single'>ganz</span> zerlegt. <br>\",\"eng\":\"When a proposition is just as complex as its meaning, then it is <span class='underline_single'>completely</span> analysed.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,90r[5] (1915--0509) (NB)\",\"ger\":\"Die Bedeutung unserer Sätze aber ist nicht unendlich kompliziert. <br>\",\"eng\":\"But the meaning of our propositions is not infinitely complicated.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,91r[1] (1915--0509) (NB)\",\"ger\":\" Der Satz ist das Bild der Tatsachen. Ich kann von einer Tatsache verschiedene Bilder entwerfen. (Dazu dienen mir die logischen Operationen.) Aber das für die <span class='underline_single'>Tatsache</span> Charakteristische in diesen Bildern wird in allen dasselbe sein und von mir nicht abhängen. <br>\",\"eng\":\"A proposition is a picture of the facts. I can outline different pictures of a fact. (The logical operations serve this purpose.) But what is characteristic of the <span class='underline_single'>fact</span> will be the same in all of these pictures and will not depend on me.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,91r[2] (1915--0509) (NB)\",\"ger\":\" Mit der Zeichenklasse des Satzes „p” ist bereits die Klasse „~p” etc. etc. gegeben. Wie es auch sein muß. <br>\",\"eng\":\"With the class of signs for a proposition \\\"p\\\" the class \\\"~p\\\" etc. etc. is already given. As it must be.<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,91r[3] et 92r[1] (1915--0509) (NB)\",\"ger\":\"<span class='underline_single'>Aber</span>, setzt das nicht schon voraus daß uns die Klasse aller Sätze gegeben ist? Und wie kommen wir zu <span class='underline_single'>ihr</span>? /  <br>\",\"eng\":\"<span class='underline_single'>But</span> doesn’t this already presuppose that the class of all propositions is given to us? And how do we arrive at <span class='underline_single'>it</span>?<br>\",\"date\":\"1915-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,92r[2] (1915--0511) (NB)\",\"ger\":\"Ist die logische Summe zweier Tautologien eine Tautologie im ersten Sinne? Gibt es wirklich die Dualität: Tautologie – Kontradiktion? <br>\",\"eng\":\"Is the logical sum of two tautologies a tautology in the first sense? Is there really such a thing as the duality: tautology - contradiction?<br>\",\"date\":\"1915-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,92r[3] (1915--0511) (NB)\",\"ger\":\"Unser Einfaches <span class='underline_double'>ist</span>: das Einfachste was wir kennen. – Das Einfachste zu dem unsere Analyse vordringen kann – es braucht nur als Urbild, als Variable in unseren Sätzen zu erscheinen – <span class='underline_single'>dies</span> ist das Einfache welches wir meinen und suchen. <br>\",\"eng\":\"Our simple <span class='underline_double'>is</span>: the simplest we know. - The simplest our analysis can reach - it need only appear as a prototype, as a variable in our propositions - <span class='underline_single'>this</span> is the simple that we mean and hunt for.<br>\",\"date\":\"1915-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,93r[1] (1915--0512) (NB)\",\"ger\":\"Der allgemeine Begriff der Abbildung und <span class='underline_single'>der</span> der Koordinaten. <br>\",\"eng\":\"The general concept of depiction, and of co-ordinates.<br>\",\"date\":\"1915-05-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,93r[2] (1915--0512) (NB)\",\"ger\":\" Angenommen der Ausdruck „~(∃x) x = x” wäre ein Satz nämlich etwa der: „Es gibt keine Dinge” dann müßte es sehr wundernehmen daß wir, um diesen Satz in Symbolen auszudrücken eine Relation ( = ) benützen müssen, von der in ihm eigentlich gar nicht die Rede ist. <br>\",\"eng\":\"Suppose that the expression \\\"~(∃x)x = x\\\" were a proposition, namely (say), this one: \\\"There are no things.\\\" It would be absolutely astonishing to have to use a relation (=) that’s not mentioned in the proposition to express this proposition in symbols.<br>\",\"date\":\"1915-05-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,93r[3] (1915--0513) (NB)\",\"ger\":\"Eine eigentümliche logische Manipulation, die <span class='underline_single'>Personifizierung</span> der <span class='underline_single'>Zeit</span>! <br>\",\"eng\":\"\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,93r[4] et 94r[1] (1915--0513) (NB)\",\"ger\":\"Nur nicht den Knoten zusammenziehen  / bevor man sicher ist daß man das rechte Ende erwischt hat. <br>\",\"eng\":\"Just don't pull the knot tight before you’re sure you’ve got the right end.<br>\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,94r[2] (1915--0513) (NB)\",\"ger\":\"Dürfen wir einen Teil des Raumes als Ding betrachten. Dies tun wir offenbar in gewissem Sinne immer, wo wir von den räumlichen Dingen reden. <br>\",\"eng\":\"Can we regard a part of space as a thing? In a certain sense we manifestly do this whenever we talk about spatial things.<br>\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,94r[3] et 95r[1] (1915--0513) (NB)\",\"ger\":\"Es scheint nämlich – zum mindesten soweit ich jetzt <span class='underline_single'>sehen</span> kann – mit dem Wegschaffen von Namen durch Definitionen nicht getan zu sein: die komplexen räumlichen Gegenstände, zum Beispiel, scheinen mir in irgendeinem Sinn wesentlich Dinge zu  / sein – ich sehe sie, sozusagen, als Dinge – und ihre Bezeichnung vermittelst Namen scheint mehr zu sein als ein bloß sprachlicher Trick. Die räumlichen zusammengesetzten Gegenstände – z.B. – erscheinen – wie es scheint – wirklich als Dinge. <br>\",\"eng\":\"For it seems—at least as far as I can <span class='underline_single'>see</span> now - that it can’t be a matter of getting rid of names by means of definitions: complex spatial objects, for example, seem to me in some sense to be essentially things—I see them, so to speak, as things.—And their designation by means of names seems to be more than a mere linguistic gimmick. Composite spatial objects—for example—really, as it seems, do appear as things.<br>\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,95r[2] (1915--0513) (NB)\",\"ger\":\"Aber was bedeutet das alles? <br>\",\"eng\":\"But what does all this mean?<br>\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,95r[3] (1915--0513) (NB)\",\"ger\":\"Schon daß wir so ganz instinktiv jene Gegenstände durch Namen bezeichnen. – <br>\",\"eng\":\"That we already completely instinctively refer to those objects by using names.—<br>\",\"date\":\"1915-05-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,95r[4] (1915--0514) (NB)\",\"ger\":\"Die Sprache ist ein Teil unseres Organismus, und nicht weniger kompliziert als dieser. <br>\",\"eng\":\"Language is a part of our organism and no less complicated than it. [<em>Cf. </em>4.002.]<br>\",\"date\":\"1915-05-14\",\"pt-number\":\"4·0012\",\"pt-page\":\"36[7]\",\"tlp-number\":\"4·002 (2)\",\"cross-references\":\"14.5.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,96r[1] (1915--0514)\",\"ger\":\"\",\"eng\":\"[drawing/diagram above the line at the top of the page.]<br>\",\"date\":\"1915-05-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,96r[2] (1915--0514) (NB)\",\"ger\":\"Das alte Problem von Komplex und Tatsache! <br>\",\"eng\":\"The old problem of complex and fact!<br>\",\"date\":\"1915-05-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,96r[3] et 97r[1] (1915--0515) (NB)\",\"ger\":\"Die Komplex-Theorie drückt sich in Sätzen aus wie dieser: „Wenn ein Satz wahr ist dann existiert etwas”; es scheint ein Unterschied zu sein zwischen der Tatsache welche der Satz ausdrückt: a steht in der Relation R zu b, und dem Komplex: <span class='underline_single'>a in der Relation R zu b</span> welche eben dasjenige ist welches „existiert” wenn jener Satz wahr ist. Es scheint als könnten wir dieses Etwas <span class='underline_single'>bezeichnen</span>, und zwar mit einem eigentlichen „zusammengesetzten Zeichen”. – Die Gefühle die sich in diesen Sätzen ausdrücken  / sind ganz natürlich und ungekünstelt; es muß ihnen also eine Wahrheit zu Grunde liegen. Aber welche? <br>\",\"eng\":\"A theory of the complex is expressed in such propositions as: \\\"If a proposition is true then something exists\\\". There seems to be a difference between the fact expressed by the proposition: a stands in relation R to b, and the complex: <span class='underline_single'>a in relation R to b</span>, which is that very something that \\\"exists\\\" if that proposition is true. It seems as if we could <span class='underline_single'>refer</span> to this something, and what's more with an actual \\\"composite sign\\\".—The feelings expressed in these sentences are entirely natural and genuine, so there must be some truth underlying them. But which one?<br>\",\"date\":\"1915-05-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,97r[2] (1915--0515)\",\"ger\":\"Was liegt an meinem Leben? <br>\",\"eng\":\"What matters about my life?<br>\",\"date\":\"1915-05-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,97r[3] (1915--0515) (NB)\",\"ger\":\"Soviel ist klar, daß ein Komplex nur durch seine Beschreibung gegeben sein kann; und diese stimmen oder nicht stimmen wird. <br>\",\"eng\":\"So much is clear, that a complex can be given only by its description; which either will fit or not fit. [<em>See</em> 3.24.]<br>\",\"date\":\"1915-05-15\",\"pt-number\":\"3·20105\",\"pt-page\":\"58[7]\",\"tlp-number\":\"3·24 (2)\",\"cross-references\":\"15.5.15 (3-4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,97r[4] (1915--0515) (NB)\",\"ger\":\"Der Satz in welchem von einem Komplex die Rede ist, wird, wenn dieser nicht existiert, nicht unsinnig, sondern einfach falsch sein! <br>\",\"eng\":\"A proposition that mentions a complex that does not exist will not be nonsensical, but just false. [<em>See</em> 3.24.]<br>\",\"date\":\"1915-05-15\",\"pt-number\":\"3·20105\",\"pt-page\":\"58[7]\",\"tlp-number\":\"3·24 (2)\",\"cross-references\":\"15.5.15 (3-4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,97r[5] et 98r[1] (1915--0516) (NB)\",\"ger\":\"Wenn ich den Raum sehe, sehe  / ich alle seine Punkte? <br>\",\"eng\":\"\",\"date\":\"1915-05-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,98r[2] (1915--0516) (NB)\",\"ger\":\"Etwas „der Logik Widersprechendes” in der Sprache darstellen kann man ebensowenig, wie in der Geometrie eine den Gesetzen des Raumes widersprechende Figur durch ihre Koordinaten darzustellen, oder etwa die Koordinaten eines Punktes zu geben welcher nicht existiert. <br>\",\"eng\":\"It is as impossible to represent something that “contradicts logic” in language as it is to represent by its co-ordinates a figure that contradicts the laws of space, or, say, to give the co-ordinates of a point that does not exist. [<em>See </em>3.032.]<br>\",\"date\":\"1915-05-16\",\"pt-number\":\"3·032\",\"pt-page\":\"42[8]\",\"tlp-number\":\"3·032*\",\"cross-references\":\"16.5.15 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,98r[3] et 99r[1] (1915--0516) (NB)\",\"ger\":\"Gäbe es Sätze welche die Existenz von Urbildern besagten dann wären diese unik und eine Art „logische Sätze” und die Anzahl dieser Sätze würde der Logik eine  / unmögliche Realität geben. Es gäbe Koordination in der Logik. <br>\",\"eng\":\"If there were propositions asserting the existence of prototypes they would be unique and would be a kind of \\\"logical propositions\\\" and the set of these propositions would give logic an impossible reality. There would be co-ordination in logic.<br>\",\"date\":\"1915-05-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,99r[2] (1915--0517? --0518?) (NB)\",\"ger\":\"Die Möglichkeit aller Gleichnisse, der ganzen Bildhaftigkeit unserer Ausdrucksweise, ruht in der Logik der Abbildung. <br>\",\"eng\":\"The possibility of all similes, of all the pictoriality of our language, reposes in the logic of depiction. [4.015.]<br>\",\"date\":\"1915-05-17\",\"pt-number\":\"4·0101\",\"pt-page\":\"42[5]\",\"tlp-number\":\"4·015\",\"cross-references\":\"18.5.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,99r[3] et 100r[1] (1915--0519) (NB)\",\"ger\":\"Wir können sogar einen in Bewegung begriffenen Körper,<span class='underline_single'> und zwar mit seiner Bewegung zusammen</span> als Ding auffassen. So bewegt sich, der um die Erde sich drehende Mond, um die Sonne. Hier scheint es nun klar daß in dieser Verdinglichung nichts als eine logische Manipulation  / vorliegt – deren Möglichkeit übrigens höchst bedeutungsvoll sein mag. <br>Oder betrachten wir Verdinglichungen wie: eine Melodie, ein gesprochener Satz. – <br>Or let us consider reifications like: a tune, a spoken sentence.—<br>\",\"eng\":\"We can even conceive a body apprehended as in movement, and indeed together with its movement, as a thing. Thus the moon, rotating around the earth, moves around the sun. Now here it seems clear that this reification is nothing but a logical manipulation—though the possibility of this may be extremely significant.<br>\",\"date\":\"1915-05-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,100r[2] (1915--0519) (NB)\",\"ger\":\"Wenn ich sage „‚x’ hat Bedeutung” empfinde ich da: „es ist unmöglich daß „x” etwa dieses Messer oder diesen Brief bedeute”? Durchaus nicht. Im Gegenteil. <br>\",\"eng\":\"When I say \\\"'x' has meaning\\\" do I have the feeling: \\\"it is impossible that 'x' means this knife or this letter\\\"? Not at all. On the contrary.<br>\",\"date\":\"1915-05-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,100r[3] (1915--0520) (NB)\",\"ger\":\"Ein Komplex ist eben ein Ding! <br>\",\"eng\":\"A complex just is a thing!<br>\",\"date\":\"1915-05-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,100r[4] et 101r[1] (1915--0521) (NB)\",\"ger\":\"Wohl können wir einen Tatbestand räumlich darstellen welcher den Gesetzen der  / Physik, aber keinen der den Gesetzen der Geometrie zuwiderliefe. <br>\",\"eng\":\"While we are able to give a spatial representation of a matter of fact running foul of the laws of physics, we cannot give such a representation of one that would run counter to the laws of geometry. [<em>See</em> 3.0321.]<br>\",\"date\":\"1915-05-21\",\"pt-number\":\" 3·0321\",\"pt-page\":\"43[1]\",\"tlp-number\":\"3·0321\",\"cross-references\":\"21.5.15*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,101r[2] (1915--0522) (NB)\",\"ger\":\"Die mathematische Notation der unendlichen Reihen wie  “1 + x/1! + x2/2! +.....” <span class='underline_single'>mit den Pünktchen</span> ist ein Beispiel jener erweiterten Allgemeinheit. Ein Gesetz ist gegeben und die hingeschriebenen Glieder dienen als Illustration. <br>\",\"eng\":\"The mathematical notation for infinite series like  “1 + x/1! + x2/2! +.....” <span class='underline_single'>together with the dots</span> is an example of that extended generality. A law is given and the terms that are written down serve as an illustration.<br>In this way instead of (x) fx one might write \\\"f(x).f(y). .....\\\".<br>\",\"date\":\"1915-05-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,101r[3] (1915--0522) (NB)\",\"ger\":\"Räumliche & <span class='underline_single'>zeitliche</span> Komplexe. <br>\",\"eng\":\"Spatial and <span class='underline_single'>temporal</span> complexes.<br>\",\"date\":\"1915-05-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,101r[4] (1915--0523) (NB)\",\"ger\":\"<span class='underline_single'>Die Grenzen meiner Sprache</span> bedeuten die Grenzen meiner Welt. <br>\",\"eng\":\"<span class='underline_single'>The limits of my language</span> mean the limits of my world. [5.6]<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"5·335\",\"pt-page\":\"59[6]\",\"tlp-number\":\"5·6\",\"cross-references\":\"23.5.15 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,101r[5] et 102r[1] (1915--0523) (NB)\",\"ger\":\"Es gibt wirklich nur eine  / Weltseele, welche ich vorzüglich <span class='underline_single'>meine</span> Seele nenne, und als welche allein ich das erfasse, was ich die Seelen anderer nenne. <br>\",\"eng\":\"There really is only one world soul, which I call <span class='underline_single'>my</span> soul in the first place, and as which alone I conceive what I call the souls of others.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,102r[2] (1915--0523) (NB)\",\"ger\":\"Die vorige Bemerkung gibt den Schlüssel zur Entscheidung inwieweit der Solipsismus eine Wahrheit ist. <br>\",\"eng\":\"The previous remark provides the key to deciding how much truth there is in solipsism. [<em>See</em> 5.62 (1).]<br>\",\"date\":\"1915-05-23\",\"pt-number\":\" 5·3351\",\"pt-page\":\"59[7]\",\"tlp-number\":\"5·62 (1)*\",\"cross-references\":\"23.5.15 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,102r[3] (1915--0523) (NB)\",\"ger\":\"Schon lange war es mir bewußt daß ich ein Buch schreiben könnte „Was für eine Welt ich vorfand.”. <br>\",\"eng\":\"I have long been aware that I could write a book: \\\"The sort of world I found\\\". [Cf. 5.631.]<br>\",\"date\":\"1915-05-23\",\"pt-number\":\" 5·33541\",\"pt-page\":\"76[2]\",\"tlp-number\":\"5·631 (2)* \",\"cross-references\":\"23.5.15 (4,11)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,102r[4] et 103r[1] (1915--0523) (NB)\",\"ger\":\"Haben wir nicht eben das Gefühl von der einfachen Relation, welches uns immer als Hauptgrund für die Existenz || Annahme der „einfachen Gegenstände” vorschwebt, haben wir nicht dieses selbe Gefühl wenn wir an die Relation  / zwischen Namen & komplexem Gegenstand denken? <br>\",\"eng\":\"The feeling of a simple relation which we always have in mind as the main reason for the assumption of \\\"simple objects\\\"—don't we have the very same feeling when we think of the relation between name and complex object?<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,103r[2] (1915--0523) (NB)\",\"ger\":\"Nehmen wir an der komplexe Gegenstand sei dies Buch; es heiße „A”. Dann zeigt doch das Vorkommen des „A” im Satz das Vorkommen des Buches in der Tatsache an. <span class='underline_single'>Es löst sich eben auch bei der Analyse nicht willkürlich auf, so </span><span class='underline_single'>daß</span><span class='underline_single'> etwa seine Auflösung in jedem Satzgefüge eine gänzlich verschiedene wäre.</span> – <br>\",\"eng\":\"Suppose the complex object is this book. Let it be called \\\"A\\\". Then surely the occurrence of \\\"A\\\" in the proposition indicates the occurrence of the book in the fact. <span class='underline_single'>Even giving an analysis does not yield an arbitrary resolution: for instance, \\\"A\\\" would not have an entirely different resolution in every composite proposition</span>.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\" 3·2531\",\"pt-page\":\"59[1]\",\"tlp-number\":\"3·3442\",\"cross-references\":\"23.5.15 (6)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,103r[3] et 104r[1] (1915--0523) (NB)\",\"ger\":\"Und so wie das Vorkommen eines Ding-Namens in verschiedenen Sätzen so zeigt das Vorkommen des Namens zusammengesetzter Gegenstände die  / Gemeinsamkeit einer Form und eines Inhalts. <br>\",\"eng\":\"And like the occurrence of of a name-thing in different propositions, the occurrence of the name of composite objects shows there is a form and a content in common.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,104r[2] (1915--0523) (NB)\",\"ger\":\"Trotzdem scheint nun der <span class='underline_single'>unendlich</span> komplexe Sachverhalt ein Unding zu sein! <br>\",\"eng\":\"Nevertheless, an <span class='underline_single'>infinitely</span> complex state of things now looks preposterous.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"5·4103\",\"pt-page\":\"80[8]\",\"tlp-number\":\"4·2211** \",\"cross-references\":\"23.5.15 (8)+   17.6.15 (8)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,104r[3] (1915--0523) (NB)\",\"ger\":\"Aber auch das scheint sicher, daß wir die Existenz einfacher Gegenstände nicht aus der Existenz bestimmter einfacher Gegenstände schließen, sondern sie vielmehr als Endresultat einer Analyse– sozusagen durch die Beschreibung– durch einen zu ihnen führenden Prozeß, kennen. <br>\",\"eng\":\"But it also seems certain that we do not infer the existence of simple objects from the existence of particular simple objects, but rather know them through a process leading to them, as the end result of an analysis—by description, as it were.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,104r[4] et 105r[1] (1915--0523) (NB)\",\"ger\":\"Deswegen, weil eine Redewendung unsinnig  / ist, kann man sie noch immer gebrauchen – siehe die letzte Bemerkung. <br>\",\"eng\":\"That is why one can still go on using a nonsensical idiom — see the last remark.<br>\",\"date\":\"1915-05-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,105r[2] (1915--0523) (NB)\",\"ger\":\"In dem Buch „Die Welt welche ich vorfand” wäre auch über meinen Leib zu berichten und zu sagen welche Glieder meinem Willen unterstehen etc. Dies ist nämlich eine Methode das Subjekt zu isolieren oder vielmehr zu zeigen daß es in einem wichtigen Sinne kein Subjekt gibt: Von ihm allein nämlich könnte in diesem Buche <span class='underline_single'>nicht</span> die Rede sein. – <br>\",\"eng\":\"The book called <em>The World I Found</em> would also have to report on my body and say which parts are subject to my will, etc. For this is a method of isolating the subject, or rather of showing that in an important sense there is no subject; for it alone could <span class='underline_single'>not</span><em> </em>be mentioned in that book. –<br>\",\"date\":\"1915-05-23\",\"pt-number\":\" 5·33541\",\"pt-page\":\"76[2]\",\"tlp-number\":\"5·631 (2)* \",\"cross-references\":\"23.5.15 (4,11)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,105r[3] et 106r[1] (1915--0524) (NB)\",\"ger\":\"Wenn wir auch die einfachen Gegenstände nicht aus der Anschauung kennen; die komplexen Gegenstände <span class='underline_single'>kennen</span> wir aus der Anschauung, wir wissen aus  / der Anschauung daß sie komplex sind. – Und daß sie zuletzt aus einfachen Dingen bestehen müssen? <br>     Wir nehmen zum Beispiel aus unserem Gesichtsfeld einen Teil heraus, wir sehen daß er noch immer komplex ist, daß ein Teil von ihm noch immer komplex aber schon einfacher ist, u.s.w.– <br>\",\"eng\":\"Even though we have no acquaintance with simple objects we <span class='underline_single'>do know</span> complex objects by acquaintance, we know by acquaintance that they are complex. —And that in the end they must consist of simple things?<br>     For example, we single out a part of our field of vision, we see that it is still complex, that a part of it is still complex but already simpler, and so on....<br>\",\"date\":\"1915-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,106r[2] (1915--0524) (NB)\",\"ger\":\"Ist es denkbar daß wir – z.B. – <span class='underline_single'>sehen</span>, daß <span class='underline_single'>alle Punkte einer Fläche gelb sind</span>, ohne irgend <span class='underline_single'>einen</span> Punkt dieser Fläche zu sehen. Fast scheint es so. <br>\",\"eng\":\"Is it conceivable that we - e.g. - <span class='underline_single'>see </span>that <span class='underline_single'>all points </span><span class='underline_single'>of</span><span class='underline_single'> a surface are yellow</span>, without seeing <span class='underline_single'>any</span><span class='underline_single'> single</span> point of this surface. It almost seems so.<br>\",\"date\":\"1915-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,106r[3] (1915--0524) (NB)\",\"ger\":\"Der Entstehung der Probleme: die drückende Spannung die sich einmal in eine Frage zusammenballt, und sich objektiviert. <br>\",\"eng\":\"\",\"date\":\"1915-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,107r[1] (1915--0524) (NB)\",\"ger\":\"Wie würden wir, z.B., eine gleichmäßig mit Blau bedeckte Fläche beschreiben? <br>\",\"eng\":\"How would we describe, for example, a surface uniformly covered with blue?<br>\",\"date\":\"1915-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,107r[2] (1915--0525) (NB)\",\"ger\":\"Erscheint uns das Gesichtsbild eines minimum visibile wirklich als unteilbar? Was Ausdehnung hat ist teilbar. Gibt es Teile in unserem Gesichtsbild die <span class='underline_single'>keine</span> Ausdehnung haben? Etwa die der Fixsterne? – <br>\",\"eng\":\"Does the visual image of a <em>minimum </em><em>visibile</em> really strike us as indivisible? What has extension is divisible. Are there parts of our visual field that have <span class='underline_single'>no</span> extension? For instance, images of the fixed stars?<br>\",\"date\":\"1915-05-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,107r[3] et 108r[1] (1915--0525) (NB)\",\"ger\":\"Der Trieb zum Mystischen kommt von der Unbefriedigtheit unserer Wünsche durch die Wissenschaft. Wir <span class='underline_single'>fühlen</span> daß selbst, wenn alle <span class='underline_single'>möglichen</span> wissenschaftlichen Fragen beantwortet sind <span class='underline_single'>unser Problem noch gar </span><span class='underline_single'>nicht  /</span><span class='underline_single'> berührt ist</span>. Freilich bleibt dann eben keine Frage mehr; und eben dies ist die Antwort.<br>\",\"eng\":\"The drive towards what is mystical arises out of the frustration of our desires by science. We <span class='underline_single'>feel</span> that even if all <span class='underline_single'>possible</span><em> </em>scientific questions were answered, <span class='underline_single'>our</span><span class='underline_single'> problem would still not have been touched at all</span>. To be sure, there would then be no question left, and just this is the answer. [<em>Cf.</em> 6.52.]<br>\",\"date\":\"1915-05-25\",\"pt-number\":\" 6·52\",\"pt-page\":\"76[1]\",\"tlp-number\":\"6·52\",\"cross-references\":\"25.5.15 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,108r[2] (1915--0525) (NB)\",\"ger\":\"Die Tautologie wird von <span class='underline_single'>jedem</span> Satze bejaht; die Kontradiktion von jedem verneint. (Man könnte ja an jeden Satz, ohne seinen Sinn zu ändern irgend <span class='underline_single'>eine</span> Tautologie mit „und” anhängen und ebenso die Verneinung einer Kontradiktion.) <br>Und „ohne seinen Sinn zu ändern” heißt: ohne das <span class='underline_single'>Wesentliche</span> am Zeichen selbst zu ändern. Denn; man kann das <span class='underline_single'>Zeichen</span> nicht ändern ohne seinen Sinn zu ändern. [<em>Cf</em>. 4.465.]<br>\",\"eng\":\"A tautology is affirmed, a contradiction denied, by <span class='underline_single'>every</span> proposition. (One could add “and” and any tautology to any proposition, without altering its sense, and in like manner the negation of a contradiction). <br>And \\\"without altering its sense\\\" means: without altering what is essential about the sign itself. For a sign cannot be altered without altering its sense. [<em>Cf.</em> 4.465.]<br>\",\"date\":\"1915-05-25\",\"pt-number\":\" 4·449\",\"pt-page\":\"45[6]\",\"tlp-number\":\"4·465**\",\"cross-references\":\"3.10.14 (4)  25.5.15 (4)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,109r[1] (1915--0525) (NB)\",\"ger\":\"„aRa” <span class='underline_single'>muß</span> Sinn haben wenn „aRb” Sinn hat. <br>\",\"eng\":\"\",\"date\":\"1915-05-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,109r[2] (1915--0526) (NB)\",\"ger\":\"Wie aber soll ich jetzt das allgemeine Wesen des <span class='underline_single'>Satzes</span> erklären? Wir können wohl sagen: alles, was der Fall ist (oder nicht ist) kann durch einen Satz abgebildet werden. Aber hier haben wir den Ausdruck „<span class='underline_single'>der Fall sein</span>”! Er ist ebenso problematisch. <br>\",\"eng\":\"But how am I to explain the general nature of the proposition now? We can surely say: everything that is (or is not) the case can be pictured by means of a proposition. But here we have the expression \\\"<span class='underline_single'>to be the case</span>\\\"! It is just as problematic.<br>\",\"date\":\"1915-05-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,109r[3] (1915--0526) (NB)\",\"ger\":\"Das Gegenstück zum Satze bilden die Gegenstände. <br>Objects make up a proposition’s complement.<br>\",\"eng\":\"\",\"date\":\"1915-05-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,109r[4] (1915--0526) (NB)\",\"ger\":\"\\\\\\tDie Gegenstände kann ich nur <span class='underline_single'>nennen</span>. Zeichen vertreten sie. <br>\",\"eng\":\"I can only <span class='underline_single'>name</span> objects. Signs stand in for them.<br>\",\"date\":\"1915-05-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,110r[1] (1915--0527) (NB)\",\"ger\":\"Ich kann nur <span class='underline_single'>von</span> ihnen sprechen, sie aussprechen kann ich nicht. <br>\",\"eng\":\"I can only speak <span class='underline_single'>of</span> them, I cannot give voice to them. [<em>See</em> 3.221.]<br>\",\"date\":\"1915-05-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,110r[2] (1915--0527) (NB)\",\"ger\":\"„Aber könnte es nicht etwas geben was durch einen <span class='underline_single'>Satz</span> sich nicht ausdrücken läßt (und auch kein Gegenstand ist)?”. Das ließe sich eben dann durch die <span class='underline_single'>Sprache</span> nicht ausdrücken; und wir können auch nicht darnach <span class='underline_single'>fragen</span>. <br>\",\"eng\":\"\\\"But couldn’t there be something that cannot be expressed by a <span class='underline_single'>proposition</span> (and which is also not an object)?\\\" Then that simply could not be expressed by <span class='underline_single'>language</span>; and it is also impossible for us to <span class='underline_single'>ask</span> about it.<br>\",\"date\":\"1915-05-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,110r[3] et 111r[1] (1915--0527) (NB)\",\"ger\":\"Wie wenn es etwas außerhalb den <span class='underline_single'>Tatsachen</span> gibt? Was unsere Sätze nicht auszudrücken vermögen? Aber da haben wir ja z.B. die <span class='underline_single'>Dinge, und wir fühlen gar kein </span><span class='underline_single'>Verlangen</span>  / sie in Sätzen auszudrücken. Was sich nicht ausdrücken läßt das drücken wir nicht aus——. Und wie wollen wir <span class='underline_single'>fragen</span> ob sich <span class='underline_double'>das</span> ausdrücken läßt, was sich nicht <span class='underline_double'>ausdrücken</span> läßt? <br>\",\"eng\":\"What if there is something outside the <span class='underline_single'>facts</span>? Which our propositions are incapable of expressing? But here we do have <span class='underline_single'>things</span>, for instance, <span class='underline_single'>and we feel no </span><span class='underline_single'>demand</span><span class='underline_single'> </span><span class='underline_single'>at all</span> to express them in propositions. What cannot be expressed we do not express——. And how do we want to ask whether <span class='underline_double'>that</span> can be expressed which cannot be <span class='underline_double'>expressed</span>?<br>\",\"date\":\"1915-05-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,111r[2] (1915--0527) (NB)\",\"ger\":\"<span class='underline_single'>Gibt</span><span class='underline_single'> es keinen Bereich </span><span class='underline_single'>außerhalb den Tatsachen</span>? <br>\",\"eng\":\"<span class='underline_single'>Is there no realm outside the facts</span>?<br>\",\"date\":\"1915-05-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,111r[3] (1915--0528) (NB)\",\"ger\":\"„Zusammengesetztes Zeichen” und „Satz” sind <span class='underline_single'>gleichbedeutend</span>. <br>\",\"eng\":\"\\\"Composite sign\\\" and \\\"sentence\\\" have the <span class='underline_single'>same meaning</span>.<br>\",\"date\":\"1915-05-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,111r[4] (1915--0528) (NB)\",\"ger\":\"Ist es eine Tautologie zu sagen: <span class='underline_single'>die Sprache</span> besteht aus <span class='underline_single'>Sätzen</span>? <br>     Es scheint, <span class='underline_single'>ja</span>. <br>\",\"eng\":\"Is it a tautology to say: <span class='underline_single'>Language</span> consists of <span class='underline_single'>sentences</span>?<br>\",\"date\":\"1915-05-28\",\"pt-number\":\"4·001\",\"pt-page\":\"17[7]\",\"tlp-number\":\"\",\"cross-references\":\"28.5.15 (2,3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,111r[5] et 112r[1] (1915--0529) (NB)\",\"ger\":\"Aber ist die <span class='underline_single'>Sprache</span>, die <span class='underline_single'>einzige</span>  / Sprache? <br>     Warum soll es nicht eine Ausdrucksweise geben mit der ich <span class='underline_single'>über</span> die Sprache reden kann, so daß diese mir in Koordination mit etwas Anderem erscheinen kann? <br>\",\"eng\":\"But is <span class='underline_single'>language</span> the <span class='underline_single'>only</span> language? <br>     Why shouldn’t there be a form of expression in which I can speak <span class='underline_single'>about</span> language in such a way that it can appear to me in coordination with something else?<br>\",\"date\":\"1915-05-29\",\"pt-number\":\" 5·3353\",\"pt-page\":\"60[2]\",\"tlp-number\":\"5·62 (3)*\",\"cross-references\":\"29.5.15 (1, 5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,112r[2] (1915--0529) (NB)\",\"ger\":\"Nehmen wir an die Musik wäre eine solche Ausdrucksweise: Dann ist jedenfalls charakteristisch für die <span class='underline_single'>Wissenschaft</span>, daß in ihr <span class='underline_single'>keine</span> musikalischen Themen vorkommen. <br>\",\"eng\":\"Suppose that music were such a mode of expression: In that case, it is at any rate characteristic of <span class='underline_single'>science</span> that <span class='underline_single'>no</span> musical themes occur in it.<br>\",\"date\":\"1915-05-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,112r[3] (1915--0529) (NB)\",\"ger\":\"Ich selbst schreibe hier nur <span class='underline_single'>Sätze</span> hin. Und warum? <br>I myself only write <span class='underline_single'>sentences</span> here. And why?<br>\",\"eng\":\"\",\"date\":\"1915-05-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,112r[4] (1915--0529) (NB)\",\"ger\":\"<span class='underline_single'>Wie</span> ist die Sprache unik? <br><span class='underline_single'>How</span> is language unique?<br>\",\"eng\":\"\",\"date\":\"1915-05-29\",\"pt-number\":\"5·3353\",\"pt-page\":\"60[2]\",\"tlp-number\":\"5·62 (3)*\",\"cross-references\":\"29.5.15 (1, 5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,112r[5] et 113r[1] (1915--0530) (NB)\",\"ger\":\"Die Worte sind wie die Haut  / auf einem tiefen Wasser. <br>Es ist klar daß es auf dasselbe hinauskommt zu fragen, was ist ein Satz, wie zu fragen was ist eine Tatsache – oder ein Komplex.<br>\",\"eng\":\"Words are like the surface of deep water. <br>It is clear that it comes to the same thing to ask what a proposition is as to ask what a fact is - or a complex.<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,113r[2] (1915--0530) (NB)\",\"ger\":\"Und warum soll man nicht sagen: „Es gibt Komplexe; man kann sie mit Namen benennen oder durch Sätze abbilden”? <br>\",\"eng\":\"And why not say: \\\"There are complexes; one can label them with names or depict them in propositions\\\"?<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,113r[3] (1915--0530) (NB)\",\"ger\":\"Der Name eines Komplexes fungiert im Satz wie der Name eines Gegenstandes welchen ich nur durch eine <span class='underline_single'>Beschreibung</span> kenne. – Als Beschreibung fungiert der ihn abbildende Satz. <br>\",\"eng\":\"The name of a complex functions in a proposition like the name of an object that I know only by <span class='underline_single'>description</span>. ——The proposition depicting it functions as a description.<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,114r[1] (1915--0530) (NB)\",\"ger\":\"Aber wenn es nun einfache Gegenstände gibt, ist es richtig ihre Zeichen und jene anderen „Namen” zu nennen? <br>\",\"eng\":\"But if there are simple objects, is it correct to call both the signs for them and those other signs \\\"names\\\"?<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,114r[2] (1915--0530) (NB)\",\"ger\":\"Oder ist Name sozusagen ein <span class='underline_single'>logischer</span> Begriff? <br>„Er kennzeichnet die Gemeinsamkeit einer Form und eines Inhalts”. ——<br>Je nach der Verschiedenheit der Struktur des Komplexes bezeichnet sein Name in anderer Art & Weise und unterliegt anderen syntaktischen Gesetzen. <br>\",\"eng\":\"\\\"It characterizes a form and a content in common.\\\" —— <br>In accordance with the difference in the structure of the complex, the name of the complex refers in a different way and is subject to different syntactic laws.<br>\",\"date\":\"1915-05-30\",\"pt-number\":\" 3·253\",\"pt-page\":\"58[8]\",\"tlp-number\":\"3·327**  30.5.15 (7,13)**\",\"cross-references\":\"3·327**  30.5.15 (7,13)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,114r[3] et 115r[1] (1915--0530) (NB)\",\"ger\":\"Der Fehler in dieser Auffassung muß darin liegen, daß sie einerseits komplexe  / und einfache Gegenstände einander entgegenstellt andererseits aber sie als verwandt behandelt. <br>     Und doch: <span class='underline_single'>Bestandteile</span> und <span class='underline_single'>Komplex</span> scheinen einander verwandt, <span class='underline_single'>und</span> entgegengesetzt zu sein! <br>     (Wie der Plan einer Stadt und die Karte eines Landes die vor uns in gleicher Größe, und verschiedenen Maßstäben liegen.) <br>\",\"eng\":\"The mistake in this conception must lie in its on the one hand contrasting complexes and simple objects, but on the other hand treating them as related. <br>     And yet: <span class='underline_single'>constituents</span> and <span class='underline_single'>complex</span> seem to be related <span class='underline_single'>and</span> to be opposed! <br>     (Like the plan of a city and the map of a country that are in front of us, the same size, and at different scales).<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,115r[2] et 116r[1] (1915--0530) (NB)\",\"ger\":\"Woher dies Gefühl!: „Allem was ich sehe, dieser Landschaft, dem Fliegen der Samen in der Luft, all diesem kann ich einen Namen zuordnen; ja, was, wenn nicht dieses, / sollten mir Namen benennen”?! <br>\",\"eng\":\"\\\"I can assign a name to all that I see, to this landscape, to the dust in the wind, to all this; indeed, what should I call a name if not this.\\\" Where does this feeling come from?!<br>\",\"date\":\"1915-05-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,116r[2] (1915--0530) (NB)\",\"ger\":\"Namen kennzeichnen die Gemeinsamkeit <span class='underline_single'>einer</span> Form und <span class='underline_single'>eines</span> Inhalts. – Sie kennzeichnen erst mit ihrer syntaktischen Verwendung zusammen <span class='underline_single'>eine bestimmte</span> logische Form. <br>\",\"eng\":\"Names characterize what one form and one content have in common. — They characterize one particular logical form only in tandem with their syntactical employment.  [Cf. 3·31 (4), 3.327.]<br>\",\"date\":\"1915-05-30\",\"pt-number\":\" 3·253\",\"pt-page\":\"58[8]\",\"tlp-number\":\"3·327**  30.5.15 (7,13)**\",\"cross-references\":\"3·327**  30.5.15 (7,13)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,116r[3] (1915--0531) (NB)\",\"ger\":\"Mit der Weltbeschreibung durch Namen kann man nicht mehr leisten als mit der allgemeinen Weltbeschreibung!!! <br>\",\"eng\":\"Using names in a description of the world one cannot achieve more than one can with a general world description!!!<br>\",\"date\":\"1915-05-31\",\"pt-number\":\"5·323\",\"pt-page\":\"62[4]\",\"tlp-number\":\"5·526 (1)\",\"cross-references\":\"17.10.14 (3)* 19.10.14 (3)**   31.5.15 (1,4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,116r[4] (1915--0531) (NB)\",\"ger\":\"Könnte man also ohne Namen auskommen?? Doch wohl nicht. <br>\",\"eng\":\"So could one do without names?? Not at all.<br>\",\"date\":\"1915-05-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,117r[1] (1915--0531) (NB)\",\"ger\":\"Die Namen sind notwendig zu einer Aussage, daß <span class='underline_single'>dieses</span> Ding <span class='underline_single'>jene</span> Eigenschaft besitzt u.s.f. <br>     Sie verknüpfen die Satzform mit ganz bestimmten Gegenständen. <br>     Und wenn die allgemeine Weltbeschreibung wie eine Schablone der Welt ist, so nageln sie die Namen so an die Welt daß sie sich überall mit ihr deckt. <br>\",\"eng\":\"Names are necessary for a statement that <span class='underline_single'>this</span> thing possesses <span class='underline_single'>that</span> property and so on. <br>     They link a propositional form to quite specific objects. <br>     And if a general description of the world is like a mask for the world, names attach it to the world so that the world is completely covered by it.<br>\",\"date\":\"1915-05-31\",\"pt-number\":\" 5·323\",\"pt-page\":\"62[4]\",\"tlp-number\":\"5·526 (1)\",\"cross-references\":\"17.10.14 (3)* 19.10.14 (3)**   31.5.15 (1,4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,117r[2] (1915--0601) (NB)\",\"ger\":\"Das große Problem um welches sich alles dreht, was ich schreibe, ist: Ist, a priori, eine Ordnung in der Welt, und wenn, ja, worin besteht sie? <br>\",\"eng\":\"The great problem around which everything I write turns is: Is there an order in the world <em>a priori</em>, and if so, what does it consist in?<br>\",\"date\":\"1915-06-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,117r[3] et 118r[1] (1915--0601) (NB)\",\"ger\":\"Du siehst in die Nebelwolke  / und kannst dir daher einreden das Ziel sei schon nahe. <br>Aber der Nebel zerrinnt und das Ziel ist noch nicht in Sicht! <br>\",\"eng\":\"You are looking into a foggy mist and so can talk yourself into believing the goal is already nearby. <br>But the fog melts away and the goal is not yet in sight!<br>\",\"date\":\"1915-06-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,118r[2] (1915--0602) (NB)\",\"ger\":\"Ich sagte: „Eine Tautologie wird von <span class='underline_single'>jedem</span> Satze bejaht”; damit ist aber noch nicht gesagt, warum sie kein <span class='underline_single'>Satz</span> ist. Ist denn damit schon gesagt <span class='underline_single'>warum</span> ein Satz nicht von p <span class='underline_single'>und</span> von ~p bejaht werden kann?! <br>\",\"eng\":\"I said: \\\"A tautology is affirmed by <span class='underline_single'>every</span> proposition\\\"; but that doesn’t yet say enough to tell us why it isn’t a <span class='underline_single'>proposition</span>. For does that already tell us <span class='underline_single'>why</span> a proposition can’t be affirmed by p <span class='underline_single'>and</span> ~p?!<br>\",\"date\":\"1915-06-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,118r[3] (1915--0602) (NB)\",\"ger\":\"Meine Theorie bringt nämlich eigentlich nicht heraus daß der Satz zwei Pole haben <span class='underline_single'>muß</span>. <br>\",\"eng\":\"That is to say my theory does not really bring it out that a proposition <span class='underline_single'>must</span> have two poles.<br>\",\"date\":\"1915-06-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,119r[1] (1915--0602) (NB)\",\"ger\":\"Ich müßte nämlich jetzt in der Redeweise dieser Theorie einen Ausdruck dafür finden, <span class='underline_double'>wieviel</span> <span class='underline_single'>ein Satz sagt</span>. Und es müßte sich dann eben ergeben daß Tautologien <span class='underline_double'>nichts</span> sagen. <br>\",\"eng\":\"For what I should now have to do is to find an expression in the idiom of this theory for <span class='underline_double'>how much</span> <span class='underline_single'>a proposition says</span>. And it would have to yield the result that tautologies say <span class='underline_double'>nothing</span>.<br>\",\"date\":\"1915-06-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,119r[2] (1915--0602) (NB)\",\"ger\":\"Aber wie ist dies Maß Vielsagendheit zu finden? <br>\",\"eng\":\"But how is this measure of how-much-is-said to be found?<br>\",\"date\":\"1915-06-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,119r[3] (1915--0602) (NB)\",\"ger\":\"Es ist jedenfalls vorhanden; und unsere Theorie <span class='underline_single'>muß</span> es zum Ausdruck bringen können. <br>\",\"eng\":\"However that may be, it is there; and our theory <span class='underline_single'>must</span> be able to give it expression.<br>\",\"date\":\"1915-06-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,119r[4] (1915--0603) (NB)\",\"ger\":\"Man könnte wohl sagen: <span class='underline_single'>Der</span> Satz sagt am meisten, aus welchem am meisten folgt. <br>\",\"eng\":\"One could surely say: <span class='underline_single'>Th</span><span class='underline_single'>at</span> proposition from which the most follows says the most. [<em>Cf</em>. 5.14.]<br>\",\"date\":\"1915-06-03\",\"pt-number\":\" 5·06\",\"pt-page\":\"12[8]\",\"tlp-number\":\"5·14\",\"cross-references\":\"3.6.15 (1)+  11.6.15 (4,5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,119r[5] et 120r[1] (1915--0603) (NB)\",\"ger\":\"Könnte man sagen: „aus welchem die  / meisten, von einander unabhängigen, Sätze folgen”? <br>\",\"eng\":\"Could one say: \\\"From which the most mutually independent propositions follow\\\"?<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,120r[2] (1915--0603) (NB)\",\"ger\":\"Aber geht es nicht so?: Wenn p aus q folgt, aber nicht q aus p, dann sagt q mehr als p. <br>     Nun aber folgt aus einer Tautologie gar nichts. ——Sie aber folgt aus jedem Satz. <br>     Analoges gilt von ihrem Gegenteil. <br>\",\"eng\":\"But doesn't it work this way: If p follows from q, but not q from p, then q says more than p? <br>     Now nothing at all follows from a tautology. ——But it follows from every proposition. [<em>Cf</em>. 5.142.]<br>     The analogous point applies to its opposite. [<em>Cf</em>. 5.143 (1).]<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"5·08\",\"pt-page\":\"37[8]\",\"tlp-number\":\"5·143 (1)\",\"cross-references\":\"5.6.15 (6)+  3.6.15 (7)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,120r[3] et 121r[1] (1915--0603) (NB)\",\"ger\":\"Aber wie! Wäre da die Kontradiktion nicht der vielsagendste Satz? Aus „p.~p” folgt ja nicht nur „p” sondern auch „~p”! Aus ihnen folgt jeder Satz und sie folgen aus keinem!? Aber ich kann doch aus  / einer Kontradiktion nichts schließen, eben <span class='underline_single'>weil</span> sie eine Kontradiktion ist! <br>     Aber wenn die Kontradiktion die Klasse <span class='underline_single'>aller Sätze</span> ist, so wird die Tautologie das Gemeinsame aller Klassen von Sätzen welche nichts Gemeinsames haben, und verschwindet gänzlich. „p ⌵ ~p” wäre also nur scheinbar ein Zeichen. In Wirklichkeit aber die Auflösung des Satzes. <br>\",\"eng\":\"But how would that work? Won't contradiction be the proposition that says the most then? It’s not only \\\"p\\\" that follows from \\\"p.~p\\\", but also \\\"~p\\\". Every proposition follows from it and it follows from none!? But I surely can’t infer anything from a contradiction, precisely <span class='underline_single'>because</span> it is a contradiction!<br>     But if contradiction is the class of <span class='underline_single'>all propositions</span>, then tautology becomes that shared feature of any classes of propositions that have nothing in common, and vanishes altogether. \\\"p ⌵ ~p\\\" would then only appear to be a sign. But in reality, the disintegration of the proposition. [<em>Cf</em>. 5.143 (1-2); 4.466 (4).]<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"4·4492\",\"pt-page\":\"58[6]\",\"tlp-number\":\"4·466 (4)**\",\"cross-references\":\"3.6.15 (8)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,121r[2] et 122r[1] (1915--0603) (NB)\",\"ger\":\"Die Tautologie verschwindet sozusagen innerhalb allen Sätzen die Kontradiktion  / außerhalb allen Sätzen. <br>\",\"eng\":\"Tautology vanishes so to speak inside all propositions, contradiction outside them. [<em>See</em> 5.143 (2).]<br>\",\"date\":\"1915-06-03\",\"pt-number\":\" 5·081\",\"pt-page\":\"37[9]\",\"tlp-number\":\"5·143 (2)\",\"cross-references\":\"3.6.15 (9)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,122r[2] (1915--0603) (NB)\",\"ger\":\"– Bei diesen Betrachtungen scheine ich übrigens immer unbewußt vom Elementarsatz auszugehen. —— <br>\",\"eng\":\"- Incidentally, in these observations I always seem to be unconsciously starting from the elementary proposition. ——<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,122r[3] (1915--0603) (NB)\",\"ger\":\"Die Kontradiktion ist die äußere Grenze der Sätze; kein Satz bejaht sie. Die Tautologie ist ihr substanzloser Mittelpunkt. (Man kann den Mittelpunkt einer Kreisfläche als deren innere Begrenzung auffassen.) <br>\",\"eng\":\"Contradiction is the outer limit of propositions; no proposition affirms it. Tautology is their substanceless centre.  (One can regard the center of a circular area as its inner limit). [<em>Cf</em>. 5.143 (3).]<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"5·082\",\"pt-page\":\"37[10]\",\"tlp-number\":\"5·143 (3)*\",\"cross-references\":\"3.6.15 (11)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,122r[4] (1915--0603) (NB)\",\"ger\":\"(Das erlösende Wort ist übrigens hier noch nicht gesprochen.) <br>\",\"eng\":\"(In fact the redeeming word still hasn’t been uttered here).<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,122r[5] et 123r[1] (1915--0603) (NB)\",\"ger\":\"Es ist hier nämlich sehr leicht die logische Addition und das  / logische Produkt miteinander zu verwechseln. <br>\",\"eng\":\"The thing is that here it is very easy to confuse logical sum and logical product.<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,123r[2] (1915--0603) (NB)\",\"ger\":\"Wir kommen nämlich zu dem scheinbar merkwürdigen Resultat, daß zwei Sätze etwas gemeinsam haben müssen um von einem Satz bejaht werden zu können. <br>\",\"eng\":\"For we get to the seemingly strange result that two propositions must have something in common to be capable of being affirmed by one proposition.<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,123r[3] (1915--0603) (NB)\",\"ger\":\"(Die Gehörigkeit zu <span class='underline_single'>einer</span> Klasse ist aber auch etwas, was Sätze <span class='underline_single'>gemeinsam</span> haben können!) <br>\",\"eng\":\"(Belonging to a single class, however, is also something that propositions can have in <span class='underline_single'>common</span>!)<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,123r[4] (1915--0603) (NB)\",\"ger\":\"(Hier liegt noch eine entschiedene und entscheidende Unklarheit in meiner Theorie. Daher ein gewisses Gefühl der Unbefriedigung!) <br>\",\"eng\":\"(Here there is still a pronounced and crucial lack of clarity in my theory. Hence a certain feeling of uneasiness!)<br>\",\"date\":\"1915-06-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,123r[5] et 124r[1] (1915--0604) (NB)\",\"ger\":\"\",\"eng\":\"\\\"p.q\\\" only makes sense if \\\"p ⌵ q\\\" makes sense.<br>\",\"date\":\"1915-06-04\",\"pt-number\":\"5·315\",\"pt-page\":\"62[3]\",\"tlp-number\":\"5·515**\",\"cross-references\":\"5.6.15 (7)+   4.6.15   \",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,124r[2] (1915--0605) (NB)\",\"ger\":\"„p.q” bejaht „p” und „q”. Das heißt aber doch nicht daß „p.q” der gemeinsame Bestandteil von „p” und „q” ist sondern im Gegenteil daß sowohl „p” als auch „q” in „p.q” enthalten sind. <br>\",\"eng\":\"\\\"p.q\\\" affirms \\\"p\\\" and \\\"q.\\\" But that surely does not mean that \\\"p.q\\\" is the common constituent of \\\"p\\\" and \\\"q\\\", but on the contrary that both \\\"p\\\" and \\\"q\\\" are contained in \\\"p.q\\\".<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,124r[3] (1915--0605) (NB)\",\"ger\":\" ⨯\\tIn diesem Sinne hätten p und ~p sogar etwas gemein zum Beispiel Sätze wie ~p ⌵ q und p ⌵ q. Das heißt: es gibt allerdings Sätze welche sowohl von „p” als auch von „~p” bejaht werden – z.B. die obigen –; es gibt aber keine die sowohl p als auch ~p bejahen. <br>\",\"eng\":\"In this sense, p and ~p would actually have something in common, for example propositions such as ~p ⌵ q and p ⌵ q. That is: there are propositions which are affirmed by both \\\"p\\\" and \\\"~p\\\" —the above ones, for instance —but there are none that affirm p as well as also affirming ~p.<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,124r[4] et 125r[1] (1915--0605) (NB)\",\"ger\":\"Damit ein Satz wahr sein kann  / muß er auch falsch sein können. <br>\",\"eng\":\"For a proposition to be capable of being true it must also be capable of being false.<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,125r[2] (1915--0605) (NB)\",\"ger\":\" ⨯\\tWarum sagt die Tautologie nichts? Weil in ihr von vornherein jede Möglichkeit zugegeben wird; weil … <br>\",\"eng\":\"Why does a tautology say nothing? Because every possibility is admitted in it from the start; because ...<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,125r[3] (1915--0605) (NB)\",\"ger\":\" Es muß sich <span class='underline_single'>im Satz selbst</span> zeigen daß er <span class='underline_single'>etwas</span> sagt und an der Tautologie daß sie nichts sagt. <br>\",\"eng\":\"The proposition itself must show that it says <span class='underline_single'>something</span>, and the tautology that it says nothing.<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"4·4462\",\"pt-page\":\"45[1]\",\"tlp-number\":\"4·461 (1)\",\"cross-references\":\"5.6.15 (5)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,125r[4] (1915--0605) (NB)\",\"ger\":\"p.~ p ist dasjenige – etwa das <span class='underline_single'>Nichts</span> – welches p und ~p gemeinsam haben. <br>\",\"eng\":\"p.~ p is the one thing—say that <span class='underline_single'>nothing</span>—that p and ~p have in common.<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,125r[5] et 126r[1] (1915--0605) (NB)\",\"ger\":\"⨯\\tIn dem <span class='underline_single'>eigentlichen</span> Zeichen für p liegt wirklich schon das  / Zeichen „p ⌵ q”. (Denn es ist dann möglich dieses Zeichen <span class='underline_double'>ohne Weiteres</span> zu bilden.) <br>\",\"eng\":\"The sign \\\"p ⌵ q\\\" is already contained in the <span class='underline_single'>proper</span> sign for p. (For it is then possible to form this sign <span class='underline_double'>automatically</span>).<br>\",\"date\":\"1915-06-05\",\"pt-number\":\"5·315\",\"pt-page\":\"62[3]\",\"tlp-number\":\"5·515**\",\"cross-references\":\"5.6.15 (7)+   4.6.15   \",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,126r[2] (1915--0606) (NB)\",\"ger\":\"(Diese Theorie behandelt die Sätze exklusiv, sozusagen als eine eigene Welt und nicht in Verbindung mit dem was sie darstellen.) <br>\",\"eng\":\"(This theory deals solely with propositions, in a manner of speaking as a world apart, and not in connection with what they represent).<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,126r[3] (1915--0606) (NB)\",\"ger\":\"Die Verbindung der Bild-Theorie mit der Klassen-Theorie wird erst später ganz einleuchtend werden. <br>\",\"eng\":\"The connection of the picture-theory with the class-theory will only become quite obvious later.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,126r[4] (1915--0606) (NB)\",\"ger\":\"Man kann von einer Tautologie nicht sagen daß sie wahr ist, denn sie ist <span class='underline_single'>wahr gemacht</span>. <br>\",\"eng\":\"One cannot say of a tautology that it is true, for it is <span class='underline_single'>made to be true</span>.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,126r[5] et 127r[1] (1915--0606) (NB)\",\"ger\":\"Sie ist kein Bild der Wirklichkeit insofern als sie nichts <span class='underline_double'>darstellt</span>. / Sie ist das, was alle <span class='underline_single'>Bilder</span> – einander widersprechende – gemeinsam haben. <br>\",\"eng\":\"It is not a picture of reality in that it <span class='underline_double'>represents</span> nothing. It is what all—mutually contradictory—<span class='underline_single'>pictures</span> have in common.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\" 4·4482\",\"pt-page\":\"45[5]\",\"tlp-number\":\"4·462 (1)\",\"cross-references\":\"3.10.14 (4)  6.6.15 (4)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,127r[2] (1915--0606) (NB)\",\"ger\":\" In der Klassen-Theorie ist noch nicht ersichtlich warum der Satz seinen Gegensatz <span class='underline_single'>bedarf</span>. Warum er ein von dem übrigen Teil des logischen Raumes <span class='underline_single'>abgetrennter</span> Teil ist. <br>\",\"eng\":\"In the class-theory it is not yet evident why a proposition <span class='underline_single'>requires</span> its contradiction. Why it is a part of logical space which is <span class='underline_single'>separated</span> from the other part of logical space.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,127r[3] (1915--0606) (NB)\",\"ger\":\" Der Satz sagt, es ist: <span class='underline_single'>so</span>, und nicht: <span class='underline_single'>so</span>. Er stellt eine Möglichkeit dar und bildet doch schon <span class='underline_single'>ersichtlich</span> den Teil eines Ganzen – dessen Züge er trägt – und von welchem er sich abhebt. <br>\",\"eng\":\"A proposition says: it is <span class='underline_single'>this way</span>, and not: <span class='underline_single'>that way</span>. It represents a possibility and yet already <span class='underline_single'>evident</span><span class='underline_single'>ly</span> forms one part of a whole,—whose features it bears—and from which it stands out.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,127r[4] et 128r[1] (1915--0606) (NB)\",\"ger\":\" ⨯\\tp. ⌵ .q. ⌵ .~p ist auch ein Tautologie. ——/ Es gibt wohl Sätze die sowohl p als auch ~p <span class='underline_single'>zulassen</span> aber <span class='underline_single'>keinen</span> den sowohl p als auch ~p <span class='underline_single'>bejaht</span>. <br>\",\"eng\":\"p. ⌵ .q. ⌵ .~p is also a tautology.——There are probably propositions that //<span class='underline_single'>allow</span> both p and ~p but <span class='underline_single'>none</span> that <span class='underline_single'>affirm</span> both p and ~p.  //<span class='underline_single'> allow</span> p as well as ~p but <span class='underline_single'>none</span> that <span class='underline_single'>affirm</span> p as well as ~p.//<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,128r[2] (1915--0606) (NB)\",\"ger\":\"      Die Möglichkeit von „p ⌵ q” wenn „p” gegeben ist, ist eine Möglichkeit nach einer anderen Dimension als die Unmöglichkeit von „~p”. <br>\",\"eng\":\"  The possibility of \\\"p ⌵ q\\\" when \\\"p\\\" is given, is a possibility in a different dimension from the impossibility of \\\"~p\\\".<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,128r[3] (1915--0606) (NB)\",\"ger\":\"„p ⌵ ~p” ist ein <span class='underline_double'>ganz spezieller Fall</span> von „p ⌵ q”. <br>\",\"eng\":\"\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,128r[4] (1915--0606) (NB)\",\"ger\":\"„p” hat nichts mit „~p ⌵ q” gemein. <br>\",\"eng\":\"\\\"p\\\" has nothing in common with \\\"~p ⌵ q\\\".<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,128r[5] (1915--0606) (NB)\",\"ger\":\" Dadurch daß ich an „p” das „~” hänge, tritt der Satz in eine andere Satzklasse. <br>\",\"eng\":\"As a result of my appending a \\\"~\\\" to \\\"p\\\", the proposition enters a different class of propositions.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,129r[1] (1915--0606) (NB)\",\"ger\":\" ⨯\\tJeder Satz hat nur ein Negativ; … Es gibt nur einen Satz der ganz außerhalb von „p” liegt. <br>\",\"eng\":\"Every proposition has only one negative; ... There is only one proposition that lies entirely outside \\\"p\\\".<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"5·3132\",\"pt-page\":\"62[1]\",\"tlp-number\":\"5·513 (2)\",\"cross-references\":\"3.5.15 (3)+   6.6.15 (13)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,129r[2] (1915--0606) (NB)\",\"ger\":\"Man könnte auch so sagen: Der Satz welcher p und ~p bejaht, wird von allen Sätzen verneint; der Satz welcher p oder ~p bejaht wird von allen Sätzen bejaht. <br>\",\"eng\":\"One could also say: the proposition which affirms p and ~p is negated by all propositions; the proposition which affirms p or ~p is affirmed by all propositions.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,129r[3] (1915--0606) (NB)\",\"ger\":\" ⨯\\tMein Fehler muß darin liegen daß ich dasjenige was aus dem Wesen der Verneinung u.a. folgt zu ihrer Definition gebrauchen will. – Die Gemeinsamkeit der Grenze von „p” & „~p” kommt in der von mir versuchten Erklärung der Verneinung gar nicht vor. <br>\",\"eng\":\"My mistake must lie in my wanting to use what follows from the nature of negation, etc., in its definition. —That \\\"p\\\" & \\\"~p\\\" share a boundary is no part of the explanation of negation that I am working towards.<br>\",\"date\":\"1915-06-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,130r[1] (1915--0607) (NB)\",\"ger\":\"Wenn man z.B. sagen könnte: alle Sätze die p nicht bejahen, bejahen ~p so hätte man damit eine genügende Beschreibung. – Aber so geht es nicht. <br>\",\"eng\":\"For example, if one could say: all propositions that do not affirm p affirm ~p, then one would have an adequate description.—But that doesn't work.<br>\",\"date\":\"1915-06-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,130r[2] (1915--0607) (NB)\",\"ger\":\" ⨯\\tKann man aber nicht sagen „~p” ist dasjenige was nur solche Sätze gemeinsam haben welche „p” nicht bejahen? – Und hieraus folgt ja schon die Unmöglichkeit von „p.~p”. <br>     (All dies setzt natürlich schon die Existenz der gesamten <span class='underline_single'>Satzwelt</span> voraus, mit Recht?) <br>\",\"eng\":\"But can’t we say \\\"~p\\\" is that which only those propositions that do not affirm \\\"p\\\" have in common? ——And from this the impossibility of \\\"p.~p\\\" already follows. <br>     (All this, of course, already presupposes the existence of the entire <span class='underline_single'>world of propositions</span>. With good reason?)<br>\",\"date\":\"1915-06-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,130r[3] et 131r[1] (1915--0607) (NB)\",\"ger\":\"<span class='underline_double'>Es genügt nicht</span> darauf hinzuweisen daß ~p außerhalb p liegt! Nur dann wird man  / alle Eigenschaften von „~p” ableiten können wenn „~p” <span class='underline_single'>wesentlich als das Negativ von p</span> eingeführt wird!! <br>\",\"eng\":\"<span class='underline_double'>It is not enough</span> to point to ~p’s lying outside p! One will only be able to derive all the properties of \\\"~p\\\" if \\\"~p\\\" is introduced <span class='underline_single'>essentially as the negative of p</span>!!! <br>\",\"date\":\"1915-06-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,131r[2] (1915--0607) (NB)\",\"ger\":\"     Oder verhält es sich so, daß wir den Satz ~p überhaupt nicht „einführen” können, sondern, er tritt uns als vollendete Tatsache entgegen und wir können nur auf seine einzelnen formellen Eigenschaften hinweisen, wie z.B. daß er nichts mit p gemeinsam hat, daß kein Satz ihn und p enthält etc. etc.? <br>\",\"eng\":\"Or is it like this: we cannot \\\"introduce\\\" the proposition ~p at all, but we encounter it as an accomplished fact // fait accompli// and we can only point to its individual formal properties, such as that it has nothing in common with p, that no proposition contains it and p, etc., etc.?<br>\",\"date\":\"1915-06-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,131r[3] et 132r[1] (1915--0608) (NB)\",\"ger\":\"Jeder „mathematische Satz” ist ein in Zeichen dargestellter  / Modus ponens. (Und es ist klar, daß man den Modus ponens nicht in einem Satz ausdrücken kann.) <br>\",\"eng\":\"Every \\\"mathematical proposition\\\" is a <em>modus ponens</em> set out in signs. (And clearly <em>modus ponens</em> cannot be expressed in a proposition). [<em>Cf</em>. 6.1264 (2).]<br>\",\"date\":\"1915-06-08\",\"pt-number\":\"6·1214\",\"pt-page\":\"66[3]\",\"tlp-number\":\"6·1264 (2)*                 8.6.15 (1)**\",\"cross-references\":\"6·1264 (2)*                 8.6.15 (1)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,132r[2] (1915--0608) (NB)\",\"ger\":\"Die Gemeinsamkeit der Grenze von p und ~p drückt sich dadurch aus, daß das Negativ eines Satzes nur mit Hilfe eben dieses bestimmt wird. Wir sagen ja eben: das Negativ eines Satzes ist der Satz welcher … und nun folgt die Beziehung von ~p zu p. – <br>\",\"eng\":\"That p and ~p have a common boundary is expressed by the fact that the negative of a proposition is only specified by means of this very proposition. We say yes, precisely: the negative of a proposition is the proposition which ... and now the relation of ~p to p follows.——<br>\",\"date\":\"1915-06-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,132r[3] (1915--0609) (NB)\",\"ger\":\"Man könnte natürlich einfach so sagen: Die Verneinung von p ist der Satz welcher keinen Satz mit p gemeinsam hat. <br>\",\"eng\":\"Of course, one could simply say: the negation of p is the proposition which has no proposition in common with p.<br>\",\"date\":\"1915-06-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,133r[1] (1915--0609) (NB)\",\"ger\":\" ⨯\\tDer Ausdruck „tertium non datur” ist eigentlich ein Unsinn. (Von einem Dritten ist eben in p ⌵ ~p nicht die Rede!) <br>\",\"eng\":\"The expression \\\"<em>tertium non </em><em>datur</em>\\\" really is nonsense. (For no third thing is in question in p ⌵ ~p).<br>\",\"date\":\"1915-06-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,133r[2] (1915--0609) (NB)\",\"ger\":\" ⨯\\tSollten wir das nicht auf unsere Erklärung des Negatives eines Satzes anwenden können? <br>\",\"eng\":\"Shouldn't we be able to use this in our explanation of the negative of a proposition?<br>\",\"date\":\"1915-06-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,133r[3] (1915--0609) (NB)\",\"ger\":\"Können wir nicht sagen: Unter allen Sätzen welche nur von p abhängig sind, gibt es nur solche, welche p bejahen und solche, welche es verneinen. <br>\",\"eng\":\"Can’t we say: Among all the propositions which are dependent on p alone, there are only such as assert p and such as deny it?<br>\",\"date\":\"1915-06-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,133r[4] et 134r[1] (1915--0609) (NB)\",\"ger\":\"Ich kann also sagen das Negativ von p ist die Klasse aller Sätze welche nur von „p” abhängig sind und  /<span class='underline_single'>“p” nicht bejahen</span>. <br>\",\"eng\":\"So I can say the negative of p is the class of all propositions which are dependent on \\\"p\\\" alone and <span class='underline_single'>do not affirm \\\"p\\\"</span>.<br>\",\"date\":\"1915-06-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,134r[2] (1915--0610) (NB)\",\"ger\":\"<span class='underline_single'>“p ∙ q </span><span class='underline_single'>⌵</span><span class='underline_single'> ~q</span><span class='underline_single'>”</span><span class='underline_single'> ist von </span><span class='underline_single'>„</span><span class='underline_single'>q</span><span class='underline_single'>”</span><span class='underline_single'> </span><span class='underline_double'>nicht</span><span class='underline_single'> abh</span><span class='underline_single'>ä</span><span class='underline_single'>ngig!! </span><br><span class='underline_single'>\\\"p ∙ q </span><span class='underline_single'>⌵</span><span class='underline_single'> ~q\\\" is </span><span class='underline_double'>not</span><span class='underline_single'> dependent on \\\"q\\\"!!</span><br>\",\"eng\":\"\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,134r[3] (1915--0610) (NB)\",\"ger\":\"<span class='underline_single'>Ganze Sätze</span>, verschwinden! <br>Whole propositions disappear!<br>\",\"eng\":\"\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,134r[4] (1915--0610) (NB)\",\"ger\":\" Schon das, daß „p ∙ q ⌵ ~q” von „q” unabhängig ist obwohl es das Schriftzeichen „q” offenbar enthält, zeigt uns wie Zeichen von der Form η ⌵ ~η scheinbar, aber doch nur <span class='underline_single'>scheinbar</span> existieren können. <br>\",\"eng\":\"The very fact that \\\"p ∙ q ⌵ ~q\\\" is independent of \\\"q\\\", although it obviously contains the character \\\"q\\\" shows us how signs of the form η ⌵ ~η can apparently, but still only <span class='underline_single'>apparently</span>, exist.<br>\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,134r[5] (1915--0610) (NB)\",\"ger\":\" Dies kommt natürlich daher, daß diese Zusammenstellung „p ⌵ ~p” zwar äußerlich möglich ist, aber nicht den Bedingungen genügt unter welchen ein solcher Komplex <span class='underline_single'>etwas sagt</span> also ein Satz ist. <br>\",\"eng\":\"Naturally, this is because this arrangement—\\\"p ⌵ ~p\\\"—is externally possible, to be sure, but doesn’t satisfy the conditions for such a complex to <span class='underline_single'>say something</span>, and so be a proposition.<br>\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,135r[1] (1915--0610) (NB)\",\"ger\":\"„p ∙ q ⌵ ~q” sagt dasselbe wie „p ∙ r ⌵ ~r” – was immer q und r besagen mag –: Alle Tautologien besagen dasselbe. (Nämlich nichts.) [Die beiden Beispiele sind untereinander zu schreiben.] <br>\",\"eng\":\"\\\"p ∙ q ⌵ ~q\\\" says the same as <br>—whatever q and r may say—: All tautologies say the same thing. (Namely nothing.) [<em>Cf</em>. 5.43.]<br>\",\"date\":\"1915-06-10\",\"pt-number\":\" 5·224\",\"pt-page\":\"37[4]\",\"tlp-number\":\"5·43 (2)\",\"cross-references\":\"10.6.15 (5)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,135r[2] (1915--0610) (NB)\",\"ger\":\"Aus der letzten Erklärung der Verneinung folgt daß alle von p allein abhängigen Sätze welche p nicht bejahen – und nur solche –, p verneinen. Also sind „p ∙ ~p” und „p ⌵ ~p” keine Sätze, denn, das erste Zeichen bejaht weder noch verneint es p und das zweite müßte beide bejahen. <br>\",\"eng\":\"From the last explanation of negation it follows that all propositions dependent on p alone which do not affirm p—and only these—negate p. So \\\"p ∙ ~p\\\" and \\\"p ⌵ ~p\\\" are not propositions, because the first sign neither affirms nor negates p and the second would have to affirm both.<br>\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,135r[3] et 136r[1] (1915--0610) (NB)\",\"ger\":\"Da ich nun aber doch p ⌵ ~p und p.~p hinschreiben kann, zumal in Verbindung mit anderen  / Sätzen so muß klar gestellt werden welche Rolle diese Scheinsätze nun, besonders in jenen Verbindungen, spielen. Denn sie sind natürlich nicht als ein völlig bedeutungsloses Anhängsel – wie etwa ein bedeutungsloser Name – zu behandeln. Sie gehören vielmehr mit in den Symbolismus – wie die „0” in der Arithmetik. [<em>Cf</em>. 4.4611.]<br>\",\"eng\":\"But since I can still write down p ⌵ ~p and p.~p, particularly in connection with other sentences, it must be made clear what role these pseudo-propositions now play, especially in such connections. For they are not, of course, to be treated as a completely meaningless appendage—like a meaningless name, for instance. Rather, they belong to the symbolism—like \\\"0\\\" in arithmetic.<br>\",\"date\":\"1915-06-10\",\"pt-number\":\" 4·4481\",\"pt-page\":\"38[1]\",\"tlp-number\":\"4·4611**\",\"cross-references\":\"10.6.15 (7)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,136r[2] (1915--0610) (NB)\",\"ger\":\"– Da ist es klar, daß p ⌵ ~p die Rolle eines wahren Satzes spielt, der aber <span class='underline_single'>Zero</span> sagt. <br>\",\"eng\":\"—Here it is clear that p ⌵ ~p plays the role of a true proposition, which however says <span class='underline_single'>nought</span>.<br>\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,136r[3] (1915--0610) (NB)\",\"ger\":\"Wir sind also wieder bei der Quantität des Sagens: <br>\",\"eng\":\"So we have returned again to the quantity of what is said:<br>\",\"date\":\"1915-06-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,137r[1] (1915--0611) (NB)\",\"ger\":\"Aus allen Sätzen folgt das Gegenteil von „p.~p”, heißt das soviel daß „p.~p” nichts sagt? – Nach meiner früheren Regel müßte die Kontradiktion ja mehr sagen als alle anderen Sätze. <br>\",\"eng\":\"The opposite of \\\"p.~p\\\" follows from all propositions; is that tantamount to saying that \\\"p.~p\\\" says nothing? —According to my earlier rule, the contradiction would have to say more than all other propositions.<br>\",\"date\":\"1915-06-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,137r[2] (1915--0611) (NB)\",\"ger\":\"Kontradiktion |––––––––ө––––––––| Tautologie <br>\",\"eng\":\"\",\"date\":\"1915-06-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,137r[3] (1915--0611) (NB)\",\"ger\":\"Wenn ein vielsagender Satz auch falsch ist, so sollte eben das interessant sein, daß er falsch ist. Es ist befremdend daß das Negativ eines vielsagenden Satzes gänzlich nichtssagend sein soll. <br>\",\"eng\":\"If a proposition that says a great deal is also false, it ought to be interesting that it is false. It is strange that the negative of a proposition that says a great deal should say nothing at all.<br>\",\"date\":\"1915-06-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,137r[4] et 138r[1] (1915--0611) (NB)\",\"ger\":\"Wir sagten: Wenn p aus q folgt aber  / nicht q aus p so sagt q mehr als p. Wenn nun aber aus p folgt daß q falsch ist nicht aber aus q daß p falsch ist, was dann? <br>     Aus p folgt ~q; aus q nicht ~p –? <br>\",\"eng\":\"We said: if p follows from q but not q from p, then q says more than p. However, if it now follows from p that q is false, but not from q that p is false, what then? <br>\",\"date\":\"1915-06-11\",\"pt-number\":\" 5·06\",\"pt-page\":\"12[8]\",\"tlp-number\":\"5·14\",\"cross-references\":\"3.6.15 (1)+  11.6.15 (4,5)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,138r[2] (1915--0612) (NB)\",\"ger\":\"Man könnte eigentlich bei jedem Satz fragen: Was hat es zu bedeuten, wenn er wahr ist, was hat es zu bedeuten wenn er falsch ist. <br>     Nun ist p.~p seiner Annahme nach immer nur falsch, und hat also nichts zu bedeuten; und wieviel es bedeutet wenn er wahr ist kann man ja gar nicht fragen. <br>\",\"eng\":\"Considering any proposition, one could by rights ask: What does it come to if it is true? What does it come to if it is false?<br>     Now the \\\"assumption\\\" in p.~p is never anything but false, and so doesn’t come to anything; and as for what it would come to if it were true, of course, one cannot ask at all.<br>\",\"date\":\"1915-06-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,138r[3] et 139r[1] (1915--0613) (NB)\",\"ger\":\"Wenn „p.~p” wahr sein <span class='underline_double'>könnte</span>, so würde es allerdings <span class='underline_single'>sehr</span>  / viel besagen. Aber <span class='underline_single'>die Annahme</span> daß es wahr ist kommt eben bei ihm nicht in Betracht da es seiner Annahme nach immer falsch ist. <br>\",\"eng\":\"If \\\"p.~p\\\" <span class='underline_double'>could</span> be true, it would indeed say a <span class='underline_single'>very</span> great deal. But the <span class='underline_single'>assumption</span> that it is true does not come in question in connection with it, as the \\\"assumption\\\" in it is always false.<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,139r[2] (1915--0613) (NB)\",\"ger\":\"Eigentümlich: Die Wörter „Wahr” und „Falsch” beziehen sich auf die Beziehung des Satzes zur Welt; daß diese Wörter in ihm selbst zur Darstellung verwendet werden können! <br>\",\"eng\":\"Strange: The words \\\"true\\\" and \\\"false\\\" concern the relation of a proposition to the world; that these words can be used to represent in a proposition itself!<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,139r[3] et 140r[1] (1915--0613) (NB)\",\"ger\":\" Wir sagten: Wenn ein Satz nur von p abhängig ist und wenn er „p” bejaht dann verneint er es nicht, und umgekehrt.: <span class='underline_single'>Ist dies das Bild jener gegenseitigen Ausschließung von p und ~p?</span> Der Tatsache, daß  / ~p <span class='underline_single'>das</span> ist, was <span class='underline_single'>außerhalb</span> p liegt? <br>\",\"eng\":\"We said: if a proposition depends only on p, and if it affirms \\\"p\\\" then it does not deny it, and vice versa: <span class='underline_single'>Is this the picture of that mutual exclusion of p and ~p?</span> Of the fact that ~p is <span class='underline_single'>what</span> lies <span class='underline_single'>outside</span> p?<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,140r[2] (1915--0613) (NB)\",\"ger\":\"<span class='underline_single'>Es scheint doch so!</span> Der Satz „~p” ist in demselben Sinne das was außerhalb „p” liegt. – (Vergiß auch nicht daß das Bild sehr komplizierte Koordinaten zur Welt haben kann.) <br>\",\"eng\":\"<span class='underline_single'>It does seem so!</span> The proposition \\\"~p\\\" is in the same sense what lies outside \\\"p\\\"..——(Don't forget that a picture may have very complicated coordinates to the world as well).<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,140r[3] (1915--0613) (NB)\",\"ger\":\"Man könnte übrigens einfach sagen: „p.~p” sagt im eigentlichen Sinne des Wortes nichts. Weil im vornherein keine Möglichkeit gelassen ist die er <span class='underline_single'>richtig</span> darstellen kann. <br>\",\"eng\":\"Moreover, one could simply say: \\\"p.~p\\\" says nothing in the strict sense of the word.For from the outset there is no possibility left which it can <span class='underline_single'>correctly</span> represent.<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,140r[4] et 141r[1] (1915--0613) (NB)\",\"ger\":\"Wenn, beiläufig gesprochen, „p folgt aus q” heißt, wenn p wahr ist so muß q wahr sein dann kann man überhaupt nicht sagen  / daß irgend etwas aus „p.~p” folgt, da es die Hypothese daß „p.~p” wahr sei nicht gibt!! <br>\",\"eng\":\"If, roughly speaking, \\\"p follows from q\\\" means: If p is true then q must be true, then one cannot say at all that anything follows from \\\"p.~p\\\", since there is no such thing as the hypothesis that \\\"p.~p\\\" is true!!<br>\",\"date\":\"1915-06-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,141r[2] (1915--0614) (NB)\",\"ger\":\"Wir sind uns also darüber klar geworden daß Namen für die verschiedensten Formen stehen, und stehen dürfen, und daß nun erst die syntaktische Anwendung die darzustellende Form charakterisiert. <br>     Was ist nun die syntaktische Anwendung von Namen einfacher Gegenstände? <br>\",\"eng\":\"We have thus become clear that names may and do stand for the greatest variety of forms, and that it is only the syntactic application that characterizes the form to be represented. <br>     Now what is the syntactic application of names of simple objects?<br>\",\"date\":\"1915-06-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,141r[3] et 142r[1] et 143r[1] (1915--0614) (NB)\",\"ger\":\"Was ist mein Grundgedanke wenn ich von den einfachen  / Gegenständen rede: Genügen nicht am Ende die „zusammengesetzten Gegenstände” gerade den Anforderungen, die ich scheinbar an jene stelle? Gebe ich diesem Buch einen Namen „N” und rede nun von N, ist nicht das Verhältnis von N zu jenem „zusammengesetzten Gegenstand”, zu jenen Formen und Inhalten <span class='underline_single'>wesentlich</span> dasselbe welches ich mir zwischen Namen und einfachem Gegenstand dachte? <br>     Denn wohlgemerkt: wenn auch der Name „N” bei weiterer Analyse verschwindet so deutet er doch ein <span class='underline_single'>Gemeinsames</span>  / an. <br>\",\"eng\":\"What is my basic idea when I talk about simple objects: Don't \\\"composite objects\\\" in the end satisfy precisely the requirements which I seem to make of the simple ones? If I give this book a name \\\"N\\\" and now talk of N, isn’t the relation of N to that \\\"composite object\\\", to those forms and contents, <span class='underline_single'>essentially</span> the same as I that which I imagined between name and simple object? <br>     For mind you: even if the name \\\"N\\\" drops out on further analysis, it still indicates a <span class='underline_single'>single </span><span class='underline_single'>common</span> thing. <br>\",\"date\":\"1915-06-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,143r[2] (1915--0614) (NB)\",\"ger\":\"     Wie steht es aber mit der Bedeutung der Namen außerhalb des Satzzusammenhanges? <br>\",\"eng\":\"     But what about the meaning of names outside the context of a proposition?  [<em>Cf.</em> 3.3.]<br>\",\"date\":\"1915-06-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,143r[3] et 144r[1] (1915--0614) (NB)\",\"ger\":\" Man könnte aber die Frage auch so vorbringen: Es scheint daß die Idee des <span class='underline_double'>Einfachen</span> in der des Komplexen und in der Idee der Analyse bereits enthalten liegt, so zwar daß, wir ganz absehend von irgendwelchen Beispielen einfacher Gegenstände, oder von Sätzen in welchen von solchen die Rede ist; zu dieser Idee kommen und die Existenz  / der einfachen Gegenstände als eine logische Notwendigkeit – a priori – einsehen. <br>Es hat also den Anschein, daß sich die Existenz der einfachen Gegenstände zu der der komplexen so verhält wie der Sinn von ~p zum Sinn von p: Der <span class='underline_single'>einfache</span> Gegenstand sei im komplexen <span class='underline_single'>präjudiziert</span>. <br>\",\"eng\":\"But one could also put the question like this: It seems that the idea of the <span class='underline_double'>simple</span> is already contained in that of the complex and in the idea of analysis, so that, quite apart from any examples of simple objects, or of propositions which mention them, we come to this idea and accept the existence of simple objects—<em>a priori</em>—as a logical necessity.<br>So it looks as if the existence of simple objects is related to the existence of complex objects in the same way as the sense of ~p to the sense of p: The <span class='underline_single'>simple</span> object is <span class='underline_single'>pre</span><span class='underline_single'>judg</span><span class='underline_single'>ed</span> in the complex one. <br>\",\"date\":\"1915-06-14\",\"pt-number\":\"5·4101\",\"pt-page\":\"81[1]\",\"tlp-number\":\"4·221 (1) \",\"cross-references\":\"14.6.15 (6)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,144r[2] (1915--0615) (NB)\",\"ger\":\"(Dies ist <span class='underline_double'>ja</span> nicht zu verwechseln mit der <span class='underline_single'>Tatsache</span>, daß der <span class='underline_single'>Bestandteil</span> im Komplex präjudiziert ist.) <br>\",\"eng\":\"(This is certainly <span class='underline_double'>not</span> to be confused with the <span class='underline_single'>fact</span> that its <span class='underline_single'>constituent</span> is prejudged in the complex).<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,144r[3] (1915--0615) (NB)\",\"ger\":\"(Eine der schwersten Aufgaben des Philosophen ist es zu finden wo ihn der Schuh drückt.) <br>\",\"eng\":\"(One of the philosopher’s most difficult tasks is to find where the shoe pinches.)<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,145r[1] (1915--0615) (NB)\",\"ger\":\"Ich empfinde die Möglichkeit dieser Uhr wie sie vor mir liegt einen Namen einfach zuzuordnen. Ich empfinde daß dieser Name auch außerhalb eines Satzes seine Bedeutung haben wird insoweit ich dies <span class='underline_single'>überhaupt</span> <span class='underline_double'>je</span> empfinde. Und ich empfinde daß jener Name in einem Satze allen Anforderungen an den „Namen des einfachen Gegenstandes“ entsprechen wird. <br>\",\"eng\":\"I feel the possibility of simply assigning a name to this watch just as it lies here in front of me. I feel that this name will also have its meaning outside of a proposition inasmuch as I <span class='underline_double'>ever</span> feel this <span class='underline_single'>at all</span>. And I feel that this name in a proposition will correspond to all of the requirements for a \\\"name of a simple object\\\".<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,145r[2] et 146r[1] (1915--0615) (NB)\",\"ger\":\"Es ist ganz klar daß ich tatsächlich dieser Uhr wie sie hier vor mir liegt und geht einen Namen zuordnen kann und daß dieser Name außerhalb jedes Satzes Bedeutung haben  / wird in demselben Sinne des Wortes wie ich es überhaupt jemals gemeint habe, und … <br>\",\"eng\":\"It is quite clear that I can actually assign a name to this watch just as it lies here ticking in front of me, and that this name will have meaning outside of any proposition in the same sense of the word as I have always intended, and….<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,146r[2] (1915--0616) (NB)\",\"ger\":\"Wir wollen jetzt einmal sehen, ob diese Uhr tatsächlich allen Bedingungen entspricht um ein „einfacher Gegenstand” zu sein. – <br>\",\"eng\":\"Now let's see whether this watch actually meets all the conditions for being a \\\"simple object.\\\".——<br>\",\"date\":\"1915-06-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,146r[3] (1915--0615) (NB)\",\"ger\":\"Die Frage ist eigentlich die: Muß ich, um die syntaktische Behandlungsweise eines Namens zu kennen, die Zusammensetzung seiner Bedeutung kennen?, wenn ja so drückt sich die ganze Zusammensetzung auch schon im unanalysierten Satze aus. … – <br>\",\"eng\":\"The question is really this: Do I have to know the composition of a name’s reference if I am to know its syntactic regime? If so, then the whole composition is already expressed even in the unanalyzed proposition. …——<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,147r[1] (1915--0615) (NB)\",\"ger\":\"(Man versucht oft, zu große Gedankenklüfte zu überspringen und fällt dann mitten hinein.) <br>\",\"eng\":\"(One often tries to jump over too wide chasms of thought and then falls in).<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,147r[2] (1915--0615) (NB)\",\"ger\":\"Das was uns a priori gegeben scheint ist der Begriff: <span class='underline_single'>Dieses</span>. – Identisch mit dem Begriff des <span class='underline_single'>Gegenstands</span>. <br>\",\"eng\":\"What seems to be given to us <em>a priori</em> is the concept: <span class='underline_single'>This</span>.—Identical with the concept of the <span class='underline_single'>object</span>.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,147r[3] (1915--0615) (NB)\",\"ger\":\"Auch Relation und Eigenschaften etc. sind <span class='underline_single'>Gegenstände</span>. <br>\",\"eng\":\"Relations and properties etc. are <span class='underline_single'>objects</span> too.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,147r[4] et 148r[1] et 149r[1] (1915--0615) (NB)\",\"ger\":\" Meine Schwierigkeit besteht doch darin: In allen mir vorkommenden Sätzen kommen Namen vor welche aber bei weiterer Analyse wieder verschwinden müssen. Ich  / weiß daß eine solche weitere Analyse möglich ist bin aber nicht im Stande sie vollständig durchzuführen. Trotzdem nun weiß ich allem Anscheine nach daß wenn die Analyse vollständig durchgeführt wäre, ihr Resultat ein Satz sein müßte der wieder Namen Relationen etc. enthielte. Kurz es scheint als wüßte ich auf diese Weise nur eine Form von welcher ich kein einziges Beispiel kenne. <br>      Ich sehe: die Analyse kann weitergeführt werden und kann mir nun sozusagen nicht vorstellen, daß  / sie zu etwas Anderem führt als zu den mir bekannten Satzgattungen. <br>\",\"eng\":\"My difficulty surely consists in this: In all the propositions that occur to me names are present which, however, must disappear again on further analysis. I know that such a further analysis is possible, but I am not able to carry it out completely. Nevertheless, I certainly seem to know that if the analysis were completely carried out, its result would have to be a proposition which once more would contain names, relations etc.. In short, it looks as if in this way I knew a form without being acquainted with any single example of it.<br>      I see that the analysis can be continued and now I can’t imagine, so to speak, its leading to anything other than the kinds of propositions I’m used to. <br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,149r[2] (1915--0615) (NB)\",\"ger\":\"Wenn ich sage diese Uhr ist glänzend und das was ich mit diese Uhr meine ändert seine Zusammensetzung im geringsten so ändert sich damit nicht nur der Sinn des Satzes dem Inhalt nach sondern die <span class='underline_single'>Aussage über diese Uhr</span> ändert sofort <span class='underline_single'>auch</span> ihren Sinn. Die ganze Form des Satzes ändert sich. <br>\",\"eng\":\"If I say this watch is shiny and what I mean by this watch changes its composition in the slightest, then not only the sense of the proposition changes in its content, but <span class='underline_single'>what I am saying</span><span class='underline_single'> about this watch</span> immediately changes its sense <span class='underline_single'>as well</span>. The whole form of the proposition changes.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,149r[3] et 150r[1] (1915--0615) (NB)\",\"ger\":\" Das heißt die syntaktische Verwendung der Namen charakterisiert vollständig die / Form der zusammengesetzten Gegenstände welche sie bezeichnen. <br>\",\"eng\":\"In other words, the syntactic use of names completely characterizes the form of the composite objects they denote.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,150r[2] (1915--0615) (NB)\",\"ger\":\"Jeder Satz der einen Sinn hat hat einen <span class='underline_double'>kompletten</span> Sinn, und er ist ein Bild der Wirklichkeit so daß, was in ihm noch nicht gesagt ist einfach nicht zu seinem Sinn gehören kann. <br>     Wenn der Satz „diese Uhr glänzt” einen Sinn hat so muß es erklärbar sein, <span class='underline_double'>wie dieser</span> Satz <span class='underline_double'>diesen</span> Sinn hat. <br>\",\"eng\":\"Every proposition that has a sense has a <span class='underline_double'>complete</span> sense, and it is a picture of reality in such a way that what is not yet said in it simply cannot belong to its sense. <br>     If the proposition \\\"this watch is shiny\\\" has a sense, it must be explicable <span class='underline_double'>how this</span> proposition has <span class='underline_double'>this</span> sense.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,150r[3] et 151r[1] (1915--0615) (NB)\",\"ger\":\"– Wenn ein Satz uns etwas sagt so muß er wie er da steht ein Bild  / der Wirklichkeit sein und zwar ein vollständiges. – Es wird natürlich auch etwas geben was er <span class='underline_single'>nicht</span> sagt – aber <span class='underline_single'>was</span> er sagt sagt er vollständig und es muß sich <span class='underline_double'>scharf</span> begrenzen lassen. <br>\",\"eng\":\"—If a proposition tells us something, it must be a picture of reality just as it is, and a complete picture, to be sure. —Of course there will be also something that it does <span class='underline_single'>not</span> say—but <span class='underline_single'>what</span> it does says it says completely and it must let itself be <span class='underline_double'>sharp</span><span class='underline_double'>ly</span> defined.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,151r[2] (1915--0615) (NB)\",\"ger\":\"Ein Satz mag also zwar ein unvollständiges Bild einer gewissen Tatsache sein, aber er ist <span class='underline_double'>immer</span> <span class='underline_single'>ein vollständiges Bild</span>. <br>\",\"eng\":\"So a proposition may well be an incomplete picture of a certain fact, but it is <span class='underline_double'>always</span> <span class='underline_single'>a complete picture</span>. [<em>Cf</em>. 5.156 (4).]<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"5·09311\",\"pt-page\":\"94[4]\",\"tlp-number\":\"5·156 (4)* \",\"cross-references\":\"16.6.15 (13)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,151r[3] et 152r[1] (1915--0615) (NB)\",\"ger\":\"Daraus schiene es nun als ob in gewissem Sinne alle Namen <span class='underline_single'>echte Namen</span> wären. Oder wie ich auch sagen könnte als ob alle Gegenstände in gewissem  / Sinne einfache Gegenstände wären. <br>\",\"eng\":\"From this it would now seem as if in a certain sense all names were <span class='underline_single'>genuine names</span>. Or, as I might also say, as if all objects were in a certain sense simple objects.<br>\",\"date\":\"1915-06-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,152r[2] (1915--0617) (NB)\",\"ger\":\"Nehmen wir an jeder räumliche Gegenstand bestehe aus unendlich vielen Punkten, dann ist es klar daß ich diese nicht alle namentlich anführen kann wenn ich von jenem Gegenstand spreche. Hier wäre also ein Fall wo ich zur vollständigen Analyse im alten Sinne gar nicht kommen <span class='underline_single'>kann</span>; und vielleicht ist gerade dieser der gewöhnliche Fall. <br>\",\"eng\":\"Let us assume that every spatial object consists of an infinite number of points, then it is clear that I cannot mention them all by name when I speak of that object. So here would be a case where I <span class='underline_single'>cannot</span> get to the complete analysis in the old sense at all; and perhaps just this is the usual case.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,152r[3] et 153r[1] (1915--0617) (NB)\",\"ger\":\"Das ist doch klar daß die Sätze die die Menschheit ausschließlich benützt daß diese so wie sie stehen einen Sinn  / haben werden und nicht erst auf eine zukünftige Analyse warten um einen Sinn zu erhalten. <br>\",\"eng\":\"Surely it is clear that the propositions which are the only ones that humankind uses will have a sense just as they are and do not wait for a future analysis to receive a sense.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,153r[2] et 154r[1] (1915--0617) (NB)\",\"ger\":\"Nun scheint es aber doch eine legitime Frage: sind – z.B. – räumliche Gegenstände aus einfachen Teilen zusammengesetzt, kommt man bei ihrer Zerlegung auf Teile die nicht mehr zerlegbar sind, oder ist dies nicht der Fall? <br>     – Was für eine Art Frage ist aber dies? – <br>     <span class='underline_single'>Ist es, </span><span class='underline_double'>a priori</span><span class='underline_single'>, klar </span><span class='underline_single'>daß</span><span class='underline_single'> wir bei der Zerlegung auf einfache Bestandteile kommen müssen – liegt dies etwa schon im Begriff der Zerlegung –</span>, oder  / ist eine Zerlegbarkeit ad infinitum möglich? – Oder am Ende gar ein Drittes? <br>\",\"eng\":\"But now it seems to be a legitimate question: Are—e.g.—spatial objects composed of simple parts, does their decomposition lead to parts that are not further decomposable, or is this not the case? <br>—But what kind of question is this?—<br>     <span class='underline_single'>Is it, </span><span class='underline_double'><em>a priori</em></span><span class='underline_single'>, clear that </span><span class='underline_single'>in decomposi</span><span class='underline_single'>ng</span><span class='underline_single'> </span><span class='underline_single'>we must </span><span class='underline_single'>get</span><span class='underline_single'> to simple constituents</span><span class='underline_single'>—</span><span class='underline_single'>is this </span><span class='underline_single'>perhaps</span><span class='underline_single'> </span><span class='underline_single'>contained in</span><span class='underline_single'> the concept of decompositio</span><span class='underline_single'>n</span>—, or is decomposability <em>ad infinitum</em> possible? —Or is there even a third possibility in the end?<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,154r[2] (1915--0617) (NB)\",\"ger\":\"Jene Frage ist eine logische und die Zusammengesetztheit der räumlichen Gegenstände ist eine logische denn zu sagen, daß ein Ding ein Teil eines anderen sei ist immer eine Tautologie. <br>\",\"eng\":\"This question is a logical one and the compositeness of spatial objects is a logical compositeness, for to say that one thing is a part of another is always a tautology.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,154r[3] (1915--0617) (NB)\",\"ger\":\"Wie aber, wenn ich etwa sagen wollte daß <span class='underline_double'>ein</span> Bestandteil einer Tatsache eine bestimmte Eigenschaft habe? Dann müßte ich sie namentlich anführen und eine logische Summe verwenden. <br>\",\"eng\":\"But suppose I wanted to say that <span class='underline_double'>one</span> constituent of a fact has a particular property? Then I would have to mention it by name and use a logical sum.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,154r[4] et 154r[1] (1915--0617) (NB)\",\"ger\":\"Gegen eine unendliche Zerlegbarkeit scheint auch nichts  / zu sprechen. <br>\",\"eng\":\"And nothing seems to speak against infinite decomposability.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\" 5·4103\",\"pt-page\":\"80[8]\",\"tlp-number\":\"4·2211** \",\"cross-references\":\"23.5.15 (8)+   17.6.15 (8)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,155r[2] (1915--0617) (NB)\",\"ger\":\"<span class='underline_single'>Und immer wieder</span> drängt es sich uns auf daß es etwas einfaches Unzerlegbares gibt, ein Element des Seins kurz ein Ding. <br>\",\"eng\":\"<span class='underline_single'>And </span><span class='underline_single'>time</span><span class='underline_single'> and again</span> it forces itself on us that there is some simple undecomposable, an element of being, in short, a thing.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,155r[3] et 156r[1] (1915--0617) (NB)\",\"ger\":\" Es geht zwar nicht gegen unser Gefühl daß <span class='underline_single'>wir</span> <span class='underline_double'>Sätze</span> nicht soweit zerlegen können um die Elemente namentlich anzuführen aber wir fühlen daß die <span class='underline_double'>Welt</span> aus Elementen bestehen muß. Und es scheint als sei das identisch mit dem Satz die Welt müsse eben sein was sie ist, sie müsse bestimmt sein. Oder mit anderen Worten  / was schwankt sind unsere Bestimmungen nicht die Welt. Es scheint als hieße die Dinge leugnen soviel als zu sagen: Die Welt könne sozusagen unbestimmt sein in dem Sinne etwa in welchem unser Wissen unsicher und unbestimmt ist. <br>\",\"eng\":\"It does not go against our feeling, that <span class='underline_single'>we</span> cannot break down <span class='underline_double'>propositions</span> until we can invoke the elements by name, but we feel that the <span class='underline_double'>world</span> must consist of elements. And it appears as if that were identical with the proposition that the world must be just what it is, it must be definite. Or, in other words, what fluctuates are our determinations, not the world. It looks as if to deny things were as much as to say: The world can be, so to speak, indefinite in a sense, like the sense in which our knowledge is uncertain and indefinite. <br>Possible rearrangement of first sentence, easier to follow but loses some of the tone of the German:<br>That <span class='underline_single'>we</span> cannot break down <span class='underline_double'>propositions</span> until we can invoke the elements by name does not go against our feeling, for we feel that the <span class='underline_double'>world</span> must consist of elements.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,156r[2] (1915--0617) (NB)\",\"ger\":\"Die Welt hat eine feste Struktur. <br>\",\"eng\":\"The world has a stable structure.<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"2·026\",\"pt-page\":\"27[11]\",\"tlp-number\":\"\",\"cross-references\":\"17.6.15 (11)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,156r[3] (1915--0617) (NB)\",\"ger\":\"Ob nicht die Darstellung durch unzerlegbare Namen <span class='underline_single'>nur ein System</span> ist? <br>\",\"eng\":\"Isn’t the representation using undecomposable names <span class='underline_single'>only one system</span>?<br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,156r[4] et 157r[1] et 158r[1] et 159r[1] et 160r[1] (1915--0617) (NB)\",\"ger\":\" Alles was ich will ist ja nur vollständige Zerlegtheit  / <span class='underline_single'>meines Sinnes!!</span> <br>     Mit anderen Worten der Satz muß vollkommen artikuliert sein. Alles was sein Sinn mit einem anderen Sinn gemeinsam hat muß im Satz separat enthalten sein. Kommen Verallgemeinerungen vor so müssen die Formen der besonderen Fälle ersichtlich sein. – Und es ist klar daß diese Forderung berechtigt ist sonst kann der Satz überhaupt kein Bild von <span class='underline_single'>irgend</span> <span class='underline_double'>etwas</span> sein. [<em>Cf. </em>3.251.]<br>     Denn wenn im Satze Möglichkeiten <span class='underline_single'>offen gelassen werden</span> so muß <span class='underline_single'>eben das bestimmt</span> sein: <span class='underline_single'>was</span> offen gelassen wird. Die Verallgemeinerungen  / der Form – z.B. – müssen bestimmt sein. Was ich nicht weiß das weiß ich nicht, aber der Satz muß mir zeigen <span class='underline_double'>was</span> ich weiß. Und ist dann nicht dies <span class='underline_single'>Bestimmte</span> zu dem ich kommen <span class='underline_single'>muß</span> gerade einfach in dem Sinn der mir immer vorgeschwebt hat? Es ist sozusagen das Harte. <br>     „Zusammengesetzte Gegenstände gibt es nicht” heißt dann also für uns: Im Satz muß klar sein wie der Gegenstand zusammengesetzt ist soweit wir überhaupt von seiner Zusammengesetztheit reden  / können. – Der Sinn des Satzes muß im Satze in seine <span class='underline_single'>einfachen</span> Bestandteile zerlegt erscheinen –. Und diese Teile sind dann wirklich unzerlegbar, denn weiter zerlegte wären eben nicht <span class='underline_double'>diese</span>. Mit anderen Worten der Satz läßt sich eben dann nicht mehr durch einen <span class='underline_single'>ersetzen</span> welcher mehr Bestandteile hat sondern jeder der mehr Bestandteile hat hat auch nicht <span class='underline_single'>diesen</span> Sinn. <br>     Immer wenn der Sinn des Satzes vollkommen in ihm selbst ausgedrückt ist, ist der Satz in seine einfachen Bestandteile  / zerlegt – eine weitere Zerlegung ist unmöglich und eine scheinbare überflüssig– und diese sind Gegenstände im ursprünglichen Sinne. <br>\",\"eng\":\"All I want is surely only a complete breakdown of <span class='underline_single'>my sense</span>!! <br>     In other words the proposition must be completely articulated. Everything that its sense has in common with another sense must be contained separately in the proposition. If generalizations occur, the forms of the special cases must be evident. - And it is clear that this postulate is justified, otherwise the proposition cannot be a picture at all, of <span class='underline_single'>any</span><span class='underline_double'>thing</span>. [Cf. 3.251. [Not in PT.]]<br>     For if possibilities <span class='underline_single'>are left open</span> in a proposition, then <span class='underline_single'>just th</span><span class='underline_single'>is </span><span class='underline_single'>must be de</span><span class='underline_single'>finite</span>: <span class='underline_single'>what</span> is left open. The generalizations of the form - e.g. - must be definite. What I don’t know I don’t know, but the proposition must show me <span class='underline_double'>what</span> I know. And isn't then this <span class='underline_single'>de</span><span class='underline_single'>finite</span> to which I <span class='underline_single'>must</span> arrive precisely simple in the sense I have always had in mind? It is, so to speak, that which is hard. <br>     In that case, then, what we mean by \\\"there are no composite objects\\\" is: It must be clear in the proposition how the object is composed in so far as we can speak of its complexity at all. —The sense of the proposition must appear in the proposition as broken down into its <span class='underline_single'>simple</span> constituents—. And these parts are then really undecomposable, for further decomposed they just would not be <span class='underline_double'>these</span>. In other words, the proposition can then no longer be <span class='underline_single'>replaced</span> by one that has more constituents, but any one that has more constituents also doesn’t have <span class='underline_single'>this</span> sense. <br>   Whenever the sense of a proposition is completely expressed in the proposition itself, the proposition is broken down into its simple constituents—no further breakdown is possible and an apparent one is superfluous—and these are objects in the original sense. <br>\",\"date\":\"1915-06-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,160r[2] (1915--0618) (NB)\",\"ger\":\"Ist die Zusammengesetztheit eines Gegenstandes für den Sinn eines Satzes bestimmend, dann muß sie soweit im Satze abgebildet sein als sie seinen Sinn bestimmt. Und soweit die Zusammensetzung für <span class='underline_single'>diesen</span> Sinn <span class='underline_single'>nicht</span> bestimmend ist, soweit sind die Gegenstände dieses Satzes <span class='underline_single'>einfach</span>. <span class='underline_double'>Sie</span> <span class='underline_single'>können</span> nicht weiter zerlegt werden. – <br>\",\"eng\":\"If the complexity of an object is definitive of the sense of a proposition, then it must be depicted in a proposition to the extent that it does decide its sense. And to the extent that its composition is <span class='underline_single'>not</span> definitive of <span class='underline_single'>this</span> sense, to this extent the objects of this proposition are <span class='underline_single'>simple</span>. <span class='underline_double'>They</span> <span class='underline_single'>cannot</span> be further decomposed. ——<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,161r[1] (1915--0618) (NB)\",\"ger\":\"Die Forderung der einfachen Dinge <span class='underline_single'>ist</span> die Forderung der Bestimmtheit des Sinnes. <br>\",\"eng\":\"To postulate simple things <span class='underline_single'>is</span> to postulate that sense is determinate. [<em>Cf</em>. 3.23.]<br>\",\"date\":\"1915-06-18\",\"pt-number\":\" 3·20101\",\"pt-page\":\"44[4]\",\"tlp-number\":\"3·23**\",\"cross-references\":\"18.6.15 (2)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,161r[2] (1915--0618) (NB)\",\"ger\":\"– Denn, rede ich etwa von dieser Uhr und meine damit etwas Komplexes und es kommt auf die Zusammensetzung nicht an so wird im Satz eine Verallgemeinerung auftreten und ihre Grundformen werden, <span class='underline_single'>soweit sie überhaupt gegeben sind</span>, vollkommen bestimmt sein. <br>\",\"eng\":\"——For if I am talking about, for instance, this watch and mean something complex by that and nothing turns on how it is composed, then a generalization will occur in the proposition and the basic forms of the generalization will be completely specific, <span class='underline_single'>so</span><span class='underline_single'> far as they are given at all</span>.<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,161r[3] (1915--0618) (NB)\",\"ger\":\"Wenn es einen endlichen Sinn gibt und einen Satz der diesen vollständig ausdrückt dann gibt es auch Namen für einfache Gegenstände. <br>\",\"eng\":\"If there is a final sense and a proposition expressing it completely then there are also names for simple objects.<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,162r[1] (1915--0618) (NB)\",\"ger\":\"(Das ist die richtige Designation.) <br>\",\"eng\":\"(That is the correct designation).<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,162r[2] et 163r[1] (1915--0618) (NB)\",\"ger\":\"Wenn nun aber ein einfacher Name einen unendlichen komplexen Gegenstand bezeichnet? Wir sagen zum Beispiel etwas von einem Fleck unseres Gesichtsbilds aus etwa daß er rechts von einer Linie liege und wir nehmen an daß jeder Fleck unseres Gesichtsbilds unendlich komplex ist. Sagen wir dann von einem Punkt in jenem Fleck daß er rechts von der Linie liege dann folgt dieser Satz aus dem früheren und wenn unendlich viele Punkte in dem Flecken liegen <span class='underline_single'>dann </span><span class='underline_single'>folgen</span>  / <span class='underline_single'>unendlich viele Sätze verschiedenen Inhalts </span><span class='underline_double'>logisch</span><span class='underline_single'> aus jenem ersten</span>! Und dies zeigt schon daß er tatsächlich selbst unendlich komplex war. Nämlich nicht das Satzzeichen allein wohl aber <span class='underline_single'>mit seiner syntaktischen Verwendung</span>. <br>\",\"eng\":\"But what about a simple name that refers to an infinitely complex object? For example, perhaps we say of a spot in our visual field that it is to the right of a line, and we assume that every spot in our visual field is infinitely complex. Then if we say of a point in that spot that it is to the right of the line, this proposition follows from the previous one, and if there are infinitely many points in the spot <span class='underline_single'>then infinitely many propositions of different content follow </span><span class='underline_double'>logically</span><span class='underline_single'> from that first one</span>! And this alone shows that the proposition itself was as a matter of fact infinitely complex. That is, not the propositional sign on its own, but <span class='underline_single'>together with</span><span class='underline_single'> its syntactic use</span>. <br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,163r[2] et 164r[1] (1915--0618) (NB)\",\"ger\":\"Nun ist es aber natürlich <span class='underline_single'>sehr</span> leicht möglich daß in Wirklichkeit <span class='underline_single'>nicht</span> unendlich viele verschiedene Sätze aus einem solchen Satz folgen weil unser Gesichtsbild vielleicht – oder wahrscheinlich – <span class='underline_single'>nicht</span> aus unendlichen vielen Teilen besteht – sondern jener kontinuierliche  / Gesichtsraum erst eine nachträgliche Konstruktion ist –; und dann folgt eben nur eine endliche Zahl Sätze aus dem bewußten und er selbst ist in jedem Sinne <span class='underline_single'>endlich</span>. <br>\",\"eng\":\"Now, of course, it is also <span class='underline_single'>very</span> possible that in reality infinitely many different propositions do <span class='underline_single'>not</span> follow from such a proposition because our visual field perhaps—or probably—does not consist of infinitely many parts - but continuous visual space is only a subsequent construction—; and in that case only a finite number of propositions follows from the one known and it itself is <span class='underline_single'>finite</span> in every sense. <br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,164r[2] (1915--0618) (NB)\",\"ger\":\"Aber beeinträchtigt nun diese <span class='underline_single'>mögliche</span> unendliche Zusammengesetztheit des Sinnes, dessen Bestimmtheit? <br>\",\"eng\":\"But now, does this <span class='underline_single'>possible</span> infinite complexity of the sense compromise its definiteness?<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,164r[3] et 165r[1] (1915--0618) (NB)\",\"ger\":\"Man könnte die Bestimmtheit auch so fordern!: Wenn ein Satz Sinn haben soll so muß vorerst die syntaktische Verwendung jedes seiner Teile  / festgelegt sein. – Man kann z.B. nicht <span class='underline_single'>erst nachträglich draufkommen</span> daß ein Satz aus ihm folgt. Sondern z.B. welche Sätze aus einem Satz folgen muß vollkommen feststehen ehe dieser Satz einen Sinn haben kann! <br>\",\"eng\":\"One could also postulate definiteness in this way: If a proposition is to have sense, then the syntactic use of each of its parts must be laid down in advance. - One cannot, for example, <span class='underline_single'>only </span><span class='underline_single'>later</span><span class='underline_single'> come to</span> the conclusion that a proposition follows from it. But, e.g., which propositions follow from a proposition must be completely fixed before that proposition can have a sense!<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,165r[2] et 166r[1] (1915--0618) (NB)\",\"ger\":\"Es scheint mir durchaus möglich daß Flächen in unserem Gesichtsbild einfache Gegenstände sind indem wir nämlich keinen einzigen Punkt dieser Fläche separat wahrnehmen, Gesichtsbilder von Sternen scheinen es sogar sicher zu sein. Wenn ich nämlich z.B. sage diese Uhr / liegt nicht in der Lade so braucht daraus durchaus nicht <span class='underline_double'>logisch folgen</span> daß ein Rad welches in der Uhr ist nicht in der Lade liegt denn <span class='underline_single'>ich </span><span class='underline_single'>wußte</span> vielleicht <span class='underline_single'>gar nicht</span> daß das Rad in der Uhr war habe daher auch nicht mit „diese Uhr” einen Komplex meinen können in welchem das Rad vorkommt. Und es ist gewiß daß ich – beiläufig gesprochen – nicht alle Teile meines <span class='underline_single'>theoretischen</span> Gesichtsbildes sehe. Wer weiß <span class='underline_single'>ob</span> ich unendlich viele Punkte sehe! <br>\",\"eng\":\"It seems to me perfectly possible that areas in our visual field are simple objects, since we don’t perceive any single point in this area separately; visual images of stars even seem certainly to be so. If I say, for example, this watch is not in the drawer, it need not <span class='underline_double'>follow logically</span> that a wheel which is in the watch is not in the drawer, for I may <span class='underline_single'>not have known </span><span class='underline_single'>at all</span> that the wheel was in the watch, and so I couldn’t have meant by \\\"this watch\\\" a complex in which the wheel is located. And it is certain -roughly speaking - that I don’t see every part of my <span class='underline_single'>theoretical</span> visual field. Who knows <span class='underline_single'>whether</span> I see infinitely many points?<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,167r[1] (1915--0618) (NB)\",\"ger\":\"Nehmen wir nun an wir sähen einen kreisförmigen Fleck: ist die Kreisform seine <span class='underline_single'>Eigenschaft</span>? Gewiß nicht. Sie scheint eine strukturelle „Eigenschaft” zu sein. Und wenn ich bemerke daß ein Fleck kreisrund ist, bemerke ich da nicht eine unendlich komplexe strukturelle Eigenschaft? Oder ich bemerke nur daß der Fleck eine endliche Ausdehnung hat, und auch das schon scheint eine unendlich komplexe Struktur <span class='underline_single'>vorauszusetzen</span>. <br>\",\"eng\":\"Now suppose we were to see a circular spot: is the circular shape its <span class='underline_single'>property</span>? Certainly not. It seems to be a structural \\\"property\\\". And if I notice that a spot is circular, am I not noticing an infinitely complex structural property? Or I notice only that the spot has a finite extension, and even this seems to <span class='underline_single'>presuppose</span> an infinitely complex structure.<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,167r[2] (1915--0618)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,168r[1] (1915--0618) (NB)\",\"ger\":\" \\tNicht: ein Satz folgt aus einem anderen, sondern die Wahrheit des einen folgt aus der Wahrheit des anderen. (Darum <span class='underline_single'>folgt</span> aus „Alle Menschen sind sterblich”, „Wenn Sokrates ein Mensch ist, so ist er sterblich.”) <br>\",\"eng\":\"Not: One proposition follows from another, but the truth of one follows from the truth of the other. (That is why it <span class='underline_single'>follows</span> from \\\"All men are mortal\\\" that \\\"If Socrates is a man, then he is mortal.\\\")<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,168r[2] (1915--0618) (NB)\",\"ger\":\"     Es kann aber wohl ein Satz von unendlich vielen Punkten handeln ohne in einem gewissen Sinne unendlich komplex zu sein. <br>\",\"eng\":\"     However, a proposition can well be about infinitely many points without being infinitely complex in a certain sense.<br>\",\"date\":\"1915-06-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,168r[3] (1915--0619) (NB)\",\"ger\":\"Wenn wir sehen daß unser Gesichtsbild komplex ist so sehen wir aber auch daß es aus <span class='underline_single'>einfacheren</span> Teilen besteht. <br>\",\"eng\":\"When we see that our visual field is complex, we also see that it consists of <span class='underline_single'>simpler</span> parts.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\" 6·005\",\"pt-page\":\"93[7]\",\"tlp-number\":\"5·5423 (1) \",\"cross-references\":\"19.6.15 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,168r[4] et 169r[1] (1915--0619) (NB)\",\"ger\":\"Wir können, ohne eine bestimmte Anwendung im Auge  / zu haben, von Funktionen der und jener Art reden. <br>\",\"eng\":\"We can talk about functions of this and that kind without an eye to any specific application.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,169r[2] (1915--0619) (NB)\",\"ger\":\"Es schwebt uns nämlich kein Beispiel vor wenn wir Fx und alle anderen variablen Formzeichen benutzen.<br>\",\"eng\":\"For examples aren’t on our minds when we use Fx and all the other variable form-signs. <br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,169r[3] (1915--0619) (NB)\",\"ger\":\"Kurz: Wenn wir die Urbilder nur bei Namen anwenden würden so wäre die Möglichkeit daß wir die Existenz der Urbilder aus der Existenz ihrer einzelnen Fälle erkennen würden. Nun aber wenden wir <span class='underline_single'>Variable</span> an das heißt wir reden sozusagen von den Urbildern allein ganz abgesehen von irgend welchen einzelnen Fällen. <br>\",\"eng\":\"In short: If we were to apply the prototypes only in the case of names, then there would be the possibility that we would recognize the existence of the prototypes from the existence of their special cases. Now, however, we employ <span class='underline_single'>variables</span>, which means we talk, so to speak, of the prototypes by themselves, quite apart from any individual cases.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,170r[1] (1915--0619) (NB)\",\"ger\":\"Wir bilden das Ding, die Relation, die Eigenschaft vermittelst Variablen ab und zeigen so daß wir diese Ideen nicht aus gewissen uns vorkommenden Fällen ableiten sondern sie irgendwie a priori besitzen. <br>\",\"eng\":\"We depict a thing, a relation, a property, by means of variables and thus show that we do not derive these ideas from certain cases that occur to us, but possess them somehow <em>a priori.</em><br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,170r[2] (1915--0619) (NB)\",\"ger\":\"Es fragt sich nämlich: Wenn die einzelnen Formen mir sozusagen in der Erfahrung gegeben sind, dann darf ich doch in der Logik von ihnen nicht Gebrauch machen dann darf ich eigentlich kein x und kein φy schreiben. Aber das kann ich doch gar nicht vermeiden. <br>\",\"eng\":\"For the question arises: If the individual forms are, so to speak, given to me in experience, then surely I can’t make use of them in logic; in that case I can’t really write down an x or a φy. But surely I can’t avoid this at all.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,171r[1] (1915--0619) (NB)\",\"ger\":\"Beiläufig gefragt: handelt die Logik von gewissen Gattungen von Funktionen u. dergl.? Und wenn nicht, was bedeuten dann Fx φz <span class='underline_single'>u.s.w</span><span class='underline_single'>.</span> in der Logik? <br>     <span class='underline_single'>Dies müssen dann Zeichen allgemeinerer Bedeutung sein! </span><br>\",\"eng\":\"Roughly speaking: Does logic deal with certain kinds of functions and the like? And if not, what then do Fx, φz, <span class='underline_single'>and so on</span> signify in logic? <br>     <span class='underline_single'>The</span><span class='underline_single'>n the</span><span class='underline_single'>se must be signs of more general </span><span class='underline_single'>sigificance</span><span class='underline_single'>!</span><br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,171r[2] (1915--0619) (NB)\",\"ger\":\"Das Aufstellen einer Art logischen Inventars wie ich mir das früher vorstellte scheint es doch wohl nicht zu geben. <br>\",\"eng\":\"There doesn't after all seem to be any setting up of a kind of logical inventory as I previously imagined it.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,171r[3] (1915--0619) (NB)\",\"ger\":\" Die Bestandteile des Satzes müssen einfach sein = Der Satz muß vollkommen artikuliert sein.<br>\",\"eng\":\"The constituents of a proposition must be simple = A proposition must be completely articulate.  <br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,172r[1] (1915--0619) (NB)\",\"ger\":\"Nun <span class='underline_double'>scheint</span> dies aber den Tatsachen zu widersprechen? —— <br>\",\"eng\":\"But now does this <span class='underline_double'>seem</span> to contradict the facts? ——<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,172r[2] (1915--0619) (NB)\",\"ger\":\"In der Logik nämlich wollen wir scheinbar Idealbilder artikulierter Sätze vorführen. Aber wie ist das möglich? <br>\",\"eng\":\"For in logic we are ostensibly trying to present idealised models of articulated propositions. But how is that possible?<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,172r[3] (1915--0619) (NB)\",\"ger\":\"Oder können wir einen Satz wie „die Uhr liegt auf dem Tisch” ohne weiteres nach den Regeln der Logik behandeln. Nein; da sagen wir z.B. daß die Zeitangabe in dem Satze verschwiegen ist daß er nur scheinbar … etc. etc. <br>Also ehe wir ihn behandeln können müssen wir ihn wie es scheint auf eine gewisse Art und Weise umgestalten. <br>\",\"eng\":\"Or can we treat a proposition like \\\"the watch is on the table\\\" without further ado according to the rules of logic? No, here we say, for example, that the proposition’s date is omitted, that the proposition only seems to be... etc. etc. <br>So it seems we have to transform it in a specific way before we can deal with it.<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,173r[1] (1915--0619) (NB)\",\"ger\":\"Aber dies ist vielleicht nicht maßgebend, denn könnten wir nicht ebensogut unsere gewohnte <span class='underline_single'>logische</span> Schreibweise dem speziellen Satz anpassen? <br>\",\"eng\":\"But perhaps this is not decisive, for couldn’t we just as well adapt our usual <span class='underline_single'>logical</span> notation to the special proposition?<br>\",\"date\":\"1915-06-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,173r[2] (1915--0620) (NB)\",\"ger\":\"      Ja, darum handelt es sich: Können wir mit Recht die Logik wie sie etwa in den „Principia Mathematica” steht ohne weiteres auf die <span class='underline_single'>gebräuchlichen Sätze</span> anwenden?<br>\",\"eng\":\"Yes, this is the question: Can we legitimately apply logic as written down, say in <em>Principia Mathematica</em>, to <span class='underline_single'>ordin</span><span class='underline_single'>a</span><span class='underline_single'>r</span><span class='underline_single'>y propositions</span> without further ado?<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,173r[3] (1915--0620) (NB)\",\"ger\":\"<span class='underline_single'>Natürlich</span> dürfen wir nicht außer acht lassen was in unseren Sätzen durch Endungen, Vorsilben Umlaute etc. etc. <span class='underline_single'>ausgedrückt</span> ist. <br>\",\"eng\":\"Of <span class='underline_single'>course</span>, we shouldn’t disregard what is <span class='underline_single'>expressed</span> in our propositions by means of endings, prefixes, suffixes, etc., etc.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,174r[1] (1915--0620) (NB)\",\"ger\":\"<span class='underline_single'>Aber wir wenden ja die Mathematik, und zwar </span><span class='underline_single'>mit bestem Erfolge</span><span class='underline_single'>, auf die gewöhnlichen Sätze nämlich auf die der Physik an!! </span><br>\",\"eng\":\"<span class='underline_single'>But we </span><span class='underline_single'>do </span><span class='underline_single'>apply mathematics, and </span><span class='underline_single'>moreover with</span><span class='underline_single'> the </span><span class='underline_single'>utmost</span><span class='underline_single'> </span><span class='underline_single'>effectiveness</span><span class='underline_single'>, to ordinary propositions, namely to those of physics</span><span class='underline_single'>.</span><br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,174r[2] (1915--0620) (NB)\",\"ger\":\"Aber wie merkwürdig: in den bekannten Lehrsätzen der mathematischen Physik erscheinen weder Dinge noch Funktionen noch Relationen noch sonst logische Gegenstandsformen!! Statt der Dinge haben wir da Zahlen und die Funktionen & Relationen sind durchweg rein mathematisch!! <br>\",\"eng\":\"But it is remarkable: in the well-known theorems of mathematical physics there appear neither things nor functions nor relations nor any other logical forms of object! Instead of things what we have here are numbers, and the functions and relations are purely mathematical throughout!<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,174r[3] (1915--0620) (NB)\",\"ger\":\"Aber es ist doch Tatsache daß diese Sätze auf die solide Wirklichkeit angewandt werden. <br>\",\"eng\":\"But surely it is a fact that these propositions are applied to solid reality.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\" 2·0126\",\"pt-page\":\"87[6]\",\"tlp-number\":\"2·0124\",\"cross-references\":\"20.6.15 (5, 10)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,175r[1] (1915--0620) (NB)\",\"ger\":\"Die Variablen in jenen Lehrsätzen stehen durchaus nicht – wie man häufig sagt – für <span class='underline_single'>Längen, Gewichte</span>, Zeiträume etc. sondern sie stehen einfach für Zahlen und weiter nichts. <br>\",\"eng\":\"The variables in those theorems definitely do not—as it is often said—stand for <span class='underline_single'>lengths, weights</span>, periods of time etc. Rather, they simply stand for numbers and nothing else.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,175r[2] (1915--0620) (NB)\",\"ger\":\"Wenn ich nun aber die Zahlen anwenden will dann komme ich zu den Relationen den Dingen etc. etc. Ich sage z.B.: diese Länge ist 5 Meter und spreche da von Relationen und Dingen, und zwar in dem <span class='underline_single'>ganz gewöhnlichen</span> Sinne. <br>\",\"eng\":\"However, if I now want to apply numbers then I come to relations, things etc. etc.. I say, for instance “This length is 5 meters”, and here I am talking of relations and things, and in the <span class='underline_single'>completely ordinary</span> sense at that.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,175r[3] (1915--0620) (NB)\",\"ger\":\"Wir kommen hier zur Frage nach der Bedeutung der Variablen in den physikalischen Sätzen. Diese sind ja keine Tautologien. <br>\",\"eng\":\"Here we come to the question about the meaning of variables in propositions of physics. These are, after all, no tautologies.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,176r[1] (1915--0620) (NB)\",\"ger\":\"Der physikalische Satz ohne Angabe seiner Anwendung ist offenbar sinnlos. Was hätte es für einen Sinn zu sagen: „k = m ∙ p”? <br>     Also handelt der vervollständigte physikalische Satz doch von den Dingen Relationen u.s.w. (Was eigentlich zu erwarten war.) <br>\",\"eng\":\"A proposition of physics is obviously senseless if its application is not specified. What sort of sense would it have to say: \\\"k = m ∙ p\\\"? <br>     So the complete physical proposition does deal with things, relations, and so on, after all. (Which was to be expected, for that matter.)<br>\",\"date\":\"1915-06-20\",\"pt-number\":\" 2·0126\",\"pt-page\":\"87[6]\",\"tlp-number\":\"2·0124\",\"cross-references\":\"20.6.15 (5, 10)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,176r[2] (1915--0620) (NB)\",\"ger\":\"Es liegt nun alles darin daß ich die Zahlen auf die gewöhnlichen Dinge etc. anwende, was wieder nicht mehr sagt als daß in unseren ganz gewöhnlichen Sätzen Zahlen vorkommen. <br>\",\"eng\":\"Now everything turns on my applying numbers to ordinary things etc., which again says no more than that numbers occur in our quite ordinary sentences.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,176r[3] et 177r[1] (1915--0620) (NB)\",\"ger\":\"Die Schwierigkeit ist eigentlich die: daß wenn wir auch einen <span class='underline_single'>ganz bestimmten</span> Sinn ausdrücken wollen die Möglichkeit / besteht daß wir dieses Ziel verfehlen. Es scheint also sozusagen daß wir keine Garantie haben daß unser Satz wirklich ein Bild der Wirklichkeit ist. <br>\",\"eng\":\"Actually, the difficulty is this: even if we want to express a <span class='underline_single'>completely</span><span class='underline_single'> definite</span> sense, we may miss this goal. So it seems, so to speak, that we have no guarantee that our proposition is really a picture of reality.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,177r[2] (1915--0620) (NB)\",\"ger\":\"Die Zerlegung der Körper in <span class='underline_single'>materielle Punkte</span> wie wir sie in der Physik haben ist weiter nichts als die Analyse in <span class='underline_single'>einfache Bestandteile</span>. <br>\",\"eng\":\"The decomposition of bodies into <span class='underline_single'>material points</span>, as we have it in physics, is nothing more than an  analysis into <span class='underline_single'>simple constituents</span>.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,177r[3] et 178r[1] (1915--0620) (NB)\",\"ger\":\"Aber sollte es möglich sein daß die von uns gewöhnlich gebrauchten Sätze gleichsam nur einen unvollkommenen Sinn haben (ganz abgesehen von ihrer Wahr- oder Falschheit) und die physikalischen Sätze sich sozusagen  / dem Stadium nähern wo ein Satz wirklich einen vollkommenen Sinn hat?? <br>\",\"eng\":\"But could it be possible that sentences in ordinary use have, as it were, only an incomplete sense (not to speak of their truth or falsity) and the propositions of physics are getting closer, so to speak, to the state where a proposition really has a complete sense??<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,178r[2] (1915--0620) (NB)\",\"ger\":\"Wenn ich sage „das Buch liegt auf dem Tisch” hat dies wirklich einen vollkommen klaren Sinn? (Eine <span class='underline_double'>höchst</span> bedeutungsvolle Frage!) <br>Der Sinn muß doch klar sein denn <span class='underline_single'>etwas</span> meinen wir doch mit dem Satz und soviel als wir <span class='underline_single'>sicher</span> meinen muß doch klar sein. <br>\",\"eng\":\"When I say \\\"The book is lying on the table\\\" does this really have a completely clear sense? (An <span class='underline_double'>extremely</span> important question!) <br>The sense must surely be clear, for we surely mean <span class='underline_single'>something</span> by the proposition and as much as we <span class='underline_single'>certainly</span> mean must surely be clear.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,178r[3] et 179r[1] (1915--0620) (NB)\",\"ger\":\"Wenn der Satz „das Buch liegt auf dem Tisch” einen klaren Sinn hat, dann muß ich, was immer auch <span class='underline_single'>der Fall ist</span>, sagen können ob der Satz wahr oder falsch ist. Es könnten aber sehr wohl <span class='underline_single'>Fälle</span> eintreten in welchen ich nicht ohne  / Weiteres sagen könnte ob das Buch noch „auf dem Tisch liegend” zu nennen ist. Also? <br>\",\"eng\":\"If the proposition \\\"The book is on the table\\\" has a clear sense, then I must, whatever<span class='underline_single'> is the case</span>, be able to say whether the proposition is true or false. However, there could very well be <span class='underline_single'>cases</span> in which I couldn’t say without further ado whether the book is still to be called \\\"lying on the table\\\". Well—?<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,179r[2] (1915--0620) (NB)\",\"ger\":\"Ist also etwa der Fall der daß ich zwar genau weiß was ich sagen will aber dann im Ausdrucke Fehler mache? <br>\",\"eng\":\"So is this a case in which I know exactly what I want to say, but then express it mistakenly?<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,179r[3] (1915--0620) (NB)\",\"ger\":\"Oder kann diese Unsicherheit <span class='underline_double'>auch</span> noch in den Satz eingeschlossen werden? <br>\",\"eng\":\"Or can this uncertainty be included in the proposition <span class='underline_single'>as </span><span class='underline_single'>well</span>?<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,179r[4] et 180r[1] (1915--0620) (NB)\",\"ger\":\"Aber es kann auch sein daß der Satz „das Buch liegt auf dem Tisch” meinen Sinn zwar vollkommen darstellt daß ich aber die Worte z.B. darauf-liegen hier in einer <span class='underline_single'>speziellen</span> Bedeutung gebrauche  / und es anderswo eine andere Bedeutung hat. Ich meine mit dem Verbum etwa die ganz spezielle Relation die das Buch jetzt wirklich zu dem Tisch hat. <br>\",\"eng\":\"But it could also be that the proposition \\\"The book is lying on the table\\\" represents my sense perfectly, but I use the words, e.g., “lying on” with a <span class='underline_single'>special</span> meaning here, and that they have another meaning elsewhere. What I mean by the verb is, say, a quite special relation which the book now actually has to the table.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,180r[2] (1915--0620) (NB)\",\"ger\":\"Sind also im Grunde die Sätze der Physik und die Sätze des gewöhnlichen Lebens gleich scharf und besteht der Unterschied nur in der konsequenteren Anwendung der Zeichen in der Sprache der Wissenschaft?? <br>\",\"eng\":\"Then are the propositions of physics and the propositions of ordinary life in principle equally sharp, and does the difference consist only in the more consistent application of signs in the language of science??<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,180r[3] (1915--0620) (NB)\",\"ger\":\"     Kann man davon reden oder nicht daß ein Satz einen mehr oder weniger scharfen Sinn hat?? <br>\",\"eng\":\"     Is it or isn’t it possible to talk of a proposition's having a more or less sharp sense??<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,181r[1] (1915--0620) (NB)\",\"ger\":\"Es scheint klar daß das was wir <span class='underline_double'>meinen</span> immer „<span class='underline_single'>scharf</span>” sein muß. <br>     Unser Ausdruck dessen was wir meinen kann wieder nur richtig oder falsch sein. Und nun können noch die Worte konsequent oder inkonsequent angewendet sein. Eine andere Möglichkeit scheint es nicht zu geben. <br>\",\"eng\":\"It seems clear that what we <span class='underline_double'>mean</span> must always be \\\"<span class='underline_single'>sharp</span>\\\". <br>     Once more, our expression of what we mean can only be right or wrong. And now the words can, in addition be applied consistently or inconsistently. There doesn’t seem to be any other possibility.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,181r[2] (1915--0620) (NB)\",\"ger\":\"Wenn ich z.B. sage „der Tisch ist einen Meter lang” so ist es höchst fraglich was ich damit meine. Aber ich meine wohl der Abstand <span class='underline_double'>dieser</span> zwei Punkte ist ein Meter und die Punkte gehören zum Tisch. <br>\",\"eng\":\"If I say, for example, \\\"the table is one meter long,\\\" it is highly debatable what I mean by that. But I presumably mean the distance between <span class='underline_double'>these</span> two points is one meter and that the points belong to the table.<br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,182r[1] (1915--0620) (NB)\",\"ger\":\"Wir sagten die Mathematik würde ja schon mit Erfolg auf gewöhnliche Sätze angewandt aber die Sätze der Physik handeln durchwegs von anderen Gegenständen als denen unserer gewöhnlichen Sprache! Müssen unsere Sätze <span class='underline_single'>so</span> präpariert werden um mathematisch behandelt werden zu können? Offenbar ja! Wenn Quantitäten in Frage kommen so würde z.B. ein Ausdruck wie „die Länge dieses Tisches” nicht genügen. Diese Länge müßte definiert werden etwa als Abstand zweier Flächen etc. etc. <br>\",\"eng\":\"We said that mathematics has already been applied with success to ordinary propositions, but propositions in physics consistently deal with objects other than those of our ordinary language. Must our propositions undergo <span class='underline_single'>such</span> preparation so that they can be handled  mathematically? Yes, clearly! When quantities are in question then an expression like, e.g., \\\"the length of this table\\\" would not be enough. This length would have to be defined, say, as the distance between two surfaces etc. etc. <br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,182r[2] et 183r[1] (1915--0620) (NB)\",\"ger\":\"Ja, die mathematischen Wissenschaften  / unterscheiden sich von den nicht mathematischen dadurch daß jene von Dingen handeln von welchen die gewöhnliche Sprache nicht spricht während diese von den allgemein bekannten Dingen redet. —— <br>\",\"eng\":\"Yes, the mathematical sciences differ from the non-mathematical ones in that the former treat of things of which ordinary language does not speak, while the latter talk of things that are generally familiar. ——  \\t\\t <br>\",\"date\":\"1915-06-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,183r[2] (1915--0621) (NB)\",\"ger\":\"Unsere Schwierigkeit war doch die daß wir immer von einfachen Gegenständen sprachen und nicht einen einzigen anzuführen wußten. <br>\",\"eng\":\"Our difficulty was that we were always speaking of simple objects and didn’t know of a single instance.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,183r[3] (1915--0621) (NB)\",\"ger\":\"Wenn der Punkt im Raume nicht existiert dann existieren auch seine Koordinaten nicht und wenn die Koordinaten existieren dann existiert auch der Punkt.—So ist es in der Logik. <br>\",\"eng\":\"If a point in space doesn’t exist, then its co-ordinates don’t exist either, and if the coordinates exist then the point exists too. —That's how it is in logic.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,184r[1] (1915--0621) (NB)\",\"ger\":\"Das einfache Zeichen ist <span class='underline_single'>wesentlich einfach</span>. <br>     Es fungiert als einfacher Gegenstand. (Was heißt das?) <br>     <span class='underline_single'>Seine Zusammensetzung</span> wird vollkommen <span class='underline_single'>gleichgültig</span>. Sie verschwindet uns aus den Augen. <br>A simple sign is <span class='underline_single'>essentially simple</span>. <br>\",\"eng\":\"     It functions as a simple object. (What does that mean?) <br>     <span class='underline_single'>Its composition</span> becomes completely <span class='underline_single'>indifferent</span>. It disappears from our sight.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,184r[2] (1915--0621) (NB)\",\"ger\":\"Es scheint immer so, als ob es komplexe Gegenstände gäbe die als einfache fungieren, und dann auch <span class='underline_single'>wirklich</span> einfache, wie die materiellen Punkte der Physik, etc. <br>\",\"eng\":\"It always looks as if there were complex objects that function as simples, and then also <span class='underline_single'>really</span> simple ones, such as the material points of physics, etc.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,184r[3] et 185r[1] (1915--0621) (NB)\",\"ger\":\"Daß ein Name einen komplexen Gegenstand bezeichnet sieht man aus einer Unbestimmtheit in den Sätzen in welchen er vorkommt, die  / eben von der Allgemeinheit solcher Sätze herrührt. Wir <span class='underline_single'>wissen</span> durch diesen Satz ist noch nicht alles bestimmt. Die Allgemeinheitsbezeichnung <span class='underline_single'>enthält</span> ja ein Urbild. <br>\",\"eng\":\"When a name signifies a complex, this can be seen in an indeterminateness in the propositions in which it occurs. That is due to the generality of such propositions. We <span class='underline_single'>know</span><em> </em>that not everything is already specified by this proposition. After all, the sign for generality <span class='underline_single'>contains</span><em> </em>a prototype. [<em>Cf</em>. 3.24 (3).]<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"3·20106\",\"pt-page\":\"58[9]\",\"tlp-number\":\"3·24 (3)*\",\"cross-references\":\"21.6.15 (7,12)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,185r[2] (1915--0621) (NB)\",\"ger\":\"Alle unsichtbaren Massen etc. etc. müssen unter die Allgemeinheitsbezeichnung kommen.<br>\",\"eng\":\"\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,185r[3] (1915--0621) (NB)\",\"ger\":\"Wie ist das wenn sich Sätze der Wahrheit nähern? <br>\",\"eng\":\"What is for propositions to get closer to the truth?<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,185r[4] et 186r[1] (1915--0621) (NB)\",\"ger\":\"Aber die Logik wie sie etwa in den „Principia Mathematica” steht läßt sich ganz gut auf unsere gewöhnlichen Sätze anwenden z.B. aus  / „Alle Menschen sind sterblich” und „Sokrates ist ein Mensch” folgt nach dieser Logik „Sokrates ist sterblich” was offenbar richtig ist obwohl ich, ebenso offenbar, nicht weiß welche Struktur das Ding Sokrates oder die Eigenschaft der Sterblichkeit hat. Diese fungieren eben hier als einfache Gegenstände. <br>\",\"eng\":\"But logic as it stands in <em>Principia Mathematica</em><em>, </em>say, can quite well be applied to our ordinary propositions. For instance, according to this logic, from \\\"All men are mortal\\\" and \\\"Socrates is a man\\\", \\\"Socrates is mortal\\\" follows.  This is obviously correct although I, equally obviously, do not know what structure is possessed by the thing Socrates or the property of mortality. Here they just function as simple objects.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,186r[2] (1915--0621) (NB)\",\"ger\":\"Offenbar garantiert schon der Umstand der es möglich macht daß gewisse Formen durch eine Definition in einen Namen projiziert werden; dafür daß dieser Name dann auch wie ein wirklicher behandelt werden kann. <br>\",\"eng\":\"Obviously the circumstance that makes it possible for certain forms to be projected by means of a definition into a name guarantees of itself that this name can then also be treated like a real one.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\" 3·20107\",\"pt-page\":\"59[2]\",\"tlp-number\":\"3·24 (4)\",\"cross-references\":\"21.6.15 (11)+22.6.15 (14)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,187r[1] (1915--0621) (NB)\",\"ger\":\"Es ist ja dem klar Sehenden offenbar daß ein Satz wie „Die Uhr liegt auf dem Tisch” eine Menge Unbestimmtheit enthält trotzdem seine Form äußerlich vollkommen klar und einfach erscheint. Wir sehen also daß diese Einfachheit nur konstruiert ist. <br>\",\"eng\":\"To anyone that sees clearly, it is obvious that a proposition like \\\"The watch is lying on the table\\\" contains a multitude of indeterminateness in spite of its form outwardly appearing to be perfectly clear and simple. So we see that this simplicity is only a construal.<br>\",\"date\":\"1915-06-21\",\"pt-number\":\"3·20106\",\"pt-page\":\"58[9]\",\"tlp-number\":\"3·24 (3)*\",\"cross-references\":\"21.6.15 (7,12)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,187r[2] (1915--0622) (NB)\",\"ger\":\"Es ist also auch <span class='underline_single'>dem</span> <span class='underline_double'>unbefangenen</span> <span class='underline_single'>Geist</span> klar daß der Sinn des Satzes „die Uhr liegt auf dem Tisch” komplizierter ist als der Satz selbst. <br>\",\"eng\":\"Then it is also clear to <span class='underline_single'>the</span> <span class='underline_double'>un</span><span class='underline_double'>preju</span><span class='underline_double'>d</span><span class='underline_double'>iced</span> <span class='underline_single'>mind</span> that the sense of the proposition \\\"The watch is lying on the table\\\" is more complicated than the proposition itself.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,187r[3] et 188r[1] (1915--0622) (NB)\",\"ger\":\"Die Abmachungen unserer Sprache sind außerordentlich kompliziert. Es wird enorm viel zu jedem Satz dazugedacht was  / nicht gesagt wird. (Diese Abmachungen sind ganz wie die „Conventions” Whiteheads. Sie sind wohl Definitionen mit <span class='underline_single'>einer gewissen Allgemeinheit der Form</span>.) <br>\",\"eng\":\"The conventions of our language are extraordinarily complicated. There is a great deal added in thought to each proposition that is not said. (These arrangements are quite like Whitehead's \\\"Conventions\\\". They are surely definitions <span class='underline_single'>with </span><span class='underline_single'>a certain</span><span class='underline_single'> generality of form</span>).<br>\",\"date\":\"1915-06-22\",\"pt-number\":\" 3·201412\",\"pt-page\":\"95[4]\",\"tlp-number\":\"4·002 (5)** \",\"cross-references\":\"22.6.15 (2)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,188r[2] (1915--0622) (NB)\",\"ger\":\"Ich will nur die Vagheit der gewöhnlichen Sätze rechtfertigen, denn sie <span class='underline_single'>läßt</span> sich rechtfertigen. <br>\",\"eng\":\"I want only to justify the vagueness of ordinary sentences, for it <span class='underline_single'>can</span> be justified.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,188r[3] et 188v[1] (1915--0622) (NB)\",\"ger\":\"Es ist klar: <span class='underline_single'>Ich weiß</span> was ich mit dem vagen Satz <span class='underline_single'>meine</span>. Nun versteht es aber ein Anderer nicht und sagt: „ja aber wenn du das meinst, hättest du – das und das – dazu setzen müssen”; und nun wird es noch einer nicht verstehen und den Satz noch ausführlicher verlangen. Ich werde dann antworten: Ja <span class='underline_double'>das</span> versteht <span class='underline_single'>sich doch von</span> <span class='underline_double'>selbst</span>.<br>     Sage ich jemand „die Uhr liegt auf dem Tisch” und nun sagt er „ja aber wenn die Uhr so läge würdest Du da  / auch noch sagen „sie liegt auf dem Tisch””. Und ich würde unsicher. Das zeigt, daß ich nicht wüßte was ich mit „liegen” <span class='underline_single'>im </span><span class='underline_single'>allgemeinen</span> meinte. Wenn man mich so in die Enge triebe um mir zu zeigen daß ich nicht wisse was ich meine, würde ich sagen: „<span class='underline_single'>Ich weiß</span> was ich meine; ich meine eben <span class='underline_double'>das</span>” und würde dabei etwa auf den betreffenden Komplex mit dem Finger zeigen. Und in diesem Komplex habe ich nun tatsächlich die zwei Gegenstände in einer Relation. – Das heißt aber <span class='underline_single'>wirklich</span> nur: Die Tatsache läßt sich <span class='underline_double'>irgendwie</span> auch durch diese Form abbilden. <br>\",\"eng\":\"It’s clear: <span class='underline_single'>I know</span> what I <span class='underline_single'>mean</span> by a vague proposition. But now someone else doesn’t understand it and says: \\\"Yes, but if you mean that, you should have added such and such\\\"; and now another person won’t understand it and will demand a yet more detailed proposition. I shall then reply: Now <span class='underline_double'>that</span> <span class='underline_single'>obviously</span> goes without saying. <br>    I tell someone \\\"The watch is lying on the table\\\" and now he says \\\"Yes, but if the watch were lying like that, would you still say ‘it is lying on the table’?\\\" And I would become uncertain. This shows that I didn’t know what I meant by \\\"lying\\\" <span class='underline_single'>in general</span>. If someone cornered me in this way to show me that I didn’t know what I meant, I would say: \\\"<span class='underline_single'>I know</span> what I mean; I mean just <span class='underline_double'>th</span><span class='underline_double'>is</span>\\\" and would point to the complex in question with my finger. And in this complex I do actually have the two objects in a relation. – But all this <span class='underline_single'>really</span> means is: The fact can <span class='underline_double'>somehow</span> be depicted by using this form too. <br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,188v[2] (1915--0622) (NB)\",\"ger\":\"Wenn ich dies nun tue und die Gegenstände mit <span class='underline_single'>Namen</span> bezeichne, werden sie dadurch einfach? <br>     Aber doch ist dieser Satz ein Bild jenes Komplexes. <br>\",\"eng\":\"Now if I do this and refer to the objects by means of <span class='underline_single'>names</span>, does that make them simple? <br>     Of course this proposition is still a picture of that complex.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,188v[3] (1915--0622) (NB)\",\"ger\":\"Dieser Gegenstand ist für <span class='underline_single'>mich einfach</span>! <br>\",\"eng\":\"This object is <span class='underline_single'>simple</span> for <span class='underline_single'>me</span>!<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189r[1] (1915--0622) (NB)\",\"ger\":\"Nenne ich z.B. irgend einen Stab „A” eine Kugel „B” so kann ich von A sagen es lehnt an der Wand aber nicht von B. Hier macht sich die interne Natur von A und B bemerkbar. <br>\",\"eng\":\"If, for instance, I call some rod \\\"A\\\", and a ball \\\"B\\\", then I can say that A is leaning against the wall, but not B. Here the internal nature of A and B makes itself felt.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189r[2] (1915--0622) (NB)\",\"ger\":\"Wenn ein Name einen Gegenstand bezeichnet so steht er damit in einer Beziehung zu ihm die ganz von der logischen Art des Gegenstandes bedingt ist und diese wieder charakterisiert. <br>\",\"eng\":\"If a name refers to an object then it stands in a relationship to it which is completely determined by the logical kind of the object and which characterizes that logical kind.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189r[3] (1915--0622) (NB)\",\"ger\":\"Und das ist klar daß der Gegenstand eine bestimmte logische Art haben muß er ist so zusammengesetzt oder so einfach als er eben ist. <br>\",\"eng\":\"And it is clear that the object must be of a particular logical kind,  it is just as complex, or as simple, as it is.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189r[4] (1915--0622) (NB)\",\"ger\":\"„Die Uhr <span class='underline_single'>sitzt</span> auf dem Tisch” ist sinnlos! <br>\",\"eng\":\"\\\"The watch <span class='underline_single'>is sit</span><span class='underline_single'>ting</span> on the table\\\" is senseless!<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189r[5] et 189v[1] (1915--0622) (NB)\",\"ger\":\"Nur der zusammengesetzte Teil des Satzes kann wahr oder falsch  / sein. <br>\",\"eng\":\"Only the composite part of the proposition can be true or false.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-102,189v[2] (1915--0622) (NB)\",\"ger\":\" Der Name faßt seine ganze komplexe Bedeutung in Eins zusammen. <br>\",\"eng\":\"The name condenses its whole complex meaning into one.<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"3·20107\",\"pt-page\":\"59[2]\",\"tlp-number\":\"3·24 (4)\",\"cross-references\":\"21.6.15 (11)+22.6.15 (14)+\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,1r[1] (1916--0415) (NB)\",\"ger\":\"Nur was wir selbst konstruieren, können wir voraussehen! <br>\",\"eng\":\"We can anticipate only what we ourselves construct. [<em>See</em> 5.556.]<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"5·412\",\"pt-page\":\"81[4]\",\"tlp-number\":\"5·556 b 1\",\"cross-references\":\"15.4.16 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,1r[2] (1916--0415) (NB)\",\"ger\":\"Aber wo bleibt da der Begriff des einfachen Gegenstandes? <br>\",\"eng\":\"But then where does that leave the concept of a simple object?<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,1r[3] (1916--0415) (NB)\",\"ger\":\"Dieser Begriff kommt hier überhaupt noch nicht in Betracht. <br>\",\"eng\":\"This concept has not so far been taken into consideration here at all.<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,1r[4] (1916--0415) (NB)\",\"ger\":\"Wir müssen die einfachen Funktionen darum konstruieren können weil wir jedem Zeichen eine Bedeutung geben können müssen. <br>\",\"eng\":\"We must be able to construct simple functions because we must be able to give each sign a meaning.<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,1r[5] (1916--0415) (NB)\",\"ger\":\" Denn das einzige Zeichen welches für seine Bedeutung bürgt ist Funktion und Argument. <br>\",\"eng\":\"For the only sign which guarantees its meaning is function and argument.<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,2r[1] (1916--0416)\",\"ger\":\"φx ∙ ψy <br>\",\"eng\":\"φx ∙ ψy <br>\",\"date\":\"1916-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,2r[2] (1916--0416) (NB)\",\"ger\":\"<span class='underline_single'>Jeder</span> einfache Satz läßt sich auf die Form φx bringen. <br>\",\"eng\":\"<span class='underline_single'>Any</span> simple proposition can be brought into the form φx.<br>\",\"date\":\"1916-04-16\",\"pt-number\":\"4·43012\",\"pt-page\":\"78[11]\",\"tlp-number\":\"4·5 (3a) \",\"cross-references\":\"16.4.16 (1)+   21.11.16 (1)+   ???\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,2r[3] (1916--0416) (NB)\",\"ger\":\"Darum darf man aus dieser Form alle einfachen Sätze zusammenstellen. <br>\",\"eng\":\"That’s why one may compose all simple propositions from this form.<br>\",\"date\":\"1916-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,2r[4] (1916--0416) (NB)\",\"ger\":\" / \\\\\\tAngenommen mir wären <span class='underline_single'>alle</span> einfachen Sätze gegeben: Dann läßt sich einfach fragen welche Sätze kann ich aus ihnen bilden. Und das sind <span class='underline_single'>alle</span> Sätze und <span class='underline_single'>so</span> sind sie <span class='underline_single'>begrenzt</span>. <br>\",\"eng\":\"Suppose I was given <span class='underline_single'>all</span><em> </em>simple propositions. Then I can simply ask what propositions I can construct out of them. And these are <span class='underline_single'>all</span><em> </em>the propositions and <span class='underline_single'>this</span><em> </em>is how they are <span class='underline_single'>delimited</span>. [<em>See</em> 4.51.]<br>\",\"date\":\"1916-04-16\",\"pt-number\":\"4·43013\",\"pt-page\":\"81[5]\",\"tlp-number\":\"4·51* \",\"cross-references\":\"16.4.16 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,2r[5] et 3r[1] (1916--0416) (NB)\",\"ger\":\"/ F (x̂(φx) . = . φ ≡ ψ ⊃ψ Fψ <br>Φ≡ψ .⊃ψ. [F (x̂ (ψx)) = ψ ≡ x ⊃xFx] = <br>\",\"eng\":\"/ F (x̂(φx) . = . φ ≡ ψ ⊃ψ Fψ <br>Φ≡ψ .⊃ψ. [F (x̂ (ψx)) = ψ ≡ x ⊃xFx] = <br>\",\"date\":\"1916-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,3r[2] (1916--0417) (NB)\",\"ger\":\"Die obige Definition kann in ihrer Allgemeinheit nur eine Schriftzeichenregel sein die mit dem Sinne der Zeichen nichts zu tun hat. <br>     Aber kann es eine solche Regel geben? <br>\",\"eng\":\"The above definition can in its generality only be a rule for a written notation which has nothing to do with the sense of the signs. <br>     But can there be such a rule?<br>\",\"date\":\"1916-04-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,3r[3] (1916--0417) (NB)\",\"ger\":\"Nur dann ist die Definition möglich wenn sie selbst kein Satz ist. <br>     Dann kann ein Satz nicht von allen Sätzen handeln, wohl aber eine Definition. <br>\",\"eng\":\"The definition is only possible if it is itself not a proposition.<br>In that case a proposition cannot be about all propositions, while a definition can.<br>\",\"date\":\"1916-04-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,4r[1] (1916--0423) (NB)\",\"ger\":\"Die obige Definition handelt aber gar nicht von allen Sätzen denn sie enthält wesentlich wirkliche Variable. Sie ist ganz analog einer Operation als deren Basis auch ihr eigenes Resultat genommen werden kann. <br>\",\"eng\":\"However the above definition just does not deal with all propositions, for it essentially contains real variables. It is quite analogous to an operation whose own result can be taken as its basis.<br>\",\"date\":\"1916-04-23\",\"pt-number\":\" 5·00161\",\"pt-page\":\"102[5]\",\"tlp-number\":\"5·251* \",\"cross-references\":\"23.4.16+  ???\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,4r[2] (1916--0426) (NB)\",\"ger\":\"So und nur so ist das Fortschreiten von einer Type zur anderen möglich. <br>\",\"eng\":\"In this way, and only in this way, is advancing from one type to another possible. [<em>Cf</em>. 5.252.]<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"5·00162\",\"pt-page\":\"81[6]\",\"tlp-number\":\"5·252 a+ \",\"cross-references\":\"26.4.16 (1,2)**   17.8.16(1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,4r[3] (1916--0426) (NB)\",\"ger\":\" / \\\\\\tUnd man kann sagen alle Typen stehen in Hierarchien. <br>\",\"eng\":\"And one can say all types belong to hierarchies.<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"5·00162\",\"pt-page\":\"81[6]\",\"tlp-number\":\"5·252 a+ \",\"cross-references\":\"26.4.16 (1,2)**   17.8.16(1)+  ???\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,4r[4] et 5r[1] (1916--0426) (NB)\",\"ger\":\" / \\\\\\tUnd die Hierarchie ist nur möglich durch den Aufbau durch die  / Operationen. <br>\",\"eng\":\"And hierarchies are only possible only by being constructed by means of operations.<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,5r[2] (1916--0426) (NB)\",\"ger\":\"/ \\\\\\tDie empirische Realität ist begrenzt durch die Zahl der Gegenstände. <br>Die Grenze zeigt sich wieder in der Gesamtheit der einfachen Sätze. <br>\",\"eng\":\"Empirical reality is delimited by the number of objects. <br>Here too, the limit shows itself in the totality of simple propositions. [<em>See</em> 5.5561.]<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"5·413\",\"pt-page\":\"81[7]\",\"tlp-number\":\"5·5561 \",\"cross-references\":\"26.4.16 (4,5,6)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,5r[3] (1916--0426) (NB)\",\"ger\":\" / \\\\\\tDie Hierarchien sind und müssen unabhängig sein von der Realität. <br>     Die Bedeutungen ihrer Glieder werden erst durch Zuordnung der Gegenstände zu den Namen bestimmt. <br>\",\"eng\":\"Hierarchies are and must be independent of reality. [<em>See</em> 5.5561.]<br>     The meanings of their terms are only determined by correlating objects and names.<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"5·413\",\"pt-page\":\"81[7]\",\"tlp-number\":\"5·5561 \",\"cross-references\":\"26.4.16 (4,5,6)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,5r[4] et 6r[1] (1916--0427) (NB)\",\"ger\":\"     φx . ψy <br>Sagen wir ich wollte eine Funktion von 3 unter einander unauswechselbaren Argumenten  / darstellen. <br>\",\"eng\":\"     φx . ψy <br>Suppose I wanted to represent a function of 3 non-interchangeable arguments.<br>\",\"date\":\"1916-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,6r[2] (1916--0427) (NB)\",\"ger\":\"φ(x) : \\tφ( ),\\t x <br>\",\"eng\":\"φ(x) : \\tφ( ),\\t x <br>\",\"date\":\"1916-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,6r[3] (1916--0427) (NB)\",\"ger\":\"Soll nun aber in der Logik von unvertauschbaren Argumenten die Rede sein? Wenn ja, so setzt dies doch etwas über die Beschaffenheit der Realität voraus. <br>\",\"eng\":\"But should there be any mention of non-interchangeable arguments in logic? If so, this surely presupposes something about the nature of reality.<br>\",\"date\":\"1916-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,6r[4] (1916--0427)\",\"ger\":\"~(∃x).φx. ψ∃◇◇◇ψz .⊃ψ. ~(∃x) ψx <br>\",\"eng\":\"~(∃x).φx. ψ∃◇◇◇ψz .⊃ψ. ~(∃x) ψx <br>\",\"date\":\"1916-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,6r[5] et 7r[1] (1916--0506) (NB)\",\"ger\":\"/ Der ganzen Weltanschauung der Modernen liegt diese Täuschung zu Grunde, daß die sogenannten Naturgesetze die Erklärungen der Naturerscheinungen seien.<br>\",\"eng\":\"The whole modern world view is based on the illusion that the so-called laws of nature explain natural phenomena. [<em>See</em> 6.371.]<br>\",\"date\":\"1916-05-06\",\"pt-number\":\"6·371\",\"pt-page\":\"81[8]\",\"tlp-number\":\"6·371 \",\"cross-references\":\"6.5.16 (1)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,7r[2] (1916--0506) (NB)\",\"ger\":\" / \\\\\\tSo bleiben sie bei den Naturgesetzen als bei etwas <span class='underline_single'>Unantastbarem</span> stehen wie die Älteren bei Gott und dem Schicksal. <br>\",\"eng\":\"So moderns stop at the laws of nature, treating them as <span class='underline_single'>sacrosanct</span>, which is how the ancients treated God and Fate. [<em>See</em> 6.372.]<br>\",\"date\":\"1916-05-06\",\"pt-number\":\"6·372\",\"pt-page\":\"82[1]\",\"tlp-number\":\"6·372 \",\"cross-references\":\"6.5.16 (2,3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,7r[3] (1916--0506) (NB)\",\"ger\":\" / \\\\\\tUnd sie haben ja beide recht und unrecht. Die Alten sind allerdings insofern klarer als sie einen klaren Abschluß anerkannten während es bei dem neuen System scheinen soll als sei <span class='underline_single'>alles</span> begründet. <br>\",\"eng\":\"And actually they are both right, and both wrong.  But the ancients were more clear-sighted in that they recognised a distinct terminus, whereas according to the new dispensation things are supposed to look as if <span class='underline_single'>everything</span><em> </em>were explained. [<em>See</em> 6.372.]<br>\",\"date\":\"1916-05-06\",\"pt-number\":\"6·372\",\"pt-page\":\"82[1]\",\"tlp-number\":\"6·372 \",\"cross-references\":\"6.5.16 (2,3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,7r[4] et 8r[1] (1916--0511) (NB)\",\"ger\":\"Es gibt eben auch Operationen  / mit zwei Basen. Und die ‘ ∣ ’-Operation ist von dieser Art. <br>\",\"eng\":\"There are also operations with two bases. And the ' ∣ '-operation is of this kind.<br>\",\"date\":\"1916-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[2] (1916--0511) (NB)\",\"ger\":\"∣ (ξ,η) … ist ein beliebiges Glied der Reihe der Operationsresultate. <br>\",\"eng\":\"∣ (ξ,η) ... is an arbitrary term of the series of results of as operation.<br>\",\"date\":\"1916-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[3] (1916--0511) (NB)\",\"ger\":\"Ist denn (∃x) etc. wirklich eine Operation? <br>\",\"eng\":\"Then is (∃x) etc. really an operation?<br>\",\"date\":\"1916-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[4] (1916--0511) (NB)\",\"ger\":\"\",\"eng\":\"Was wäre aber ihre Basis? <br>But what would be its base?<br>\",\"date\":\"1916-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[5] (1916--0521)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-05-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[6] (1916--0524)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,8r[7] et 9r[1] et 10r[1] (1916--0525? --0611?) (NB)\",\"ger\":\"Was weiß ich über Gott und  / den Zweck des Lebens? <br>     Ich weiß daß diese Welt ist. <br>     Daß ich in ihr stehe wie mein Auge in seinem Gesichtsfeld. <br>     Daß etwas an ihr problematisch ist was wir ihren Sinn nennen. <br>     Daß dieser Sinn nicht in ihr liegt sondern außer ihr. <br>     Daß das Leben die Welt ist. <br>     Daß also Gut und Böse mit dem Sinn der Welt  / irgendwie zusammenhängt. <br>     Den Sinn des Lebens, d.i. den Sinn der Welt, können wir Gott nennen. <br>     Und das Gleichnis von Gott als einem Vater daran knüpfen. <br>     Das Gebet ist der Gedanke an den Sinn des Lebens. <br>     Ich kann die Geschehnisse der Welt nicht nach meinem Willen lenken sondern bin vollkommen machtlos. <br>     Nur so kann ich mich unabhängig von der Welt machen – und sie also doch in gewissem Sinne beherrschen – indem ich auf einen Einfluß auf die Geschehnisse verzichte. <br>\",\"eng\":\"What do I know about God and the purpose of life? <br>     I know that this world exists. <br>     That I am in it like my eye in its field of vision. <br>     That something about it is problematic, which we call its meaning.<br>     That this meaning does not reside in it but outside it. [<em>Cf</em>. 6.41.]<br>     That life is the world. [<em>Cf</em>. 5.621.]<br>     That my will pervades the world. <br>     That my will is good or evil.  <br>     That good and evil are thus somehow connected with the meaning of the world.<br>     The meaning of life, i.e. the meaning of the world, we can call God. <br>     And connect this with the comparison of God to a father.<br>     Praying is thinking about the meaning of life. <br>     I cannot control the world’s events with my will: on the contrary, I am completely powerless. <br>     Only in this way can I make myself independent of the world - and thus still control it in a certain sense - by renouncing any influence on events. <br>\",\"date\":\"1916-05-25\",\"pt-number\":\"5·33531\",\"pt-page\":\"83[8]\",\"tlp-number\":\"5·621 \",\"cross-references\":\"11.6.16 (6)+   24.7.16 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,11r[1] (1916--0705) (NB)\",\"ger\":\"Die Welt ist unabhängig von meinem Willen. <br>\",\"eng\":\"The world is independent of my will. [6.373.]<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·373\",\"pt-page\":\"82[2]\",\"tlp-number\":\"6·373 \",\"cross-references\":\"5.7.16 (1)   8.7.16 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,11r[2] (1916--0705) (NB)\",\"ger\":\" / \\\\\\tAuch wenn alles was wir wünschen geschähe so wäre dies doch nur sozusagen eine Gnade des Schicksals denn es ist kein logischer Zusammenhang zwischen Willen und Welt der dies verbürgte und den angenommenen physikalischen konnten wir doch nicht wieder wollen. <br>\",\"eng\":\"Even if all we wish for were to happen, still this would only be so by the grace of fate, so to say, for there is no logical<em> </em>connection between the will and the world that would guarantee it, and the supposed physical connection in its turn is surely not something we could will. [<em>See</em> 6.374.]<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·374\",\"pt-page\":\"82[3]\",\"tlp-number\":\"6·374* \",\"cross-references\":\"5.7.16 (2)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,11r[3] et 12r[1] (1916--0705) (NB)\",\"ger\":\" / \\\\\\tWenn das gute oder böse Wollen eine Wirkung auf die Welt hat so kann es sie nur auf die Grenzen der Welt haben, / nicht auf die Tatsachen, auf das was durch die Sprache nicht abgebildet sondern nur in der Sprache gezeigt werden kann. <br>\",\"eng\":\"If good or bad willing has an effect on the world, it can only have an effect on the limits of the world, on what cannot be depicted by language but can only can be shown in language, not on the facts. [<em>Cf</em>. 6.43 (1).]<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·44\",\"pt-page\":\"82[4]\",\"tlp-number\":\"6·43 (1)** \",\"cross-references\":\"5.7.16 (3)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,12r[2] (1916--0705) (NB)\",\"ger\":\" / \\\\\\tKurz die <span class='underline_single'>Welt</span> muß dann dadurch überhaupt eine andere werden. <br>\",\"eng\":\"In short, the <span class='underline_single'>world</span> will in this way have to become entirely different in kind. [<em>See</em> 6.43 (2).]<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·441\",\"pt-page\":\"82[5]\",\"tlp-number\":\"6·43 (2) \",\"cross-references\":\"5.7.16 (4,5)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,12r[3] (1916--0705) (NB)\",\"ger\":\" / \\\\\\tSie muß sozusagen als Ganzes zunehmen oder abnehmen. Wie durch Dazukommen oder Wegfallen eines Sinnes. <br>\",\"eng\":\"It must, so to speak, wax or wane as a whole. As if by adding or losing meaning.<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·441\",\"pt-page\":\"82[5]\",\"tlp-number\":\"6·43 (2) \",\"cross-references\":\"5.7.16 (4,5)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,12r[4] (1916--0705) (NB)\",\"ger\":\" / \\\\\\tWie auch beim Tode die Welt sich nicht ändert, sondern aufhört zu sein. <br>\",\"eng\":\"Similarly, in death the world does not change, but ceases to exist. [<em>See </em>6.431.]<br>\",\"date\":\"1916-07-05\",\"pt-number\":\"6·442\",\"pt-page\":\"83[1]\",\"tlp-number\":\"6·431 \",\"cross-references\":\"5.7.16 (6)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,13r[1] (1916--0706) (NB)\",\"ger\":\"Und insofern hat wohl auch Dostojewski recht wenn er sagt daß der welcher glücklich ist den Zweck des Daseins erfüllt.<br>\",\"eng\":\"And in this respect Dostoevsky is surely right when he says that he who is happy is fulfilling the purpose of existence.<br>\",\"date\":\"1916-07-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,13r[2] (1916--0706) (NB)\",\"ger\":\"Oder man könnte auch so sagen der erfüllt den Zweck des Daseins der keinen Zweck außer dem Leben mehr braucht. Das heißt nämlich der befriedigt ist. <br>\",\"eng\":\"Or one could also say that he who fulfills the purpose of existence does not need any purpose beyond life. That is to say, the one who is satisfied.<br>\",\"date\":\"1916-07-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,13r[3] (1916--0706) (NB)\",\"ger\":\"\",\"eng\":\"The solution of the problem of life is felt once this problem is disappearing. [6.521 (1).]<br>\",\"date\":\"1916-07-06\",\"pt-number\":\"6·521\",\"pt-page\":\"83[2]\",\"tlp-number\":\"6·521 (1) \",\"cross-references\":\"6.7.16 (3)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,13r[4] et 14r[1] (1916--0706) (NB)\",\"ger\":\"Kann man aber so leben daß das Leben aufhört problematisch zu sein? Daß / man im Ewigen <span class='underline_single'>lebt</span> und nicht in der Zeit? <br>\",\"eng\":\"But can one live in such a way that life ceases to be problematic? That one <span class='underline_single'>lives</span> in eternity and not in time?<br>\",\"date\":\"1916-07-06\",\"pt-number\":\" 6·4422\",\"pt-page\":\"83[5]\",\"tlp-number\":\"6·4311 (2) \",\"cross-references\":\"6.7.16 (4)+   8.7.16 (16)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,14r[2] (1916--0707) (NB)\",\"ger\":\"Ist nicht dies der Grund warum Menschen denen der Sinn des Lebens nach langen Zweifeln klar wurde warum diese dann nicht sagen konnten worin dieser Sinn bestand. <br>\",\"eng\":\"Isn’t this why those to whom, after prolonged doubts, the meaning of life became clear have then been unable to say what that meaning amounted to? [<em>See</em> 6.521 (2).]<br>\",\"date\":\"1916-07-07\",\"pt-number\":\"6·5211\",\"pt-page\":\"83[3]\",\"tlp-number\":\"6·521 (2)* \",\"cross-references\":\"(11.6.16 (10)+)   7.7.16 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,14r[3] (1916--0707) (NB)\",\"ger\":\"Wenn ich mir eine „<span class='underline_single'>Art</span> von Gegenständen” denken kann ohne zu wissen ob es solche Gegenstände gibt so muß ich mir ihr Urbild konstruiert haben. <br>\",\"eng\":\"If I can imagine a \\\"<span class='underline_single'>kind</span> of object\\\" without knowing whether such objects exist, then I must have constructed their prototype for myself.<br>\",\"date\":\"1916-07-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,14r[4] (1916--0707) (NB)\",\"ger\":\"Beruht hierauf nicht die Methode der Mechanik? <br>\",\"eng\":\"Isn't the method of mechanics based on this?<br>\",\"date\":\"1916-07-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,14r[5] et 15r[1] (1916--0708) (NB)\",\"ger\":\"An einen Gott glauben heißt die Frage nach  / dem Sinne des Lebens verstehen. <br>\",\"eng\":\"To believe in a God means to understand the question of the meaning of life.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,15r[2] (1916--0708) (NB)\",\"ger\":\"An einen Gott glauben heißt sehen daß es mit den Tatsachen der Welt noch nicht abgetan ist. <br>\",\"eng\":\"To believe in a God means to see that the facts of the world are not the end of the matter.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,15r[3] (1916--0708) (NB)\",\"ger\":\"An Gott glauben heißt sehen daß das Leben einen Sinn hat. <br>\",\"eng\":\"To believe in God means to see that life has a meaning.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,15r[4] (1916--0708) (NB)\",\"ger\":\"Die Welt ist mir <span class='underline_single'>gegeben</span>, d.h. mein Wille tritt an die Welt ganz von außen als an etwas Fertiges heran. <br>\",\"eng\":\"The world is <span class='underline_single'>given</span> to me, i.e. my will enters the world completely from outside as into something that is already complete.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\" 6·373\",\"pt-page\":\"82[2]\",\"tlp-number\":\"6·373 \",\"cross-references\":\"5.7.16 (1)   8.7.16 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,15r[5] (1916--0708) (NB)\",\"ger\":\"(Was mein Wille ist das weiß ich noch nicht.) <br>\",\"eng\":\"(What my will is I don’t yet know.)<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,15r[6] et 17r[1] (1916--0708) (NB)\",\"ger\":\"Daher haben wir das Gefühl  / daß wir von einem fremden Willen abhängig sind. <br>\",\"eng\":\"That is why we have the feeling of being dependent on an alien will.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,17r[2] (1916--0708) (NB)\",\"ger\":\"<span class='underline_single'>Wie dem auch sei</span>, jedenfalls <span class='underline_single'>sind</span> wir in einem gewissen Sinne abhängig, und das wovon wir abhängig sind können wir Gott nennen. <br>\",\"eng\":\"<span class='underline_single'>Be that as it may</span>, at any rate we <span class='underline_single'>are</span> dependent in a certain sense, and what we are dependent on we can call God.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,17r[3] (1916--0708) (NB)\",\"ger\":\"Gott wäre in diesem Sinne einfach das Schicksal oder, was dasselbe ist: die – von unserem Willen unabhängige – Welt. <br>\",\"eng\":\"In this sense God would simply be fate, or, what is the same thing: the world, independent of our will.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,17r[4] (1916--0708) (NB)\",\"ger\":\"Vom Schicksal kann ich mich unabhängig machen. <br>\",\"eng\":\"\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,17r[5] (1916--0708) (NB)\",\"ger\":\"Es gibt zwei Gottheiten die Welt und mein unabhängiges Ich. <br>\",\"eng\":\"There are two deities: the world and my independent I.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[1] (1916--0708) (NB)\",\"ger\":\"Ich bin entweder glücklich oder unglücklich, das ist alles. Man kann sagen: gut oder böse gibt es nicht. <br>\",\"eng\":\"I am either happy or unhappy, that's all. One can say: good or evil don’t exist. <br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[2] (1916--0708) (NB)\",\"ger\":\"Wer glücklich ist der darf keine Furcht haben. Auch nicht vor dem Tode. <br>\",\"eng\":\"He who is happy must have no fear. Not even of death.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[3] (1916--0708) (NB)\",\"ger\":\"Nur wer nicht in der Zeit sondern in der Gegenwart lebt ist glücklich. <br>\",\"eng\":\"Only he who lives not in time but in the present is happy.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[4] (1916--0708) (NB)\",\"ger\":\"Für das Leben in der Gegenwart gibt es keinen Tod. <br>\",\"eng\":\"For one who lives in the present, there is no death.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[5] (1916--0708) (NB)\",\"ger\":\" / \\\\\\tDer Tod ist kein Ereignis des Lebens. Er ist keine Tatsache der Welt. <br>\",\"eng\":\"Death is not an event in life. It is not a fact in the world. [Cf. 6.4311 (la).]<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"6·4421\",\"pt-page\":\"83[4]\",\"tlp-number\":\"6·4311 (la) \",\"cross-references\":\"8.7.16 (15)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,18r[6] et 19r[1] (1916--0708) (NB)\",\"ger\":\" / \\\\\\tWenn man unter Ewigkeit  / nicht unendliche Zeitdauer sondern Unzeitlichkeit versteht, dann kann man sagen daß der ewig lebt der in der Gegenwart lebt. <br>\",\"eng\":\"If we mean by eternity not infinite temporal duration but timelessness, then we can say that he who lives in the present lives eternally. [<em>See</em> 6.4311 (2).]<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"6·4422\",\"pt-page\":\"83[5]\",\"tlp-number\":\"6·4311 (2) \",\"cross-references\":\"6.7.16 (4)+   8.7.16 (16)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,19r[2] (1916--0708) (NB)\",\"ger\":\"Um glücklich zu leben muß ich in Übereinstimmung sein mit der Welt. Und dies heißt ja „glücklich sein”. <br>\",\"eng\":\"In order to live happily, I must be in agreement with the world. And this is what \\\"being happy\\\" means.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,19r[3] (1916--0708) (NB)\",\"ger\":\"Ich bin dann sozusagen in Übereinstimmung mit jenem fremden Willen von dem ich abhängig erscheine. Das heißt: „ich tue den Willen Gottes”. <br>\",\"eng\":\"I am then, so to speak, in agreement with that alien will on which I appear dependent. In other words: \\\"I do the will of God\\\".<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,19r[4] (1916--0708) (NB)\",\"ger\":\"Die Furcht vor dem Tode ist das beste Zeichen eines falschen d.h. schlechten Lebens. <br>\",\"eng\":\"Fear of death is the best sign of a false, i.e. bad, life.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,20r[1] (1916--0708) (NB)\",\"ger\":\"Wenn mein Gewissen mich aus dem Gleichgewicht bringt, so bin ich nicht in Übereinstimmung mit Etwas. Aber was ist dies? Ist es <span class='underline_single'>die Welt</span>? <br>\",\"eng\":\"When my conscience upsets my equilibrium, I am not in agreement with something. But what is this? Is it <span class='underline_single'>the world</span>?<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,20r[2] (1916--0708) (NB)\",\"ger\":\"Gewiß ist es richtig zu sagen: Das Gewissen ist die Stimme Gottes. <br>\",\"eng\":\"Certainly it is correct to say: Conscience is the voice of God.<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,20r[3] (1916--0708) (NB)\",\"ger\":\"Zum Beispiel: es macht mich unglücklich zu denken daß ich den und den beleidigt habe. Ist das mein Gewissen. <br>\",\"eng\":\"For example: it makes me unhappy to think that I have offended such and such a person. Is that my conscience?<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,20r[4] (1916--0708) (NB)\",\"ger\":\"Kann man sagen: „handle nach deinem Gewissen, es sei beschaffen wie es mag”? <br>\",\"eng\":\"Can one say, \\\"Act according to your conscience, whatever it may be\\\"?<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,20r[5] (1916--0708) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,21r[1] (1916--0709) (NB)\",\"ger\":\"Wenn man nicht die allgemeinste Satzform angeben könnte, dann müßte ein Moment kommen, wo wir plötzlich eine neue Erfahrung machen, sozusagen eine logische. <br>\",\"eng\":\"If the most general propositional form could not be given, then a time would have to come when we suddenly had a new experience, a logical one, as it were.<br>\",\"date\":\"1916-07-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,21r[2] (1916--0709) (NB)\",\"ger\":\"Dies ist natürlich unmöglich. <br>\",\"eng\":\"That is impossible, of course.<br>\",\"date\":\"1916-07-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,21r[3] (1916--0709) (NB)\",\"ger\":\"Nicht vergessen, daß (∃x) fx nicht heißt; es gibt ein x so daß fx, sondern: es gibt einen wahren Satz „fx”. <br>\",\"eng\":\"Don't forget that (∃x) fx does not mean: There is an x such that fx, but: There is a true proposition \\\"fx\\\".<br>\",\"date\":\"1916-07-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,21r[4] et 22r[1] (1916--0709) (NB)\",\"ger\":\"Der Satz fa spricht von bestimmten / Gegenständen, der allgemeine Satz von <span class='underline_single'>allen</span> Gegenständen. <br>\",\"eng\":\"The proposition fa speaks of particular objects, the general proposition of <span class='underline_single'>all</span> objects.<br>\",\"date\":\"1916-07-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,22r[2] (1916--0711) (NB)\",\"ger\":\"Der bestimmte Gegenstand ist eine sehr merkwürdige Erscheinung. <br>The particular object is a very remarkable phenomenon.<br>\",\"eng\":\"\",\"date\":\"1916-07-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,22r[3] (1916--0711) (NB)\",\"ger\":\"Statt „alle Gegenstände” könnte man sagen: alle <span class='underline_single'>bestimmten Gegenstände</span>. <br>\",\"eng\":\"Instead of \\\"all objects\\\" one could say: all <span class='underline_single'>particular objects</span>.<br>\",\"date\":\"1916-07-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,22r[4] (1916--0711) (NB)\",\"ger\":\"\",\"eng\":\"Once the particular objects are given, then “<em>all</em> objects” are given. In short, all objects are given along with the particular objects. [Cf. 5.524 (1).]<br>\",\"date\":\"1916-07-11\",\"pt-number\":\"  5·3202\",\"pt-page\":\"86[6]\",\"tlp-number\":\"5·524 (1)*\",\"cross-references\":\"11.7.16 (4,5)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,22r[5] (1916--0711) (NB)\",\"ger\":\" / \\\\\\tWenn es Gegenstände gibt, gibt es damit auch „alle Gegenstände”. <br>\",\"eng\":\"Once objects are given, then thereby “<em>all</em> objects” are given. [Cf. 5.524 (1).]<br>\",\"date\":\"1916-07-11\",\"pt-number\":\"5·3202\",\"pt-page\":\"86[6]\",\"tlp-number\":\"5·524 (1)*\",\"cross-references\":\"11.7.16 (4,5)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,23r[1] (1916--0711) (NB)\",\"ger\":\"Darum muß sich auch die Einheit der Elementarsätze und der allgemeinen Sätze herstellen lassen. <br>\",\"eng\":\"That’s why the unity of elementary propositions and general propositions must be established.<br>\",\"date\":\"1916-07-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,23r[2] (1916--0711) (NB)\",\"ger\":\" / \\\\\\tWenn nämlich die Elementarsätze gegeben sind, so sind damit auch <span class='underline_single'>alle</span> Elementarsätze gegeben und damit der allgemeine Satz. – Und ist damit nicht schon die Einheit hergestellt. <br>\",\"eng\":\"Once the elementary propositions are given, then thereby <span class='underline_single'>all</span><em> </em>elementary propositions are given.  And with that, hasn’t the unity already been established?<br>\",\"date\":\"1916-07-11\",\"pt-number\":\"5·3203\",\"pt-page\":\"83[6]\",\"tlp-number\":\"5·524 (2) \",\"cross-references\":\"11.7.16 (7)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,23r[3] (1916--0712? --0713?) (NB)\",\"ger\":\"Immer wieder fühlt man daß auch im Elementarsatz von allen Gegenständen die Rede ist. <br>\",\"eng\":\"Time and again, one has the feeling that even in an elementary proposition all objects are mentioned.<br>\",\"date\":\"1916-07-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,23r[4] et 24r[1] (1916--0713) (NB)\",\"ger\":\"Wenn zwei Operationen gegeben sind die sich nicht auf <span class='underline_single'>eine</span> reduzieren lassen, so muß sich zum mindesten  / eine allgemeine Form ihrer Kombination aufstellen lassen. <br>\",\"eng\":\"If two operations are given which can’t be reduced to <span class='underline_single'>one</span>, then it must at least be possible to set up a general form of their combination.<br>\",\"date\":\"1916-07-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,24r[2] (1916--0713) (NB)\",\"ger\":\"Da sich offenbar leicht erklären läßt wie mit diesen Operationen sich Sätze bilden lassen und wie Sätze nicht zu bilden sind so muß sich dies auch <span class='underline_single'>irgendwie</span> exakt ausdrücken lassen. <br>\",\"eng\":\"Obviously, it is easy to explain how propositions may and may not be constructed by means of this operation. Hence there must also <span class='underline_single'>somehow</span> be an exact way in which this can find expression.<br>\",\"date\":\"1916-07-13\",\"pt-number\":\"5·503\",\"pt-page\":\"13.7.16 (4) [Vgl. 83[7]]\",\"tlp-number\":\"5·503* \",\"cross-references\":\"13.7.16 (4) [Vgl. 83[7]]\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,24r[3] (1916--0714) (NB)\",\"ger\":\"Und dieser Ausdruck muß auch schon in der allgemeinen Form des Operationszeichens gegeben sein. <br>\",\"eng\":\"And this expression must also already be given in the general form of the operation sign.<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,24r[4] et 25r[1] (1916--0714) (NB)\",\"ger\":\"Ja muß dies nicht der einzige legitime Ausdruck der Anwendung der Operation sein. Offenbar  / ja! <br>\",\"eng\":\"After all, mustn’t this be the only legitimate expression of the application of an operation? Obviously the answer is yes!<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,25r[2] (1916--0714) (NB)\",\"ger\":\"Denn wenn die Operationsform überhaupt ausgedrückt werden kann, dann muß sie es so, daß sie nur richtig angewendet werden <span class='underline_single'>kann</span>. <br>\",\"eng\":\"For if the operation form can be expressed at all, then it must be expressed in such a way that it <span class='underline_single'>can</span> only be applied correctly.<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,25r[3] (1916--0714)\",\"ger\":\"Was aber ist der richtige Ausdruck für (∃x) . φx? <br>\",\"eng\":\"But what is the correct expression for (∃x) . φx?<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,25r[4] (1916--0714)\",\"ger\":\"(∃α) . [φα ∣ ψβ …] <br>∣ (ξ,η) … = φ0 (x, y, …) <br>(∃α)∴(∃α):(∃α).φ0(α,α,α, …) <br>(∃α){φ0 (α …)} … <br>\",\"eng\":\"(∃α) . [φα ∣ ψβ …] <br>∣ (ξ,η) … = φ0 (x, y, …) <br>(∃α)∴(∃α):(∃α).φ0(α,α,α, …) <br>(∃α){φ0 (α …)} … <br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,26r[1] (1916--0714)\",\"ger\":\"Jetzt noch das Abwechseln zwischen (∃x) und (x) ausdrücken. Dann aber die Allgemeinheit der Form wie in der Ancestral Relation! <br>\",\"eng\":\"Now to express the alternation between (∃x) and (x). In this case, however, generality of form as in the ancestral relation.<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,26r[2] (1916--0714)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,26r[3] (1916--0715)\",\"ger\":\"Hier kann vernünftigerweise nicht von einer Existenz von Dingen die Rede sein da auch der Satz aRb schon den Bedingungen entspricht. <br>\",\"eng\":\"Here it isn’t appropriate to talk of things existing since the proposition aRb already meets the conditions.<br>\",\"date\":\"1916-07-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,26r[4] (1916--0715)\",\"ger\":\"Nichts scheint einfacher zu sein als ein Satz wie „a ist ein Nachkomme von b”! <br>\",\"eng\":\"Nothing seems simpler than a proposition such as \\\"a is a descendant of b\\\"!<br>\",\"date\":\"1916-07-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,27r[1] (1916--0716)\",\"ger\":\"xRy.           – – ξ ∙ ξRη<br>\",\"eng\":\"xRy.           – – ξ ∙ ξRη<br>\",\"date\":\"1916-07-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,27r[2] (1916--0720)\",\"ger\":\"Meine alte Einteilung aller Satzformen war im Grunde richtig nur daß eine andere Art der Allgemeinheit benötigt wird. <br>\",\"eng\":\"My old classification of all propositional forms was correct in principle except that a different kind of generality is required.<br>\",\"date\":\"1916-07-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,27r[3] (1916--0720) (NB)\",\"ger\":\"Der Mensch kann sich nicht ohne weiteres glücklich machen. <br>\",\"eng\":\"Man cannot make himself happy without difficulty.<br>\",\"date\":\"1916-07-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,27r[4] (1916--0720) (NB)\",\"ger\":\"Wer in der Gegenwart lebt, lebt ohne Furcht und Hoffnung. <br>\",\"eng\":\"Whoever lives in the present lives without fear and hope.<br>\",\"date\":\"1916-07-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,27r[5] et 28r[1] (1916--0721) (NB)\",\"ger\":\"Was für eine Bewandtnis hat es eigentlich mit dem menschlichen  / Willen? Ich will „Willen” vor allem den Träger von Gut und Böse nennen. <br>\",\"eng\":\"What is the real significance of the human will? First and foremost, I want to speak of \\\"will\\\" as the bearer of good and evil.<br>\",\"date\":\"1916-07-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,28r[2] (1916--0721) (NB)\",\"ger\":\"Stellen wir uns einen Menschen vor der keines seiner Glieder gebrauchen und daher im gewöhnlichen Sinne seinen <span class='underline_single'>Willen</span> nicht betätigen könnte. Er könnte aber denken und <span class='underline_single'>wünschen</span> und einem anderen seine Gedanken mitteilen. Könnte also auch durch den Anderen Böses oder Gutes tun. Dann ist klar daß die Ethik auch für ihn Geltung hätte und er im <span class='underline_single'>ethischen Sinne</span> Träger eines <span class='underline_single'>Willens</span> ist. <br>\",\"eng\":\"Let us imagine a person who could use none of his limbs and so couldn’t exercise his <span class='underline_single'>will</span> in the ordinary sense. He could, however, think and <span class='underline_single'>want</span> and communicate his thoughts to another. So he could also do evil or good through the other. Then it is clear that ethics would apply to him too, and that he is the bearer of a <span class='underline_single'>will</span> in the <span class='underline_single'>ethical sense</span>.<br>\",\"date\":\"1916-07-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,28r[3] et 29r[1] (1916--0721) (NB)\",\"ger\":\"Ist nun ein prinzipieller Unterschied zwischen diesem / Willen und <span class='underline_single'>dem</span> der den menschlichen Körper in Bewegung setzt? <br>\",\"eng\":\"Now is there any relevant difference between this will and the one which sets the human body in motion?<br>\",\"date\":\"1916-07-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,29r[2] (1916--0721) (NB)\",\"ger\":\"Oder liegt hier der Fehler darin daß auch schon das <span class='underline_single'>Wünschen</span> (resp. Denken) eine Handlung des Willens ist? (Und in diesem Sinne wäre allerdings der Mensch <span class='underline_single'>ohne</span> Willen nicht lebendig.) <br>\",\"eng\":\"Or is the mistake here that even this <span class='underline_single'>wanting</span> ( thinking) is an activity of the will? (And in this sense, indeed, a man <span class='underline_single'>without</span> will would not be alive.)<br>\",\"date\":\"1916-07-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,29r[3] (1916--0721) (NB)\",\"ger\":\"Ist aber ein Wesen denkbar das nur vorstellen (etwa sehen) aber gar nicht wollen könnte. In irgend einem Sinne scheint dies unmöglich. Wäre es aber möglich dann könnte es auch eine Welt geben ohne Ethik. <br>\",\"eng\":\"But is a being conceivable that could only represent (see, perhaps) but not will at all? In some sense this seems impossible. But if it were possible then there could also be a world without ethics.<br>\",\"date\":\"1916-07-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,30r[1] (1916--0724) (NB)\",\"ger\":\"Die Welt und das Leben sind Eins. <br>\",\"eng\":\"The world and life are one. [5.621.]<br>\",\"date\":\"1916-07-24\",\"pt-number\":\"5·33531\",\"pt-page\":\"83[8]\",\"tlp-number\":\"5·621 \",\"cross-references\":\"11.6.16 (6)+   24.7.16 (1)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,30r[2] (1916--0724) (NB)\",\"ger\":\"Das physiologische Leben ist natürlich nicht „das Leben”. Und auch nicht das psychologische. Das Leben, ist die Welt. <br>\",\"eng\":\"Of course, physiological life is not \\\"life\\\". And neither is psychological life. Life is the world.<br>\",\"date\":\"1916-07-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,30r[3] (1916--0724) (NB)\",\"ger\":\" / \\\\\\tDie Ethik handelt nicht von der Welt. Die Ethik muß eine Bedingung der Welt sein wie die Logik. <br>\",\"eng\":\"Ethics is not about the world. Ethics must be a condition of the world, like logic.<br>\",\"date\":\"1916-07-24\",\"pt-number\":\"6·422\",\"pt-page\":\"83[11]\",\"tlp-number\":\"6·421 (2)\",\"cross-references\":\"24.7.16 (3)+    30.7.16 (9)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,30r[4] (1916--0724) (NB)\",\"ger\":\" / \\\\\\tEthik und Ästhetik sind Eins. <br>\",\"eng\":\"Ethics and aesthetics are one and the same. [<em>See</em> 6.421.]<br>\",\"date\":\"1916-07-24\",\"pt-number\":\"6·4221\",\"pt-page\":\"83[9]\",\"tlp-number\":\"6·421 (3)* \",\"cross-references\":\"24.7.16 (4)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,30r[5] et 31r[1] (1916--0729) (NB)\",\"ger\":\"Denn daß der Wunsch mit seiner Erfüllung in keinem logischen Zusammenhang steht ist eine logische Tatsache. Und daß die Welt des Glücklichen  / eine <span class='underline_single'>andere</span> ist als die Welt des Unglücklichen ist auch klar. <br>\",\"eng\":\"For it is a fact of logic that wanting has no logical connection with its fulfillment. And it is also clear that the world of the happy man is a <span class='underline_single'>different</span> one from that of the unhappy man. [<em>Cf</em>. 6.43.]<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"6·4411\",\"pt-page\":\"83[12]\",\"tlp-number\":\"6·43 (3)\",\"cross-references\":\"29.7.16 (1, 13)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,31r[2] (1916--0729) (NB)\",\"ger\":\"Ist sehen eine Tätigkeit? <br>\",\"eng\":\"Is seeing an activity?<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,31r[3] (1916--0729) (NB)\",\"ger\":\"Kann man gut wollen, böse wollen und nicht wollen? <br>\",\"eng\":\"Is it possible to will good, to will evil, and not to will?<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,31r[4] (1916--0729) (NB)\",\"ger\":\"Oder ist nur der glücklich der <span class='underline_single'>nicht</span> will? <br>\",\"eng\":\"Or is only he happy who does <span class='underline_single'>not</span> will?<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,31r[5] (1916--0729) (NB)\",\"ger\":\"„Seinen Nächsten lieben” das hieße, Wollen! <br>\",\"eng\":\"\\\"To love one's neighbor\\\" would amount to willing!<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,31r[6] et 32r[1] (1916--0729) (NB)\",\"ger\":\"Kann man aber wünschen und doch nicht unglücklich sein wenn der Wunsch nicht in Erfüllung geht? <br>     (Und diese Möglichkeit  / besteht ja immer.) <br>\",\"eng\":\"But can one want and yet not be unhappy if the wish is not fulfilled? (And this possibility always exists).<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,32r[2] (1916--0729) (NB)\",\"ger\":\"Ist es, nach den allgemeinen Begriffen, gut, seinem Nächsten <span class='underline_single'>nichts</span> zu wünschen, weder Gutes noch Schlechtes? <br>\",\"eng\":\"Is it, in general terms, good to want <span class='underline_single'>nothing</span> for one's neighbor, neither good nor bad?<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,32r[3] (1916--0729) (NB)\",\"ger\":\"Und doch scheint in einem gewissen Sinne das nicht Wünschen das einzig Gute zu sein. <br>\",\"eng\":\"And yet not wanting seems to be the only good, in a certain sense.<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,32r[4] (1916--0729) (NB)\",\"ger\":\"Hier mache ich noch grobe Fehler! Kein Zweifel! <br>\",\"eng\":\"I am still making serious mistakes here! No doubt!<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,32r[5] et 33r[1] (1916--0729) (NB)\",\"ger\":\"Allgemein wird angenommen, daß es böse ist dem Anderen Unglück zu wünschen. Kann das richtig sein? Kann es schlechter sein  / als dem anderen Glück zu wünschen? <br>     Es scheint da sozusagen darauf anzukommen, <span class='underline_single'>wie</span> man wünscht. <br>\",\"eng\":\"It is generally supposed that it is evil to want the other person to be unhappy. Can that be right? Can it be worse than wanting the other to be happy?<br>     It seems to depend on how one wishes, in a sense.<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,33r[2] (1916--0729) (NB)\",\"ger\":\"Man scheint nicht mehr sagen zu können als: Lebe glücklich! <br>\",\"eng\":\"It seems one can't say anything more than: Live happily!<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,33r[3] (1916--0729) (NB)\",\"ger\":\"Die Welt des Glücklichen ist eine andere als die des Unglücklichen. <br>\",\"eng\":\"The world of the happy man is a different one from that of the unhappy man. [6.43 (3).]<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"6·4411\",\"pt-page\":\"83[12]\",\"tlp-number\":\"6·43 (3)\",\"cross-references\":\"29.7.16 (1, 13)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,33r[4] (1916--0729) (NB)\",\"ger\":\"Die Welt des Glücklichen ist <span class='underline_single'>eine glückliche Welt</span>. <br>\",\"eng\":\"The world of the happy man is <span class='underline_single'>a happy world</span>.<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,33r[5] (1916--0729) (NB)\",\"ger\":\"Kann es also eine Welt geben die weder glücklich noch unglücklich ist? <br>\",\"eng\":\"Then can there be a world that is neither happy nor unhappy?<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,34r[1] et 35r[1] (1916--0730) (NB)\",\"ger\":\"Der erste Gedanke bei der Aufstellung eines allgemeinen ethischen Gesetzes von der Form „Du sollst … ” ist: „Und was dann, wenn ich es nicht tue?”. <br>Es ist aber klar daß die Ethik nichts mit Strafe und Lohn zu tun hat. Also muß diese Frage nach den Folgen einer Handlung belanglos sein. Zum Mindesten dürfen diese Folgen nicht Ereignisse sein. Denn etwas muß doch an jener Fragestellung richtig sein. Es muß zwar eine <span class='underline_single'>Art</span> von Lohn und ethischer Strafe geben aber diese müssen in der Handlung  / selbst liegen. <br>     Und das ist auch klar daß der Lohn etwas Angenehmes die Strafe etwas Unangenehmes sein muß. <br>\",\"eng\":\"When an ethical law of the form “You ought to…” is laid down, one's first thought is, “And what’s going to happen if I don’t do it?” <br>But clearly ethics has nothing to do with punishment and reward in the ordinary sense. So this question about the <em>consequences </em>of an action must be irrelevant. – At least these consequences must not be events. For there must be something right about that way of asking the question after all. While there must be a <em>kind </em>of ethical reward and punishment, these are bound to reside in the action itself. <br>And it is clear also that the reward must be something pleasant, the punishment something unpleasant. [<em>See</em> 6.422.]<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"6·4412\",\"pt-page\":\"84[1]\",\"tlp-number\":\"6·422\",\"cross-references\":\"30.7.16 (1,2,3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,35r[2] (1916--0730) (NB)\",\"ger\":\"Immer wieder komme ich darauf zurück, daß einfach das glückliche Leben gut das unglückliche schlecht ist. Und wenn ich mich <span class='underline_single'>jetzt</span> frage: aber <span class='underline_single'>warum</span> soll ich gerade glücklich leben so erscheint mir das von selbst als eine tautologische Fragestellung; es scheint daß sich das glückliche Leben von selbst rechtfertigt, daß es das einzig richtige Leben <span class='underline_single'>ist</span>. <br>\",\"eng\":\"I keep coming back to this: that only the happy life is good, the unhappy life bad. And if I now ask myself: \\\"but why should I even live happily?\\\" this of itself strikes me as a tautological question. It seems that the happy life is self-justifying, that it is the only right life.<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,36r[1] (1916--0730) (NB)\",\"ger\":\" / \\\\\\tAlles dies ist eigentlich in gewissem Sinne tief geheimnisvoll! <span class='underline_single'>Es ist klar</span> daß sich die Ethik nicht aussprechen <span class='underline_single'>läßt</span>! <br>\",\"eng\":\"In some curious sense all this is actually deeply mysterious!! <span class='underline_single'>Clearly</span>, ethics <span class='underline_single'>cannot</span> be proclaimed! [<em>Cf</em>. 6.421.]<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"6·421\",\"pt-page\":\"83[10]\",\"tlp-number\":\"6·421 (1)\",\"cross-references\":\"30.7.16 (5)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,36r[2] (1916--0730) (NB)\",\"ger\":\"Man könnte aber so sagen: Das glückliche Leben scheint in irgend einem Sinne <span class='underline_single'>harmonischer</span> zu sein als das unglückliche. In welchem aber?? <br>\",\"eng\":\"But one could say: The happy life seems to be more <span class='underline_single'>harmonious</span> than the unhappy one, in some sense. But in what sense??<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,36r[3] et 37r[1] (1916--0730) (NB)\",\"ger\":\"Was ist das objektive Merkmal des glücklichen, harmonischen Lebens? Da ist es wieder klar daß es kein solches Merkmal, das sich <span class='underline_single'>beschreiben</span> ließe, geben kann. <br>     Dies Merkmal kann kein physisches sondern nur ein metaphysisches, / ein transcendentes sein. <br>\",\"eng\":\"What is the objective characteristic of the happy, harmonious life? Here it is again clear that there can be no such characteristic that can be <span class='underline_single'>described</span>. <br>     This characteristic cannot be a physical one but only a metaphysical one, a transcendent one.<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[2] (1916--0730) (NB)\",\"ger\":\" / \\\\\\tDie Ethik ist transcendent. <br>\",\"eng\":\"\",\"date\":\"1916-07-30\",\"pt-number\":\"6·422\",\"pt-page\":\"83[11]\",\"tlp-number\":\"6·421 (2)\",\"cross-references\":\"24.7.16 (3)+    30.7.16 (9)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[3] (1916--0801) (NB)\",\"ger\":\"84[2]\\t—\\t\\t<span class='underline_single'>1.8.16 (1)</span>   <span class='underline_single'>1.8.16 (2)</span><br>Wie sich alles verhält, ist Gott.       <br>\",\"eng\":\"How things stand, is God.<br>\",\"date\":\"1916-08-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[4] (1916--0801) (NB)\",\"ger\":\"84[2]\\t—\\t\\t<span class='underline_single'>1.8.16 (1)</span>   <span class='underline_single'>1.8.16 (2)</span><br> / \\\\\\tGott ist, wie sich alles verhält. <br>\",\"eng\":\"God is, how things stand.<br>\",\"date\":\"1916-08-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[5] (1916--0801) (NB)\",\"ger\":\"Nur aus dem Bewußtsein der <span class='underline_single'>Einzigkeit meines Lebens</span> entspringt Religion – Wissenschaft – und Kunst. <br>\",\"eng\":\"Only out of a consciousness of the <span class='underline_single'>uniqueness of my life</span> do religion - science - and art arise.<br>\",\"date\":\"1916-08-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[6] (1916--0802) (NB)\",\"ger\":\"Und dieses Bewußtsein ist das Leben selber. <br>\",\"eng\":\"And this consciousness is life itself.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,37r[7] (1916--0802) (NB)\",\"ger\":\"Kann es eine Ethik geben wenn es außer mir kein Lebewesen gibt? <br>\",\"eng\":\"Can there be any ethics if there is no living being other than myself?<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,38r[1] (1916--0802) (NB)\",\"ger\":\"Wenn die Ethik etwas Grundlegendes sein soll, || : ja!. <br>\",\"eng\":\"If ethics is supposed to be something fundamental, there can.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,38r[2] (1916--0802) (NB)\",\"ger\":\"Wenn ich recht habe; so genügt es nicht zum ethischen Urteil, daß eine Welt gegeben sei. <br>     Die Welt ist dann an sich weder gut noch böse. <br>\",\"eng\":\"If I am right, then it is not sufficient for ethical judgment that a world is given. <br>     Then the world in itself is neither good nor evil.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,38r[3] (1916--0802) (NB)\",\"ger\":\"Denn es muß für die Existenz der Ethik gleich bleiben ob es auf der Welt lebende Materie gibt oder nicht. Und es ist klar daß eine Welt in der nur tote Materie ist an sich weder gut noch böse ist also kann auch die Welt der Lebewesen an sich weder gut noch böse sein. <br>\",\"eng\":\"As far as the existence of ethics is concerned, it must make no difference whether there is living matter in the world or not. And if it is clear that a world in which there is only dead matter is in itself neither good nor evil, then even the world of living creatures can in itself be neither good nor evil.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,39r[1] (1916--0802) (NB)\",\"ger\":\" / \\\\\\tGut und Böse tritt erst durch das <span class='underline_single'>Subjekt</span> ein. Und das Subjekt gehört nicht zur Welt sondern ist eine Grenze der Welt. <br>\",\"eng\":\"Good and evil enter only through the subject. And the subject is a limit, not a part, of the world. [<em>Cf</em>. 5.632.]<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"5·33542\",\"pt-page\":\"84[3]\",\"tlp-number\":\"5·632\",\"cross-references\":\"2.8.16 (7)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,39r[2] (1916--0802) (NB)\",\"ger\":\"Man könnte (Schopenhauerisch) sagen: Die Welt der Vorstellung ist weder gut noch böse, sondern das wollende Subjekt. <br>\",\"eng\":\"One could say (Schopenhauerianly): It is not the world as idea that is either good or evil, but the willing subject.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,39r[3] (1916--0802) (NB)\",\"ger\":\"Die völlige Unklarheit aller dieser Sätze ist mir bewußt. <br>\",\"eng\":\"I am conscious of the complete unclarity of all these sentences.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,39r[4] et 40r[1] (1916--0802) (NB)\",\"ger\":\"Nach dem Früheren müßte also das wollende Subjekt glücklich oder unglücklich sein und Glück und Unglück  / können nicht zur Welt gehören. <br>\",\"eng\":\"According to the foregoing, the willing subject would have to be happy or unhappy, and happiness and unhappiness could not be part of the world.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,40r[2] (1916--0802) (NB)\",\"ger\":\"Wie das Subjekt kein Teil der Welt ist sondern eine Voraussetzung ihrer Existenz so sind Gut und Böse, Prädikate des Subjekts, nicht Eigenschaften in der Welt. <br>\",\"eng\":\"As the subject is not a part of the world but a presupposition of its existence, so good and evil, which are predicates of the subject, are not properties in the world.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,40r[3] (1916--0802) (NB)\",\"ger\":\"Ganz verschleiert ist hier das Wesen des Subjekts.<br>\",\"eng\":\"The nature of the subject is completely veiled here.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,40r[4] (1916--0802) (NB)\",\"ger\":\"Ja, meine Arbeit hat sich ausgedehnt von den Grundlagen der Logik zum Wesen der Welt. <br>\",\"eng\":\"Yes, my work has broadened out from the foundations of logic to the essence of the world.<br>\",\"date\":\"1916-08-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,40r[5] et 41r[1] (1916--0804) (NB)\",\"ger\":\"Ist nicht am Ende das vorstellende Subjekt bloßer  / Aberglaube. <br>\",\"eng\":\"Isn’t the subject that entertains ideas ultimately just superstition?<br>\",\"date\":\"1916-08-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,41r[2] (1916--0804) (NB)\",\"ger\":\" / \\\\\\tWo in der Welt ist ein metaphysisches Subjekt zu merken? <br>\",\"eng\":\"Where in the world is a metaphysical subject discernable? [<em>See</em> 5.633 (1).]<br>\",\"date\":\"1916-08-04\",\"pt-number\":\"5·33543\",\"pt-page\":\"84[4]\",\"tlp-number\":\"5·633*\",\"cross-references\":\"4.8.16 (2,3,4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,41r[3] (1916--0804) (NB)\",\"ger\":\" / \\\\\\tDu sagst es verhält sich hier ganz wie bei Auge und Gesichtsfeld. Aber das Auge siehst Du wirklich <span class='underline_single'>nicht</span>. <br>     Und ich glaube daß nichts am Gesichtsfeld darauf schließen läßt daß es von einem Auge gesehen wird. <br>\",\"eng\":\"You say this is just like the case of the eye and the visual field. But as a matter of fact, you do <span class='underline_single'>not</span><em> </em>see the eye. [See 5.633 (2).]<br>And I believe that nothing in the visual field<em> </em>suggests that it is seen by an eye. [Cf. 5.633 (3).]<br>\",\"date\":\"1916-08-04\",\"pt-number\":\"5·33543\",\"pt-page\":\"84[4]\",\"tlp-number\":\"5·633*\",\"cross-references\":\"4.8.16 (2,3,4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,41r[4] (1916--0805) (NB)\",\"ger\":\"Das vorstellende Subjekt ist wohl leerer Wahn. Das wollende Subjekt aber gibt es. <br>\",\"eng\":\"The subject that entertains ideas is surely an empty illusion. But the willing subject exists.  [<em>Cf</em>. 5.631 (1).]<br>\",\"date\":\"1916-08-05\",\"pt-number\":\" 5·3354\",\"pt-page\":\"60[3]\",\"tlp-number\":\"5·631 (1)\",\"cross-references\":\"5.8.16 (1)+20.10.16 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,42r[1] (1916--0805) (NB)\",\"ger\":\"Wäre der Wille nicht, so gäbe es auch nicht jenes Zentrum der Welt das wir das Ich nennen und das der Träger der Ethik ist. <br>\",\"eng\":\"If the will did not exist, neither would that center of the world which we call the I, and which is the bearer of ethics.<br>\",\"date\":\"1916-08-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,42r[2] (1916--0805) (NB)\",\"ger\":\"Gut und böse ist wesentlich nur das Ich, nicht die Welt. <br>\",\"eng\":\"It is really only the I, not the world, that is good and evil.<br>\",\"date\":\"1916-08-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,42r[3] (1916--0805) (NB)\",\"ger\":\"Das Ich, das Ich ist das tief Geheimnisvolle! <br>\",\"eng\":\"The I, the I is profoundly mysterious!<br>\",\"date\":\"1916-08-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,42r[4] (1916--0807) (NB)\",\"ger\":\"Das Ich ist kein Gegenstand. <br>\",\"eng\":\"The I is not an object.<br>\",\"date\":\"1916-08-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,42r[5] (1916--0808? --0811?) (NB)\",\"ger\":\"Jedem Gegenstand stehe ich objektiv gegenüber. Dem Ich nicht. <br>\",\"eng\":\"I objectively face every object. Not the I.<br>\",\"date\":\"1916-08-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,43r[1] (1916--0811) (NB)\",\"ger\":\" / \\\\\\tEs gibt also wirklich eine Art und Weise, wie in der Philosophie<span class='underline_single'> in einem nicht psychologischen Sinne</span> vom Ich die Rede sein kann und muß. <br>\",\"eng\":\"So there really is a way in which in philosophy one can and must speak of the I in <span class='underline_single'>a non-psychological </span><span class='underline_single'>sense</span>.  [<em>Cf</em>. 5.641 (1).]<br>\",\"date\":\"1916-08-11\",\"pt-number\":\"5·33551\",\"pt-page\":\"85[1]\",\"tlp-number\":\"5·641 (1)\",\"cross-references\":\"11.8.16 (2)**   \",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,43r[2] (1916--0812) (NB)\",\"ger\":\"Das Ich tritt in die Philosophie dadurch ein, daß die Welt <span class='underline_single'>meine</span> Welt ist. <br>\",\"eng\":\"The I enters into philosophy by way of the world’s being <span class='underline_single'>my</span> world. [<em>See</em> 5.641 (2).]<br>\",\"date\":\"1916-08-12\",\"pt-number\":\"5·33551\",\"pt-page\":\"85[1]\",\"tlp-number\":\"5·641 (2)\",\"cross-references\":\"   12.8.16 (1)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,43r[3] (1916--0812) (NB)\",\"ger\":\" / \\\\\\tDas Gesichtsfeld hat nämlich nicht etwa eine solche Form: <br>\",\"eng\":\"The form of the visual field is surely not like this:<br>\",\"date\":\"1916-08-12\",\"pt-number\":\"5·335431\",\"pt-page\":\"84[5]\",\"tlp-number\":\"5·6331**\",\"cross-references\":\"12.8.16 (2)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,43r[4] et 44r[1] (1916--0812) (NB)\",\"ger\":\" / \\\\\\tDas hängt damit zusammen daß kein Teil unserer Erfahrung  / a priori ist. <br>\",\"eng\":\"What this is connected with is that no part of our experience is <em>a priori</em>. [<em>See</em> 5.634 (1).]<br>\",\"date\":\"1916-08-12\",\"pt-number\":\"5·33544a\",\"pt-page\":\"85[2]\",\"tlp-number\":\"5·634 (1)\",\"cross-references\":\"12.8.16 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,44r[2] (1916--0812) (NB)\",\"ger\":\" / \\\\\\tAlles was wir sehen, könnte auch anders sein. <br>     Alles was wir überhaupt beschreiben können, könnte auch anders sein. <br>\",\"eng\":\"Everything we see could also be otherwise.<br>Everything we can describe at all could also be otherwise. [<em>See</em> 5.634 (2-3).]<br>\",\"date\":\"1916-08-12\",\"pt-number\":\"5·33545\",\"pt-page\":\"85[3]\",\"tlp-number\":\"5·634 (2-3)\",\"cross-references\":\"12.8.16 (4,5)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,44r[3] (1916--0813) (NB)\",\"ger\":\"Angenommen der Mensch könnte seinen Willen nicht betätigen müßte aber alle Not dieser Welt leiden, was könnte ihn dann glücklich machen? <br>\",\"eng\":\"Suppose a man could not exercise his will but had to suffer all the misery of this world, then what could make him happy?<br>\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,44r[4] et 45r[1] (1916--0813) (NB)\",\"ger\":\"Wie kann der Mensch überhaupt glücklich sein, da er doch die Not dieser Welt nicht abwehren kann? /      Eben durch das Leben der Erkenntnis. <br>\",\"eng\":\"How can man be happy at all, since he cannot ward off the misery of this world? Simply by a life of knowledge.<br>\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,45r[2] (1916--0813) (NB)\",\"ger\":\"Das gute Gewissen ist das Glück welches das Leben der Erkenntnis gewährt. <br>\",\"eng\":\"A life of knowledge offers the happiness of a good conscience.<br>\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,45r[3] (1916--0813) (NB)\",\"ger\":\"Das Leben der Erkenntnis ist das Leben, welches glücklich ist, der Not der Welt zum Trotz. <br>\",\"eng\":\"A life of knowledge is a life that is happy in spite of the misery of the world.<br>\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,45r[4] (1916--0813) (NB)\",\"ger\":\"Nur das Leben ist glücklich welches auf die Annehmlichkeiten der Welt verzichten kann. <br>     Ihm sind die Annehmlichkeiten der Welt nur so viele Gnaden des Schicksals. <br>\",\"eng\":\"The only life that is happy is the life that can renounce the comforts of the world. <br>     To it the comforts of the world are only so many graces of fate.<br>\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,46r[1] et 47r[1] (1916--0816) (NB)\",\"ger\":\"Daß ein Punkt nicht zugleich rot und grün sein kann muß dem ersten Anschein nach keine <span class='underline_single'>logische</span> Unmöglichkeit sein. Aber schon die physikalische Ausdrucksweise reduziert sie zu einer kinetischen Unmöglichkeit. Man sieht zwischen Rot und Grün besteht eine Verschiedenheit der Struktur. <br>     Und nun ordnet sie die Physik gar noch in eine Reihe. Und nun sieht man wie hier die wahre Struktur der Gegenstände ans Licht gebracht wird. <br>     Daß ein Teilchen nicht zu gleicher Zeit an zwei Orten sein kann das  / sieht schon vielmehr aus wie eine <span class='underline_single'>logische</span> Unmöglichkeit. <br>     Fragen wir z.B. warum so taucht sofort der Gedanke auf: Nun wir würden eben Teilchen die sich an zwei Orten befänden verschiedene nennen, und das scheint alles wieder aus der Struktur des Raumes und der Teilchen zu folgen. <br>\",\"eng\":\"That a point cannot be red and green at the same time may not seem to be a logical impossibility at first sight. But the very language of physics itself reduces it to a kinetic impossibility. One sees there is a difference in structure between red and green.<br>     And now physics arranges them even further, into a series. And now one sees here how the true structure of objects is brought to light.<br>That a particle cannot be in two places at the same time does rather look like a <span class='underline_single'>logical</span> impossibility.<br>If we ask why, for example, then the thought immediately comes up: Well, we would call particles that were in two places different, and this all seems to follow in turn from the structure of space and of particles. [Cf. 6.3751.]<br>\",\"date\":\"1916-08-16\",\"pt-number\":\"6·3751\",\"pt-page\":\"88[1]\",\"tlp-number\":\"6·3751 (1-2)**\",\"cross-references\":\"16.8.16 (3,4)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,47r[2] (1916--0817) (NB)\",\"ger\":\"Operation ist der Übergang von einem Glied zum folgenden einer Formen-Reihe. <br>\",\"eng\":\"An operation is the transition from one term to the next one in a series of forms.<br>\",\"date\":\"1916-08-17\",\"pt-number\":\"5·00162\",\"pt-page\":\"81[6]\",\"tlp-number\":\"5·252 a+ \",\"cross-references\":\"26.4.16 (1,2)**   17.8.16(1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,47r[3] (1916--0817) (NB)\",\"ger\":\" / \\\\\\tOperation und Formen-Reihe sind Äquivalente. <br>\",\"eng\":\"The operation and series of forms are equivalents.<br>\",\"date\":\"1916-08-17\",\"pt-number\":\"5·005341\",\"pt-page\":\"93[3]\",\"tlp-number\":\"5·232* \",\"cross-references\":\"17.8.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,47r[4] et 48r[1] (1916--0819? --0829?) (NB)\",\"ger\":\"Die Frage ist, ob die gewöhnliche kleine Anzahl von Grundoperationen genügt um alle möglichen Operationen herzustellen. <br>\",\"eng\":\"The question is whether the usual small number of fundamental operations is sufficient to construct all possible operations.<br>\",\"date\":\"1916-08-19\",\"pt-number\":\" 5·3071\",\"pt-page\":\"80[4]\",\"tlp-number\":\"5·474 \",\"cross-references\":\"29.8.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,48r[2] (1916--0829) (NB)\",\"ger\":\"Es scheint, daß dies so sein muß. <br>\",\"eng\":\"It looks like this must be so.<br>\",\"date\":\"1916-08-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,48r[3] (1916--0829) (NB)\",\"ger\":\"Man kann auch fragen, ob man von jedem Ausdruck auf jeden verwandten mit jenen Grundoperationen übergehen kann. <br>\",\"eng\":\"One can also ask whether one can pass from any expression to any related ones with these fundamental operations.<br>\",\"date\":\"1916-08-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,48r[4] (1916--0902) (NB)\",\"ger\":\"Hier sieht man daß der Solipsismus streng durchgeführt mit dem reinen Realismus zusammenfällt. <br>\",\"eng\":\"Here one sees that solipsism, strictly worked out, coincides with pure realism. [<em>See</em> 5.64.]<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"5·3355\",\"pt-page\":\"85[4]\",\"tlp-number\":\"5·64\",\"cross-references\":\"2.9.16 (1,2)   15.10.16 (21)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,49r[1] (1916--0902) (NB)\",\"ger\":\" / \\\\\\tDas Ich des Solipsismus schrumpft zum ausdehnungslosen Punkt zusammen und es bleibt die ihm koordinierte Realität bestehen. <br>\",\"eng\":\"The I of solipsism shrinks to an extensionless point, and what remains is the reality co-ordinated with it. [<em>See</em> 5.64.]<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"5·3355\",\"pt-page\":\"85[4]\",\"tlp-number\":\"5·64\",\"cross-references\":\"2.9.16 (1,2)   15.10.16 (21)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,49r[2] (1916--0902) (NB)\",\"ger\":\"Was geht mich die Geschichte an? Meine Welt ist die erste und einzige! <br>\",\"eng\":\"What does history have to do with me? Mine is the first and only world!<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,49r[3] (1916--0902) (NB)\",\"ger\":\"Ich will berichten, wie <span class='underline_single'>ich</span> die Welt vorfand. <br>\",\"eng\":\"I want to report how <span class='underline_single'>I</span> found the world.<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,49r[4] et 50r[1] (1916--0902) (NB)\",\"ger\":\"Was andere mir auf der Welt über die Welt sagten ist ein ganz kleiner und  / nebensächlicher Teil meiner Welt-Erfahrung. <br>\",\"eng\":\"What others in the world have told me about the world is a very small and incidental part of my worldly experience.<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,50r[2] (1916--0902) (NB)\",\"ger\":\"<span class='underline_single'>Ich</span> habe die Welt zu beurteilen, die Dinge zu messen. <br>\",\"eng\":\"<span class='underline_single'>I</span> have to judge the world, to measure things.<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,50r[3] et 51r[1] (1916--0902) (NB)\",\"ger\":\" Das philosophische Ich ist nicht der Mensch, nicht der menschliche Körper oder die menschliche Seele mit den psychologischen Eigenschaften, sondern das metaphysische Subjekt die Grenze (nicht ein Teil) der Welt. Der menschliche Körper aber, <span class='underline_single'>mein</span> Körper insbesondere ist ein Teil der Welt  / unter anderen Teilen der Welt unter Tieren, Pflanzen, Steinen etc. etc. <br>\",\"eng\":\"The philosophical I is not the human being, not the human body, nor the human soul with psychological properties, but rather the metaphysical subject, the limit (not a part) of the world. [<em>Cf</em>. 5.641.] The human body, however, my body in particular, is a part of the world among other parts of the world, among animals, plants, stones, etc., etc.<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"5·33552\",\"pt-page\":\"94[5]\",\"tlp-number\":\"5·641 (3)* \",\"cross-references\":\"2.9.16 (7)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,51r[2] (1916--0902) (NB)\",\"ger\":\"Wer das einsieht wird seinem Körper oder dem menschlichen Körper nicht eine bevorzugte Stelle in der Welt einräumen wollen. <br>Er wird Menschen und Tiere ganz naiv als ähnliche und zusammengehörige Dinge betrachten. <br>\",\"eng\":\"Anyone who realizes this will not want to assign his body or the human body a privileged place in the world. <br>He will regard humans and animals quite naively as things that are similar and belong together.<br>\",\"date\":\"1916-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,51r[3] (1916--0911) (NB)\",\"ger\":\"Die Art und Weise wie die Sprache bezeichnet spiegelt sich in ihrem Gebrauche wieder. <br>\",\"eng\":\"\",\"date\":\"1916-09-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,52r[1] (1916--0911) (NB)\",\"ger\":\"Daß die Farbe keine Eigenschaft ist ◇◇◇ zeigt die Analyse der Physik und ◇◇◇  \\t\\t <br>\",\"eng\":\"\",\"date\":\"1916-09-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,52r[2] (1916--0911) (NB)\",\"ger\":\"Daß die Farben keine Eigenschaften sind, zeigt die Analyse der Physik, zeigen die internen Relationen in welchen die Physik die Farben zeigt. <br>\",\"eng\":\"That colors are not properties is shown by an analysis in physics, in which physics shows the internal relations of colors.<br>\",\"date\":\"1916-09-11\",\"pt-number\":\"4·1022331\",\"pt-page\":\"95[3]\",\"tlp-number\":\"4·123 (1-2)\",\"cross-references\":\"11.9.16 (2)+   MN 222 (7)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,52r[3] (1916--0911) (NB)\",\"ger\":\" ✢\\tWende dies auch auf Klänge an. <br>\",\"eng\":\"Apply this to sounds too.<br>\",\"date\":\"1916-09-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,52r[4] et 53r[1] (1916--0912) (NB)\",\"ger\":\"Jetzt wird klar warum ich dachte Denken und Sprechen wäre dasselbe. Das Denken nämlich ist eine Art Sprache. / Denn der Gedanke ist natürlich <span class='underline_single'>auch</span> ein logisches Bild des Satzes, und somit ebenfalls eine Art Satz. <br>\",\"eng\":\"Now it’s becoming clear why I thought thinking and speaking were the same. Because thinking is a kind of language. For a thought is of course a logical picture of a proposition too, and so it just is a kind of proposition.<br>\",\"date\":\"1916-09-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,53r[2] (1916--0919) (NB)\",\"ger\":\"Die Menschheit hat immer nach einer Wissenschaft gesucht in welcher simplex sigillum veri ist.<br>\",\"eng\":\"Mankind has always sought a science in which <em>simplex </em><em>sigillum</em><em> </em><em>veri</em> holds. [Cf. 5.4541 (2-3).]<br>\",\"date\":\"1916-09-19\",\"pt-number\":\"5·30225\",\"pt-page\":\"76[3]\",\"tlp-number\":\"5·4541 (2-3)* \",\"cross-references\":\"5.3.15 (1)  19.9.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,53r[3] et 54r[1] (1916--0919) (NB)\",\"ger\":\"Es kann nicht eine ordentliche oder eine unordentliche Welt geben so daß man sagen könnte unsere Welt ist ordentlich. Sondern in jeder möglichen Welt ist eine, wenn auch komplizierte Ordnung gerade so wie es im  / Raume auch nicht unordentliche und ordentliche Punktverteilungen gibt sondern jede Punktverteilung ist ordentlich. <br>[Diese Bemerkung ist nur Material für einen Gedanken.] <br>\",\"eng\":\"There cannot be an orderly or an disorderly world, so that one could say our world is orderly. But in every possible world there is an order, even if it is a complicated one, just as in space too there aren’t disorderly and orderly point distributions. Rather, every distribution of points is orderly. <br>[This remark is only material for a thought].<br>\",\"date\":\"1916-09-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,54r[2] (1916--0919) (NB)\",\"ger\":\"Die Kunst ist ein Ausdruck. <br>\",\"eng\":\"\",\"date\":\"1916-09-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,54r[3] (1916--0919) (NB)\",\"ger\":\"Das gute Kunstwerk ist der vollendete Ausdruck. <br>\",\"eng\":\"A good work of art is a consummate expression.<br>\",\"date\":\"1916-09-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,54r[4] (1916--1007) (NB)\",\"ger\":\"Das Kunstwerk ist der Gegenstand sub specie aeternitatis gesehen; und das gute Leben ist die Welt sub specie aeternitatis gesehen. Dies ist der Zusammenhang zwischen Kunst und Ethik.<br>\",\"eng\":\"A work of art is an object seen <em>sub specie aeternitatis</em>; and the good life is the world seen <em>sub specie aeterni</em><em>tatis.</em> This is the connection between art and ethics. [<em>Cf</em>. 6.45 (1).]<br>\",\"date\":\"1916-10-07\",\"pt-number\":\" 6·431\",\"pt-page\":\"85[6]\",\"tlp-number\":\"6·45 (1)*\",\"cross-references\":\"7.10.16 (2,3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55r[1] (1916--1007) (NB)\",\"ger\":\" / \\\\\\tDie gewöhnliche Betrachtungsweise sieht die Gegenstände gleichsam aus ihrer Mitte, die Betrachtung sub specie aeternitatis von außerhalb.<br>\",\"eng\":\"The usual way of looking at objects sees them from their midst, as it were, the view sub specie aeternitatis from outside.<br>\",\"date\":\"1916-10-07\",\"pt-number\":\"6·431\",\"pt-page\":\"85[6]\",\"tlp-number\":\"6·45 (1)*\",\"cross-references\":\"7.10.16 (2,3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55r[2] (1916--1007) (NB)\",\"ger\":\" / \\\\\\tSo daß sie die ganze Welt als Hintergrund haben.<br>\",\"eng\":\"In such a way that they have the whole world as background.<br>\",\"date\":\"1916-10-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55r[3] (1916--1007) (NB)\",\"ger\":\" / \\\\\\tIst es etwa das daß sie den Gegenstand <span class='underline_single'>mit</span> Raum und Zeit sieht statt <span class='underline_single'>in</span> Raum und Zeit.<br>\",\"eng\":\"Is this it perhaps: the object is seen <span class='underline_single'>together with</span> space and time instead of <span class='underline_single'>within</span> space and time?<br>\",\"date\":\"1916-10-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55r[4] (1916--1007) (NB)\",\"ger\":\"Jedes Ding bedingt die ganze logische Welt, sozusagen den ganzen logischen Raum.<br>\",\"eng\":\"Each thing presupposes the whole logical world, the whole of logical space, so to speak.<br>\",\"date\":\"1916-10-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55r[5] (1916--1007) (NB)\",\"ger\":\"(Es drängt sich der Gedanke auf): Das Ding sub specie aeternitatis gesehen ist das Ding mit dem ganzen logischen Raum gesehen. <br>\",\"eng\":\"(The thought impresses itself): The thing seen <em>sub specie aeternitatis</em> is the thing seen together with the whole of logical space.<br>\",\"date\":\"1916-10-07\",\"pt-number\":\" 6·431\",\"pt-page\":\"85[6]\",\"tlp-number\":\"6·45 (1)*\",\"cross-references\":\"7.10.16 (2,3)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,56r[1] (1916--1008) (NB)\",\"ger\":\"Als Ding unter Dingen ist jedes Ding gleich unbedeutend als Welt jedes gleich bedeutend. <br>\",\"eng\":\"As a thing among things, each thing is equally insignificant; as a world, each is equally significant.<br>\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55v[1] (1916--1008)\",\"ger\":\"<em>Unter</em><em> </em><em>Schmerzen</em><em>:</em> [Comment on writing of opposite page 56r.]<br>\",\"eng\":\"In pain: [Comment on writing of opposite page 56r.]<br>\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,56r[2] (1916--1008) (NB)\",\"ger\":\"Habe ich den Ofen kontempliert und es wird mir nun gesagt: jetzt kennst Du aber nur den Ofen so scheint mein Resultat allerdings kleinlich. Denn das stellt es so dar als hätte ich den Ofen unter den vielen vielen Dingen der Welt studiert. Habe ich aber den Ofen kontempliert so war <span class='underline_single'>er</span> meine Welt. Und alles andere dagegen blaß. <br>\",\"eng\":\"If I have been contemplating the stove and then am told: but now all you know is the stove, then my result does indeed look trivial. Because this represents it in such a way as if I had studied the oven among the many many things of the world. But if I was contemplating the stove, <span class='underline_single'>it</span> was my world. And everything else pales by comparison.<br>\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,55v[2] (1916--1008) (NB)\",\"ger\":\"<em>Manches Gute im Großen im </em><em>einzelnen</em><em> aber schlecht.</em><br>\",\"eng\":\"Something good about the whole, but bad in details.<br>\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,57r[1] (1916--1008) (NB)\",\"ger\":\"Man kann eben die bloße gegenwärtige Vorstellung sowohl auffassen als das nichtige momentane Bild in der ganzen zeitlichen Welt als auch als die wahre Welt unter Schatten. <br>\",\"eng\":\"One can equally well regard the bare present idea as a trivial momentary picture within the whole temporal world, and as the true world among shadows.<br>\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\" Ms-103,56v[1] (1916--1008)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,57r[2] (1916--1009) (NB)\",\"ger\":\"Nun ist aber endlich der Zusammenhang der Ethik mit der Welt klar zu machen. <br>\",\"eng\":\"But now at last the connection of ethics with the world has to be made clear.<br>\",\"date\":\"1916-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,57r[3] (1916--1012) (NB)\",\"ger\":\"Ein Stein, der Körper eines Tiers, der Körper eines Menschen, mein Körper, stehen alle auf gleicher Stufe. <br>\",\"eng\":\"A stone, the body of an animal, the body of a man, my body, are all on the same level.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,57r[4] et 58r[1] (1916--1012) (NB)\",\"ger\":\"Darum ist was geschieht ob es von einem Stein oder  / von meinem Körper geschieht weder gut noch schlecht. <br>\",\"eng\":\"That is why what happens, whether it is done by a stone or by my body, is neither good nor bad.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,58r[2] (1916--1012) (NB)\",\"ger\":\"„Die Zeit ist einsinnig” muß ein Unsinn sein. <br>\",\"eng\":\"\\\"Time has just one direction\\\" must be a piece of nonsense.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,58r[3] (1916--1012) (NB)\",\"ger\":\"Die Einsinnigkeit ist eine logische Eigenschaft der Zeit. <br>\",\"eng\":\"Having just one direction is a logical property of time.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,58r[4] (1916--1012) (NB)\",\"ger\":\"Denn wenn man jemanden fräge wie er sich die Einsinnigkeit vorstellt so würde er sagen: die Zeit wäre nicht einsinnig wenn sich ein Ereignis wiederholen könnte. <br>\",\"eng\":\"For if one were to ask someone how he imagines having just one direction, he would say: time would not have just one direction if an event could itself be repeated.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,58r[5] et 59r[1] (1916--1012) (NB)\",\"ger\":\"Daß sich aber ein Ereignis nicht wiederholen kann liegt geradeso  / wie daß ein Körper nicht zu gleicher Zeit an zwei Orten sein kann im logischen Wesen des Ereignisses. <br>\",\"eng\":\"But the impossibility of an event itself’s being repeated, like that of a body's being in two places at once, is involved in the logical nature of an event.<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,59r[2] (1916--1012) (NB)\",\"ger\":\" / \\\\\\tEs ist wahr: der Mensch <span class='underline_single'>ist</span> der Mikrokosmos: Ich bin meine Welt. <br>\",\"eng\":\"Truly, Man <span class='underline_single'>is</span> the microcosm: I am my world. [<em>Cf</em>. 5.63.]<br>\",\"date\":\"1916-10-12\",\"pt-number\":\"5·33532\",\"pt-page\":\"85[5]\",\"tlp-number\":\"5·63*\",\"cross-references\":\"12.10.16 (7,8)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,59r[3] (1916--1015) (NB)\",\"ger\":\"     Was man sich nicht denken kann, darüber kann man auch nicht reden. <br>\",\"eng\":\"What one can't imagine, one can't speak of, too. [<em>Cf</em>. 5.61 (4).]<br>\",\"date\":\"1916-10-15\",\"pt-number\":\" 5·40421\",\"pt-page\":\"90[3]\",\"tlp-number\":\"5·61 (4)\",\"cross-references\":\"15.10.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,59r[4] (1916--1015) (NB)\",\"ger\":\"„Bedeutung” bekommen die Dinge erst durch ihr Verhältnis zu meinem Willen. <br>\",\"eng\":\"Things get \\\"meaning\\\" only in virtue of their relation to my will.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,59r[5] (1916--1015) (NB)\",\"ger\":\"Denn „Jedes Ding ist was es ist und kein ander Ding”. <br>\",\"eng\":\"For \\\"every thing is what it is and not another thing\\\".<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,60r[1] (1916--1015) (NB)\",\"ger\":\"Eine Auffassung: Wie ich aus meiner Physiognomie auf meinen Geist (Charakter, Willen) schließen kann so aus der Physiognomie jedes Dinges auf <span class='underline_single'>seinen</span> Geist (Willen). <br>\",\"eng\":\"One view: As I can infer my spirit (character, will) from my physiognomy, so I can infer the spirit (will) of each thing from <span class='underline_single'>its</span> physiognomy.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,60r[2] (1916--1015) (NB)\",\"ger\":\"Kann ich aber aus meiner Physiognomie auf meinen Geist <span class='underline_single'>schließen</span>? <br>\",\"eng\":\"\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,60r[3] (1916--1015) (NB)\",\"ger\":\"Ist dieses Verhältnis nicht rein empirisch? <br>\",\"eng\":\"Isn't this relation merely empirical?<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,60r[4] (1916--1015) (NB)\",\"ger\":\"Drückt mein Körper wirklich etwas aus? <br>     Ist er selbst der interne Ausdruck von etwas? <br>\",\"eng\":\"Does my body really express anything? <br>     Is it itself an internal expression of something?<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,60r[5] et 61r[1] (1916--1015) (NB)\",\"ger\":\"Ist etwa das böse Gesicht an sich böse oder bloß weil es  / empirisch mit böser Laune verbunden ist? <br>\",\"eng\":\"Is an angry face, for instance, angry in itself or merely because it is empirically connected with an angry temper?<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,61r[2] (1916--1015) (NB)\",\"ger\":\"Aber es ist klar daß der Kausalnexus gar kein Nexus ist. <br>\",\"eng\":\"But it is clear that the causal nexus is not a nexus at all. [<em>Cf</em>. 5.136.]<br>\",\"date\":\"1916-10-15\",\"pt-number\":\" 5·0441\",\"pt-page\":\"16[5]\",\"tlp-number\":\"5·136\",\"cross-references\":\"15.10.16 (10)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,61r[3] (1916--1015) (NB)\",\"ger\":\"Ist es denn wahr, daß sich mein Charakter nach der psychophysischen Auffassung nur im Bau meines Körpers oder meines Gehirns und nicht ebenso im Bau der ganzen übrigen Welt ausdrückt? <br>     Hier liegt ein springender Punkt. <br>\",\"eng\":\"Is it true, then, that on the psychophysical view my character expresses itself only in the construction of <span class='underline_single'>my</span> body or my brain and not equally in the construction of the rest of the world? <br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,61r[4] (1916--1015) (NB)\",\"ger\":\"Dieser Parallelismus besteht also eigentlich zwischen meinem Geist i.e. dem Geist und der Welt. <br>\",\"eng\":\"So this parallelism ultimately obtains between my spirit, i.e. spirit, and the world.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,62r[1] (1916--1015) (NB)\",\"ger\":\"Bedenke nur daß der Geist der Schlange des Löwen <span class='underline_single'>dein</span> Geist ist. Denn nur von Dir her kennst du überhaupt den Geist. <br>\",\"eng\":\"But keep in mind that the spirit of a serpent, of a lion, is <span class='underline_single'>your</span> spirit. For it is only from yourself that you are acquainted with spirit at all.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,62r[2] (1916--1015) (NB)\",\"ger\":\"Es ist nun freilich die Frage warum habe ich der Schlange gerade diesen Geist gegeben. <br>\",\"eng\":\"Now of course the question is: why have I given a serpent this very spirit?<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,62r[3] (1916--1015) (NB)\",\"ger\":\"Und die Antwort hierauf kann nur im psychophysischen Parallelismus liegen: Wenn Ich so aussähe wie die Schlange und das täte was sie tut so wäre ich so und so. <br>\",\"eng\":\"And the answer to this can only lie in psychophysical parallelism: If I were to look like the serpent and do what it does, I would be such-and-such.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,62r[4] (1916--1015) (NB)\",\"ger\":\"Das Gleiche beim Elefanten, bei der Fliege bei der Wespe. <br>\",\"eng\":\"The same with the elephant, with the fly, with the wasp.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,63r[1] (1916--1015) (NB)\",\"ger\":\"Es frägt sich aber ob nicht eben auch hier wieder (und gewiß ist es so) mein Körper mit dem der Wespe und der Schlange auf einer Stufe stehen so daß ich weder von dem der Wespe auf meinen noch von meinem auf den der Wespe geschlossen habe. <br>\",\"eng\":\"But the question arises whether even here, again, my body is not on the same level with that of the wasp and the serpent (and surely it is so), so that I have neither inferred from that of the wasp to mine nor from mine to that of the wasp.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,63r[2] (1916--1015) (NB)\",\"ger\":\"Ist das die Lösung des Rätsels warum die Menschen immer glaubten <span class='underline_single'>ein</span> Geist sei der ganzen Welt gemein. <br>\",\"eng\":\"Is this the solution of the riddle why men always believed <span class='underline_single'>one</span> spirit to be shared by the whole world?<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,63r[3] et 64r[1] (1916--1015) (NB)\",\"ger\":\"Und dann wäre er freilich auch den unbelebten Dingen  / gemeinsam. <br>\",\"eng\":\"And then, of course, it would be shared by lifeless things, too.<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,64r[2] (1916--1015) (NB)\",\"ger\":\" / \\\\\\tDer Weg den ich gegangen bin ist der:<br>Der Idealismus scheidet aus der Welt als unik die Menschen aus, der Solipsismus scheidet mich allein aus, und endlich sehe ich daß auch ich zur übrigen Welt gehöre auf der einen Seite bleibt also <span class='underline_single'>nichts</span> übrig auf der anderen als unik <span class='underline_single'>die Welt</span>. So führt der Idealismus streng durchdacht zum Realismus. <br>\",\"eng\":\"This is the path I have taken: <br>Idealism sets men apart from the world as unique, solipsism set me apart, and eventually I see that I too belong with the rest of the world, so that on the one hand <span class='underline_single'>nothing</span> is left, and on the other as unique, <span class='underline_single'>the world</span>. Thus idealism, strictly thought out, leads to realism. [<em>Cf</em>. 5.64.]<br>\",\"date\":\"1916-10-15\",\"pt-number\":\"5·3355\",\"pt-page\":\"85[4]\",\"tlp-number\":\"5·64\",\"cross-references\":\"2.9.16 (1,2)   15.10.16 (21)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,64r[3] et 65r[1] (1916--1017) (NB)\",\"ger\":\"Und in diesem Sinne kann ich auch  / von einem der ganzen Welt gemeinsamen Willen sprechen. <br>     Aber dieser Wille ist in einem höheren Sinne <span class='underline_single'>mein</span> Wille. <br>\",\"eng\":\"And in this sense I can also speak of a will common to the whole world. <br>     But in a more elevated sense this will is <span class='underline_single'>my</span> will.<br>\",\"date\":\"1916-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,65r[2] (1916--1017) (NB)\",\"ger\":\"Wie meine Vorstellung die Welt ist so ist mein Wille der Welt-Wille. <br>\",\"eng\":\"Just as my idea is the world, my will is the world-will.<br>\",\"date\":\"1916-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,65r[3] (1916--1020) (NB)\",\"ger\":\"Es ist klar daß mein Gesichtsraum der Länge nach anders beschaffen ist als der Breite nach. <br>\",\"eng\":\"It is clear that my visual space is constituted differently in length than in breadth.<br>\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,65r[4] et 66r[1] (1916--1020) (NB)\",\"ger\":\"Es verhält sich nicht so, daß ich mich einfach überall bemerke wo ich etwas sehe, sondern ich befinde mich auch immer in einem bestimmten Punkt meines Gesichtsraumes  / mein Gesichtsraum hat also quasi eine Form. <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,66r[2] (1916--1020) (NB)\",\"ger\":\"Trotzdem aber ist es wahr daß ich das Subjekt nicht sehe. <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,66r[3] (1916--1020) (NB)\",\"ger\":\"Es ist wahr daß das erkennende Subjekt nicht in der Welt ist, daß es kein erkennendes Subjekt gibt. <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"5·3354\",\"pt-page\":\"60[3]\",\"tlp-number\":\"5·631 (1)\",\"cross-references\":\"5.8.16 (1)+20.10.16 (4)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,66r[4] et 67r[1] (1916--1020) (NB)\",\"ger\":\" Ich kann mir jedenfalls vorstellen daß ich den Willensakt ausführe um meinen Arm zu heben aber mein Arm sich nicht bewegt. (Eine Sehne sei etwa gerissen.) Ja, aber wird man sagen, die Sehne bewegt sich doch und  / dies zeigt eben daß sich mein Willensakt auf die Sehne und nicht auf den Arm bezogen hat. Aber gehen wir weiter und nehmen an, auch die Sehne bewegte sich nicht und so fort. Wir würden dann dazu kommen, daß sich der Willensakt überhaupt nicht auf einen Körper bezieht, daß es also im gewöhnlichen Sinne des Wortes keinen Willensakt gibt. <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,67r[2] (1916--1020) (NB)\",\"ger\":\"Das künstlerische Wunder ist, daß es die Welt gibt. Daß es das gibt was es gibt. <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,68r[1] (1916--1020) (NB)\",\"ger\":\"Ist das das Wesen der künstlerischen Betrachtungsweise, daß sie die Welt mit glücklichem Auge betrachtet? <br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,68r[2] (1916--1020) (NB)\",\"ger\":\"Ernst ist das Leben heiter ist die Kunst.<br>\",\"eng\":\"\",\"date\":\"1916-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,68r[3] (1916--1021) (NB)\",\"ger\":\"Denn etwas ist wohl an der Auffassung als sei das Schöne der Zweck der Kunst. Und das Schöne ist eben das was glücklich macht. <br>\",\"eng\":\"\",\"date\":\"1916-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,68r[4] et 69r[1] (1916--1029) (NB)\",\"ger\":\"     Könnte man nicht sagen die Allgemeinheit ist der Zusammensetzung ebensowenig koordiniert wie Tatsache dem Ding? / Beide Arten von Operationszeichen müssen oder können im Satz nebeneinander vorkommen. <br>\",\"eng\":\"\",\"date\":\"1916-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,69r[2] (1916--1104) (NB)\",\"ger\":\"Ist der Wille eine Stellungnahme zur Welt. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,69r[3] (1916--1104) (NB)\",\"ger\":\" Der Wille scheint sich immer auf eine Vorstellung beziehen zu müssen. Wir können uns z.B. nicht vorstellen daß wir einen Willensakt ausgeführt hätten ohne gespürt zu haben daß wir ihn ausgeführt haben. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,69r[4] et 70r[1] (1916--1104) (NB)\",\"ger\":\" Es könnte sonst etwa die Frage entstehen  / ob er schon <span class='underline_single'>ganz</span> ausgeführt sei. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,70r[2] (1916--1104) (NB)\",\"ger\":\" Es ist sozusagen klar, daß wir für den Willen einen Halt in der Welt brauchen. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,70r[3] (1916--1104) (NB)\",\"ger\":\"Der Wille ist eine Stellungnahme des Subjekts zur Welt. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,70r[4] (1916--1104) (NB)\",\"ger\":\"Das Subjekt ist das wollende Subjekt. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,70r[5] et 71r[1] (1916--1104) (NB)\",\"ger\":\"Haben die Gefühle die mich von dem Vorgang eines Willensakts überzeugen irgend eine besondere Eigenschaft die sie von anderen Vorstellungen  / unterscheidet? <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,71r[2] (1916--1104) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,71r[3] (1916--1104) (NB)\",\"ger\":\"Dann wäre es aber denkbar daß ich etwa daraufkäme daß z.B. dieser Sessel direkt meinem Willen folgt. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,71r[4] (1916--1104) (NB)\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,71r[5] et 72r[1] (1916--1104) (NB)\",\"ger\":\"Bei dem Zeichnen des Vierecks <br>  im Spiegel bemerkt man daß man es nur ausführen kann wenn man vom Gesichtsbild ganz absieht und nur das Muskelgefühl zu Hilfe nimmt ❘ ∙ also handelt es sich hier  / doch um zwei ganz verschiedene Willensakte. ∙ ❘ Der eine bezieht sich auf den Gesichtsteil der Welt der andere auf den Teil des Muskelgefühls. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,72r[2] (1916--1104) (NB)\",\"ger\":\"Haben wir mehr als erfahrungsmäßige Evidenz daß es sich in beiden Fällen um die Bewegung desselben Körperteils handelt? <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,72r[3] (1916--1104) (NB)\",\"ger\":\" Verhält es sich also so daß ich meine Handlungen mit meinem Willen nur begleite? <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,72r[4] et 73r[1] (1916--1104) (NB)\",\"ger\":\"Aber wie kann ich dann  / voraussagen – und das kann ich doch in einem gewissen Sinne – daß ich in 5 Minuten meinen Arm heben werde? Daß ich dies wollen werde? <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,73r[2] (1916--1104) (NB)\",\"ger\":\"Es ist klar: Es ist unmöglich zu wollen ohne nicht schon den Willensakt auszuführen. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,73r[3] (1916--1104) (NB)\",\"ger\":\" Der Willensakt ist nicht die Ursache der Handlung sondern die Handlung selbst. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,73r[4] (1916--1104) (NB)\",\"ger\":\"Man kann nicht wollen ohne zu tun. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,74r[1] (1916--1104) (NB)\",\"ger\":\"Wenn der Wille ein Objekt in der Welt haben muß so kann es auch die beabsichtigte Handlung sein. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,74r[2] (1916--1104) (NB)\",\"ger\":\"Und der Wille muß ein Objekt haben. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,74r[3] (1916--1104) (NB)\",\"ger\":\"Sonst hätten wir gar keinen Halt und könnten nicht wissen was wir wollten. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,74r[4] (1916--1104) (NB)\",\"ger\":\"Und könnten nicht Verschiedenes wollen. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,74r[5] et 75r[1] (1916--1104) (NB)\",\"ger\":\" Geschieht denn nicht die gewollte Bewegung des Körpers gerade so wie jedes Ungewollte in  / der Welt nur daß sie vom Willen begleitet ist? <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,75r[2] (1916--1104) (NB)\",\"ger\":\" Aber sie ist nicht nur vom <span class='underline_single'>Wunsch</span> begleitet! Sondern vom Willen. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,75r[3] (1916--1104) (NB)\",\"ger\":\"Wir fühlen uns sozusagen für die Bewegung verantwortlich. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,75r[4] (1916--1104) (NB)\",\"ger\":\"Mein Wille greift irgendwo in der Welt an, und an andern greift er wieder nicht an. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,75r[5] (1916--1104) (NB)\",\"ger\":\"Wünschen ist nicht Tun. Aber, Wollen ist Tun. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,75r[6] et 76r[1] (1916--1104) (NB)\",\"ger\":\"(Mein Wunsch bezieht sich z.B. auf die Bewegung  / des Sessels, mein Willen auf ein Muskelgefühl.) <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,76r[2] (1916--1104) (NB)\",\"ger\":\"Daß ich einen Vorgang will besteht darin daß ich den Vorgang mache nicht darin daß ich etwas anders tue was den Vorgang verursacht. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,76r[3] (1916--1104) (NB)\",\"ger\":\"Wenn ich etwas bewege so bewege ich mich. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,76r[4] (1916--1104) (NB)\",\"ger\":\"Wenn ich einen Vorgang mache so gehe ich vor. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,76r[5] (1916--1104) (NB)\",\"ger\":\"Aber: Ich kann nicht alles wollen. – <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,77r[1] (1916--1104) (NB)\",\"ger\":\"Aber was heißt das: „Ich kann <span class='underline_single'>das</span> nicht wollen.” <br>     Kann ich denn versuchen etwas zu wollen. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,77r[2] (1916--1104) (NB)\",\"ger\":\"     Es scheint nämlich durch die Betrachtung des Wollens als stünde ein Teil der Welt mir näher als ein anderer (was unerträglich wäre). <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,77r[3] (1916--1104) (NB)\",\"ger\":\"Aber freilich ist es ja unleugbar daß ich in einem populären Sinne Gewisses tue und anderes nicht tue. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,77r[4] et 78r[1] (1916--1104) (NB)\",\"ger\":\"So stünde also der Wille der Welt nicht  / äquivalent gegenüber was unmöglich sein muß. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,78r[2] (1916--1104) (NB)\",\"ger\":\"Der Wunsch geht dem Ereignis voran der Wille begleitet es. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,78r[3] (1916--1104) (NB)\",\"ger\":\" / \\\\\\tAngenommen ein Vorgang würde meinen Wunsch begleiten. Hatte ich den Vorgang gewollt. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,78r[4] (1916--1104) (NB)\",\"ger\":\" Schiene dies Begleiten nicht zufällig im Gegensatz zu dem gezwungen des Willens. <br>\",\"eng\":\"\",\"date\":\"1916-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,78r[5] et 79r[1] (1916--1108) (NB)\",\"ger\":\"Ist der Glaube eine Erfahrung? <br>Ist der Gedanke eine  / Erfahrung? <br>\",\"eng\":\"\",\"date\":\"1916-11-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,79r[2] (1916--1108) (NB)\",\"ger\":\"Alle Erfahrung ist Welt und braucht nicht das Subjekt. <br>\",\"eng\":\"\",\"date\":\"1916-11-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,79r[3] (1916--1108) (NB)\",\"ger\":\"Der Willensakt ist keine Erfahrung. <br>\",\"eng\":\"\",\"date\":\"1916-11-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,79r[4] (1916--1119) (NB)\",\"ger\":\"Was für ein Grund ist da, zur Annahme eines wollenden Subjekts? <br>\",\"eng\":\"\",\"date\":\"1916-11-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,79r[5] (1916--1119) (NB)\",\"ger\":\"Genügt nicht wieder <span class='underline_single'>meine Welt</span> zur Individualisierung? <br>\",\"eng\":\"\",\"date\":\"1916-11-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,79r[6] et 80r[1] (1916--1121) (NB)\",\"ger\":\"Daß es möglich ist die allgemeine Satzform aufzustellen sagt nichts anderes als: Jede mögliche Satzform  / muß sich <span class='underline_single'>voraussehen</span> <span class='underline_double'>lassen</span>. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"4·43012\",\"pt-page\":\"78[11]\",\"tlp-number\":\"4·5 (3a) \",\"cross-references\":\"16.4.16 (1)+   21.11.16 (1)+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,80r[2] (1916--1121) (NB)\",\"ger\":\"Und <span class='underline_single'>das</span> heißt: Wir können nie zu einer Satzform kommen von der wir sagen könnten: Ja daß es so etwas gibt, das hat sich nicht voraussehen lassen. <br>     Denn das würde heißen daß wir eine neue Erfahrung gemacht hätten die erst diese Satzform ermöglicht hat. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,80r[3] et 81r[1] (1916--1121) (NB)\",\"ger\":\"Also: Die allgemeine Satzform muß sich aufstellen lassen, weil die möglichen Satzformen a priori sein müssen. / Weil die möglichen Satzformen a priori sind, darum gibt es die allgemeine Satzform. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,81r[2] (1916--1121) (NB)\",\"ger\":\"Dabei ist es vollkommen gleichgültig ob die gegebenen Grundoperationen durch die alle Sätze entstehen sollen dieselben über die logischen Stufen hinausführen, oder ob sie innerhalb der Stufen bleiben. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,81r[3] (1916--1121) (NB)\",\"ger\":\"Einen Satz den wir jemals werden bilden können, hätten wir auch jetzt gleich bilden können. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,81r[4] et 82r[1] (1916--1121) (NB)\",\"ger\":\"Wir brauchen jetzt die  / Klärung des Begriffes der atomistischen Funktion und des Begriffes „und so weiter”. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,82r[2] (1916--1121) (NB)\",\"ger\":\"Der Begriff „Und so weiter”, in Zeichen „ …”, ist einer der allerwichtigsten und wie alle anderen unendlich fundamental. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,82r[3] (1916--1121) (NB)\",\"ger\":\"Durch ihn allein nämlich sind wir berechtigt die Logik resp. Mathematik „so weiter” aus den Grundgesetzen und Urzeichen aufzubauen. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,82r[4] et 83r[1] (1916--1121) (NB)\",\"ger\":\"Das „Und so weiter” tritt sofort im Uranfang der alten Logik ein  / wenn gesagt wird daß wir nun nach der Angabe der Urzeichen ein Zeichen nach dem anderen „so weiter” entwickeln können. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,83r[2] (1916--1121) (NB)\",\"ger\":\"Ohne diesen Begriff würden wir bei den Urzeichen einfach stehen bleiben und könnten nicht „<span class='underline_single'>weiter</span>”. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,83r[3] (1916--1121) (NB)\",\"ger\":\"Der Begriff „und so weiter” ist äquivalent mit dem Begriffe der Operation. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\" 118[5] \",\"tlp-number\":\"             5·2523+\",\"cross-references\":\"21.11.16 (12)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,83r[4] et 84r[1] (1916--1121) (NB)\",\"ger\":\"Nach dem Operationszeichen folgt das Zeichen „ …”, welches bedeutet  / daß das Resultat der Operation wieder zur Basis derselben Operation genommen werden kann; „und so weiter”. <br>\",\"eng\":\"\",\"date\":\"1916-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,84r[2] (1916--1122) (NB)\",\"ger\":\"Der Begriff der Operation ist ganz allgemein derjenige, nach welchem nach einer Regel Zeichen gebildet werden können. <br>\",\"eng\":\"\",\"date\":\"1916-11-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,84r[3] (1916--1123) (NB)\",\"ger\":\"Worauf stützt sich die Möglichkeit der Operation. <br>\",\"eng\":\"\",\"date\":\"1916-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,84r[4] (1916--1123) (NB)\",\"ger\":\"Auf den allgemeinen Begriff der strukturellen Ähnlichkeit. <br>\",\"eng\":\"\",\"date\":\"1916-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,85r[1] (1916--1123) (NB)\",\"ger\":\"Wie ich z.B. die Elementarsätze auffasse, muß ihnen etwas gemeinsam sein; sonst könnte ich überhaupt nicht kollektiv von ihnen allen als den „Elementarsätzen” sprechen. <br>\",\"eng\":\"\",\"date\":\"1916-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,85r[2] (1916--1123) (NB)\",\"ger\":\"Dann müssen sie aber auch als Resultate von Operationen aus einander entwickelt werden können. <br>\",\"eng\":\"\",\"date\":\"1916-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,85r[3] et 86r[1] (1916--1123) (NB)\",\"ger\":\"Denn wenn zwei Elementarsätzen wirklich etwas gemeinsam ist was einem Elementarsatz und einem zusammengesetzten nicht gemeinsam ist, so  / muß sich dies Gemeinsame irgend wie allgemein zum Ausdruck bringen lassen. <br>\",\"eng\":\"\",\"date\":\"1916-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,86r[2] (1916--1124) (NB)\",\"ger\":\"Wenn das allgemeine Kennzeichen der Operation bekannt sein wird dann wird auch klar sein aus welchen Elementarbestandteilen eine <span class='underline_single'>Operation</span> immer besteht. <br>\",\"eng\":\"\",\"date\":\"1916-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,86r[3] (1916--1124) (NB)\",\"ger\":\"Wenn die allgemeine Form der Operation gefunden ist so haben wir auch die allgemeine Form des Auftretens des Begriffs „Und so weiter”. <br>\",\"eng\":\"\",\"date\":\"1916-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,87r[1] (1916--1126) (NB)\",\"ger\":\"Alle Operationen sind aus den Grundoperationen zusammengesetzt. <br>\",\"eng\":\"\",\"date\":\"1916-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,87r[2] (1916--1127? --1128?) (NB)\",\"ger\":\"Entweder eine Tatsache ist in einer anderen enthalten, oder sie ist unabhängig von ihr. <br>\",\"eng\":\"\",\"date\":\"1916-11-27\",\"pt-number\":\" 1·21\",\"pt-page\":\"78[10]\",\"tlp-number\":\"1·21\",\"cross-references\":\"28.11.16+\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,87r[3] (1916--1202) (NB)\",\"ger\":\"Die Ähnlichkeit der Allgemeinheitsbezeichnung mit dem Argument zeigt sich wenn wir statt φa schreiben (ax).φx. <br>\",\"eng\":\"\",\"date\":\"1916-12-02\",\"pt-number\":\"     5·322\",\"pt-page\":\"63[5]\",\"tlp-number\":\"3.11.14 (12)** 2.12.16 (1)+  (Pilch: 5·3221)\",\"cross-references\":\"3.11.14 (12)** 2.12.16 (1)+  (Pilch: 5·3221)\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,87r[4] et 88r[1] (1916--1202) (NB)\",\"ger\":\"Man könnte die Argumente auch so einführen daß sie nur auf einer Seite des Gleichheitszeichens  / auftreten. Also immer analog „(∃x) ∙ φx ∙ x = a” statt „φa”. <br>\",\"eng\":\"\",\"date\":\"1916-12-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,88r[2] (1916--1202) (NB)\",\"ger\":\" / \\\\\\tDie richtige Methode in der Philosophie wäre eigentlich die nichts zu sagen als was sich sagen läßt also Naturwissenschaftliches also etwas was mit Philosophie nichts zu tun hat. Und dann immer wenn ein anderer etwas Metaphysisches sagen wollte ihm nachweisen daß er gewissen Zeichen in seinen Sätzen keine Bedeutung gegeben hat. <br>\",\"eng\":\"\",\"date\":\"1916-12-02\",\"pt-number\":\"6·53\",\"pt-page\":\"85[7]\",\"tlp-number\":\"6·53 a\",\"cross-references\":\"2.12.16 (3)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,88r[3] et 89r[1] (1916--1202) (NB)\",\"ger\":\" / \\\\\\tDiese Methode wäre für  / den anderen unbefriedigend (er hätte nicht das Gefühl daß wir ihn Philosophie lehrten) aber sie wäre die einzig richtige. <br>\",\"eng\":\"\",\"date\":\"1916-12-02\",\"pt-number\":\"6·531\",\"pt-page\":\"86[1]\",\"tlp-number\":\"6·53 b*\",\"cross-references\":\"2.12.16 (4)*\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,89r[2] (1917--0107) (NB)\",\"ger\":\"         86[4]\\t—\\t\\t<span class='underline_single'>7.1.17 (1,2,</span><span class='underline_single'>4)*</span><span class='underline_single'>*</span><br>In dem Sinne, in welchem es eine Hierarchie der Sätze gibt, gibt es, natürlich, auch eine Hierarchie der Wahrheiten und der Verneinungen etc. <br>\",\"eng\":\"\",\"date\":\"1917-01-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,89r[3] (1917--0107) (NB)\",\"ger\":\"         86[4]\\t—\\t\\t<span class='underline_single'>7.1.17 (1,2,</span><span class='underline_single'>4)*</span><span class='underline_single'>*</span><br>/ \\\\\\tIn dem Sinne aber in welchem es, im allgemeinsten Sinne, Sätze gibt, gibt es nur eine Wahrheit und eine Verneinung. <br>\",\"eng\":\"\",\"date\":\"1917-01-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,90r[1] (1917--0107) (NB)\",\"ger\":\"Dieser Sinn wird aus jenem gewonnen indem der Satz im allgemeinen aufgefaßt wird als das Resultat der <span class='underline_single'>einen</span> Operation, welche alle Sätze aus der untersten Stufe erzeugt. etc. <br>\",\"eng\":\"\",\"date\":\"1917-01-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,90r[2] (1917--0107) (NB)\",\"ger\":\"         86[4]\\t—\\t\\t<span class='underline_single'>7.1.17 (1,2,</span><span class='underline_single'>4)*</span><span class='underline_single'>*</span><br> / \\\\\\tDie unterste Stufe und die Operation kann die ganze Hierarchie vertreten. <br>\",\"eng\":\"\",\"date\":\"1917-01-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,90r[3] (1917--0108) (NB)\",\"ger\":\"Es ist klar daß das logische Produkt zweier Elementarsätze nie eine Tautologie sein kann. <br>\",\"eng\":\"\",\"date\":\"1917-01-08\",\"pt-number\":\" 6·3752\",\"pt-page\":\"94[6]\",\"tlp-number\":\"6·3751 (3)** \",\"cross-references\":\"8.1.17 (1,2)**\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,91r[1] (1917--0108) (NB)\",\"ger\":\"Ist das logische Produkt zweier Sätze eine Kontradiktion und die Sätze scheinen Elementarsätze zu sein. So sieht man daß in diesem Falle der Schein trügt. (Z.B.: A ist rot und A ist grün.) <br>\",\"eng\":\"\",\"date\":\"1917-01-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,91r[2] (1917--0110) (NB)\",\"ger\":\"Wenn der Selbstmord erlaubt ist dann ist alles erlaubt. <br>\",\"eng\":\"\",\"date\":\"1917-01-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,91r[3] (1917--0110) (NB)\",\"ger\":\"Wenn etwas nicht erlaubt ist dann ist der Selbstmord nicht erlaubt. <br>\",\"eng\":\"\",\"date\":\"1917-01-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,92r[1] (1917--0110) (NB)\",\"ger\":\"Dies wirft ein Licht auf das Wesen der Ethik. Denn der Selbstmord ist sozusagen die elementare Sünde. <br>\",\"eng\":\"\",\"date\":\"1917-01-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"recto\",\"manuscript\":\"Ms-103,92r[2] (1917--0110) (NB)\",\"ger\":\"Und wenn man ihn untersucht so ist es wie wenn man den Quecksilberdampf untersucht um das Wesen der Dämpfe zu erfassen. <br>\",\"eng\":\"\",\"date\":\"1917-01-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"}];\n\n//# sourceURL=webpack:///./src/recto.json?");

/***/ }),

/***/ "./src/verso.json":
/*!************************!*\
  !*** ./src/verso.json ***!
  \************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, default */
/***/ (function(module) {

eval("module.exports = [{\"type\":\"verso\",\"manuscript\":\"Ms-101,1r[1]\",\"ger\":\"Vorgestern bei der Assentierung genommen worden & dem 2ten Festungsartillerie-Regiment in Krakau zugeteilt. Gestern vormittag von Wien ab. Komme heute vormittag in Krakau an. Guter Stimmung. Gab mein großes Schreibebuch Trenkler zur Aufbewahrung. Werde ich jetzt arbeiten können??? Sehr gespannt auf mein kommendes Leben! Die Militärbehörden in Wien waren von einer unglaublichen Freundlichkeit. Leute die von Tausenden täglich um Rat gefragt werden gaben freundliche & ausführliche Antworten. So etwas ermutigt ungeheuer. Es erinnerte mich an englische Verhältnisse. <br>\",\"eng\":\"The day before yesterday was accepted after the medical examination for military service and assigned to the 2nd Fortress Artillery Regiment in Kraków. Left Vienna yesterday morning. Arriving in Kraków this morning. Good mood. Gave my large notebook to Trenkler for safekeeping. Will I be able to get work done now??? Very curious about my future life! The military authorities in Vienna were incredibly friendly. People who were asked thousands of questions every day gave friendly and exhaustive answers. Such things are tremendously encouraging. It reminded me of the English way of doing things.<br>\",\"date\":\"1914-08-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,1r[2] et 2r[1]\",\"ger\":\"Als Rekrut eingekleidet worden. Wenig Hoffnung meine technischen Kenntnisse verwenden zu können. Brauch <span class='underline_single'>sehr</span> viel gute Laune & Philosophie um mich hier zurecht zu finden. Als ich heute aufwachte / war es mir wie in einem jener Träume worin man plötzlich ganz unsinniger Weise wieder in der Schule sitzt. In meiner Stellung ist freilich auch viel Humor & ich verrichte die niedrigsten Dienste mit fast ironischem Lächeln. Nicht gearbeitet. Dies ist eine Feuerprobe des Charakters eben darum weil so viel Kraft dazu gehört die gute Stimmung & die Energie nicht zu verlieren.<br>\",\"eng\":\"Have been kitted out as a recruit. Little hope of being able to make use of my technical knowledge. Need a <span class='underline_single'>great</span> deal of good humor and philosophy to find my way about here. When I woke up today it was as if I was in one of those dreams where you suddenly and absurdly find yourself back at school. Of course, my position has its amusing side too and I carry out the basest duties with an almost ironic smile. Got no work done. This is a trial by fire of character precisely because so much strength is needed in order not to lose one’s good mood and energy.<br>\",\"date\":\"1914-08-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,2r[2]\",\"ger\":\"Schlecht geschlafen (Ungeziefer). Nachdem ich das Zimmer gekehrt hatte marschierten wir zu ein paar alten Mörsern und wurden im Gebrauch instruiert. Furchtbar heiß. Das Essen ist uneßbar. Werde vielleicht in Zukunft außerhalb der Kaserne schlafen. An David geschrieben. Sehne mich schon nach einem Brief von ihm um das Gefühl des Kontakts mit meinem früheren Leben nicht zu verlieren. Noch nicht gearbeitet.<br>\",\"eng\":\"Slept badly (bugs). After I swept the room we marched up to a few old mortars and were taught how to use them. Terribly hot. The food is inedible. Will perhaps sleep outside the barracks in future. Wrote to David. Am already longing for a letter from him so as not to lose the feeling of being in touch with my former life. Haven’t got any work done yet.<br>\",\"date\":\"1914-08-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,2r[3] et 3r[1]\",\"ger\":\"Vorgestern beim Hauptmann gewesen. War sehr verdattert und stand nicht militärmäßig vor ihm. Er war etwas ironisch und mir nicht / recht sympathisch. Resultat = 0. Heute kam es heraus daß ich Matura etc. gemacht hatte worauf eine ganze Reihe der Einjährigen mich mit Herr Kollege betitelten & auf mich eindrangen ich solle doch mein Freiwilligenrecht geltend machen. Dies machte mir Spaß(. It bucked me up). Gestern & heute starken Katarrh & oft Unwohlbefinden. Manchmal ein wenig deprimiert. Traf heute in der Kantine einen Leutnant dem es auffiel daß ich dort zu Mittag aß. Er fragte mich sehr nett was ich im Zivil sei wunderte sich sehr daß sie mich nicht zu den einjährig Freiwilligen genommen hatten & war überhaupt sehr freundlich was mir sehr wohl tat.<br>\",\"eng\":\"Met the captain the day before yesterday. Was very confused and failed to stand at attention in the military way. He was somewhat ironic and not really my cup of tea. Result = 0. Today it came out that I had passed the school leaving exam etc. whereupon some people who had done that called me “dear colleague” and urged me to assert my right to volunteer. I enjoyed this. (It bucked me up.) Heavy catarrh yesterday and today and often feeling unwell. Sometimes a little depressed. Met a lieutenant in the canteen today who noticed that I was having lunch there. He asked me very nicely what I did in ordinary life, was very surprised that they hadn't enlisted me as a one-year volunteer and was generally very friendly, which pleased me a lot.<br>\",\"date\":\"1914-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,3r[2] et 4r[1] et 5r[1]\",\"ger\":\"Es geschieht so viel daß mir ein Tag so lange vorkommt wie eine Woche. Bin gestern zur Bedienung eines Scheinwerfers auf einem von uns gekaperten Schiffe auf der Weichsel / beordert worden. Die Bemannung ist eine Saubande! Keine Begeisterung, unglaubliche Rohheit, Dummheit & Bosheit! Es ist also doch nicht wahr daß die gemeinsame große Sache die Menschen adeln <span class='underline_single'>muß</span>. Hierdurch wird auch die lästigste Arbeit zum Frondienst. Es ist merkwürdig wie sich die Menschen ihre Arbeit selbst zu einer häßlichen Mühsal machen. Unter allen unseren äußeren Umständen könnte die Arbeit auf diesem Schiffe eine herrliche glückliche Zeit geben und statt dessen! — Es wird wohl unmöglich sein sich hier mit den Leuten zu verständigen (außer etwa mit dem Leutnant der ein ganz netter Mensch zu sein scheint). Also in <span class='underline_single'>Demut</span> die Arbeit verrichten und sich selbst um Gottes willen nicht verlieren!!!! Nämlich am leichtesten verliert man sich / selbst wenn man sich anderen Leuten schenken will.<br>\",\"eng\":\"So much happens that a day seems as long as a week to me. I was ordered yesterday to operate a searchlight on a ship we captured on the Vistula.  The crew are a pack of pigs! No enthusiasm, unbelievably crude, stupid, and malicious! So it is not true, after all, that a great common cause <span class='underline_single'>must</span> make men nobler. As a result, utter drudgery becomes a kind of slave labour. It is odd how people make their own work into hideous toil. In all our external circumstances, our work on this boat could be a wonderfully happy time, and instead! - It will probably be impossible to communicate with the people here (except, perhaps, for the Lieutenant who seems to be a fairly nice person). So do your work <span class='underline_single'>humbly</span> and don't lose yourself for God's sake!!!!  The easiest way to lose oneself is to want to give oneself to other people.   <br>\",\"date\":\"1914-08-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,5r[2]\",\"ger\":\"Auf der „Goplana”. Nochmals: Die Dummheit, Frechheit & Bosheit dieser Menschen kennt keine Grenzen. Jede Arbeit wird zur Qual. Aber ich habe heute schon wieder gearbeitet & werde mich nicht unterkriegen lassen. Schrieb heute eine Karte an den lieben David. Der Himmel beschütze ihn & erhalte mir seine Freundschaft! — Die Fahrt selbst entlang der Weichsel ist herrlich & ich bin in guter Stimmung.<br>\",\"eng\":\"On the \\\"Goplana\\\". Once again: The stupidity, insolence and wickedness of these people knows no bounds. Every job grows into a torment. But I have already got work done again today and will not lose heart. Wrote a card to dear David today. Heaven protect him and maintain his friendly feelings for me! - The journey itself along the Vistula is wonderful and I'm in a good mood.<br>\",\"date\":\"1914-08-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,5r[3]\",\"ger\":\"ζTη<br>\",\"eng\":\"ζTη<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,5r[4] et 6r[1]\",\"ger\":\"Ein Gaunerpack! Die Offiziere nur sind nette Menschen & zum Teil wirklich / <span class='underline_single'>sehr</span> fein. Müssen auf der bloßen Erde schlafen und ohne Decken. Sind jetzt in Rußland. Durch die schwere Arbeit bin ich ganz unsinnlich geworden. Heute noch nicht gearbeitet. G.S.. Auf dem Deck ist es zu kalt & unten sind zu viel Menschen die sprechen, schreien, stinken etc. etc.Bos<br>\",\"eng\":\"A gang of crooks! Only the officers are nice people, and some really <span class='underline_single'>very</span> fine. Have to sleep on bare ground and without blankets. Are in Russia now. Due to the hard work, I have become completely unsensual. Haven’t worked yet today. Good mood.  It’s too cold on deck and below there are too many men talking, screaming, stinking etc. etc.<br>\",\"date\":\"1914-08-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,6r[2] et 7r[1]\",\"ger\":\"Nachts um 1 werde ich plötzlich geweckt, der Oberleutnant fragt nach mir & sagt ich müsse sofort zum Scheinwerfer. “Nicht anziehen\\\". Ich lief fast nackt auf die Kommandobrücke. Eisige Luft, Regen. Ich war sicher jetzt würde ich sterben. Setzte den Scheinwerfer in Gang & zurück mich anzukleiden. Es war falscher Alarm. Ich war <span class='underline_single'>furchtbar</span> aufgeregt und stöhnte laut. Ich empfand die Schrecken des Krieges. Jetzt (abends) / habe ich den Schreck schon wieder überwunden. Ich werde mein Leben mit aller Kraft zu erhalten trachten wenn ich nicht meinen gegenwärtigen Sinn ändere.<br>\",\"eng\":\"At 1 am I’m suddenly woken up, the lieutenant asks for me and says I have to man the searchlight immediately. \\\"Don't get dressed.\\\" I ran onto the command bridge almost naked. Icy air, rain. I was sure I’d die now. Turned the searchlight on and went back to get dressed. It was a false alarm. I was <span class='underline_single'>frightfully</span> agitated & groaned out loud. I felt the horrors of war. Now (in the evening) I have got over the horror again. If I don’t lose my present orientation, I will try with all my strength to stay alive.<br>\",\"date\":\"1914-08-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,7r[2]\",\"ger\":\"Der Leutnant & ich haben schon oft über alles Mögliche gesprochen; ein sehr netter Mensch. Er kann mit den größten Halunken umgehen und freundlich sein ohne sich etwas zu vergeben. Wenn wir einen Chinesen hören so sind wir geneigt sein Sprechen für ein unartikuliertes Gurgeln zu halten. Einer der Chinesisch versteht wird darin die <span class='underline_single'>Sprache</span> erkennen. So kann ich oft nicht den <span class='underline_single'>Menschen</span> im Menschen erkennen etc.. Ein wenig aber erfolglos gearbeitet.<br>\",\"eng\":\"The lieutenant and I have already talked many times about all kinds of thing; a very nice man. He is able to get along with the biggest scoundrels and be friendly without compromising himself. When we hear a Chinese person we tend to take their speech for inarticulate gurgling. One who understands Chinese will perceive the <span class='underline_single'>language</span> in it. In the same way, I’m often unable to perceive the<span class='underline_single'> human being</span> in someone etc.  Worked a little, but without success.<br>\",\"date\":\"1914-08-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,7r[3] et 8r[1]\",\"ger\":\"φ(p)       φ((ζ) ψζ)<br>\",\"eng\":\"φ(p)       φ((ζ) ψζ)<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,8r[2]\",\"ger\":\"Ob es jetzt für immer mit meinem Arbeiten aus ist?!! Das weiß der Teufel. Ob mir nie mehr etwas einfallen wird? Ich bin mit allen den Begriffen meiner Arbeit ganz & gar \\\"unfamiliär\\\". Ich <span class='underline_double'>sehe</span> gar nichts!!!<br>\",\"eng\":\"Will I never be able to do my work again?!! The devil alone knows. Will I ever have new ideas? All the notions distinctive of my work seem utterly “unfamiliar” to me. I don't <span class='underline_double'>see</span> anything at all!!!<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,8r[3]\",\"ger\":\"Stehen schon 3 Tage auf einer Sandbank. Arbeite oft mit vielen Unterbrechungen & bisher ganz erfolglos. Kann noch immer auf nichts <span class='underline_single'>Festes</span> kommen. Alles geht in Dunst auf. Nur zu!!!<br>\",\"eng\":\"Have been stuck on a sandbar for 3 days. Work, often with many interruptions, and so far completely unsuccessfully. Still can't come up with anything <span class='underline_single'>solid</span>. Everything dissolves in fog. Go ahead!!!<br>\",\"date\":\"1914-08-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,9r[2] et 10r[1] et 11r[1]\",\"ger\":\"Gestern ein furchtbarer Tag. Abends wollte der Scheinwerfer nicht funktionieren. Als ich ihn untersuchen wollte wurde ich von der Mannschaft durch Zurufe / Grölen etc. gestört. Wollte ihn genauer untersuchen da nahm ihn der Zugsführer mir aus der Hand. Ich kann gar nicht weiter schreiben. Es war entsetzlich. Das Eine habe ich gesehen: Es ist nicht ein einziger anständiger Kerl in der ganzen Mannschaft. Wie aber soll ich mich in Zukunft zu dem Allen stellen? Soll ich einfach dulden? Und wenn ich das nicht tun will? Dann muß ich in einem fortwährenden Kampf leben. Was ist besser? Im 2. Fall würde ich mich <span class='underline_single'>sicher</span> aufreiben. Im ersten <span class='underline_single'>vielleicht</span> nicht. Es wird jetzt für mich eine <span class='underline_single'>enorm</span> schwere Zeit kommen denn ich bin jetzt tatsächlich wieder so verkauft und verraten wie seinerzeit in der Schule in Linz. Nur eines ist nötig: Alles was einem geschieht betrachten / können; <span class='underline_double'>sich sammeln</span>! Gott helfe mir!<br>\",\"eng\":\"Yesterday was an awful day. The searchlight wouldn’t work in the evening. When I wanted to examine it, the crew disrupted me with jeering, shouting, etc. Wanted to examine it more closely. The platoon leader took it from my hand. I can hardly go on writing. It was terrible. I saw one thing: there is not a single decent person in the whole crew. But what should be my future attitude towards all that? Should I simply go on suffering? And what if I don't want to do that? Then I’ll have to live in a perpetual struggle. What is better? In the second case, I would <span class='underline_single'>certainly</span> wear myself out. <span class='underline_single'>Maybe</span> not in the first. It will be an <span class='underline_single'>extremely</span> difficult time for me from now on because I have been betrayed and sold out just as I was long ago at school in Linz. Only one thing is necessary: to be able to contemplate everything that happens to you; <span class='underline_double'>collect yourself</span>! God help me!<br>\",\"date\":\"1914-08-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,11r[2]\",\"ger\":\"Habe mir gestern vorgenommen <span class='underline_single'>keinen Widerstand zu leisten</span>. Mein Äußeres sozusagen ganz leicht zu machen um mein Inneres ungestört zu lassen.<br>\",\"eng\":\"Yesterday, I resolved <span class='underline_single'>to not put up any resistance</span>. To make my exterior very light, so to speak, to leave my interior undisturbed.<br>\",\"date\":\"1914-08-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,11r[3]\",\"ger\":\"Jede Nacht stehe ich auf der Kommandobrücke bis etwa 3½ a.m. Mein Vorhaben der vollkommenen Passivität habe ich noch nicht recht ausgeführt. Die Niedertracht der Kameraden ist mir noch immer schrecklich. Aber nur bei sich bleiben! Arbeite täglich etwas aber noch ohne rechten Erfolg. Obwohl schon manches aufdämmert.<br>\",\"eng\":\"Every night I stand on the command bridge until about 3:30 a.m. I have not yet fully carried out my plan of complete passivity. My comrades’ malice is still terrible to me. But just stay true to yourself! Get a little work done every day, yet still without any real success. Although some things are beginning to dawn.<br>\",\"date\":\"1914-08-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,11r[4] et 12r[1]\",\"ger\":\"Jede Nacht mit Ausnahme von gestern beim Scheinwerfer. Am Tag schlafe ich.<br>/ Dieser Dienst ist mir insofern angenehm als ich dadurch der Bosheit der Kameraden mehr entzogen bin Gestern hörten wir hier von einer enormen Schlacht die schon 5 Tage im Gang sei. Wäre es nur schon die Entscheidung! Gestern zum ersten Mal seit 3 Wochen onaniert. Bin fast ganz unsinnlich. Während ich mir früher immer Gespräche mit einem Freund vorstellte geschieht dies jetzt fast nie. Arbeite täglich ein ganz klein wenig bin aber zu müde und abgelenkt. Gestern fing ich an in Tolstois Erläuterungen zu den Evangelien zu lesen. Ein herrliches Werk. Es ist mir aber noch nicht das was ich davon erwartete.<br>\",\"eng\":\"Every night, except yesterday, on the searchlight. I sleep during the day.<br>This duty is pleasant to me insofar as it takes me further away from the malice of my comrades. Yesterday we heard about an enormous battle that has already been going on for 5 days. If only it were decisive! Masturbated yesterday for the first time in 3 weeks. I'm almost completely unsensual. While I used to imagine conversations with a friend, this almost never happens now. Work a little bit every day but am too tired and distracted. Yesterday I started reading Tolstoy's exposition of the Gospels. A magnificent work. But it does not yet offer me what I expected from it.<br>\",\"date\":\"1914-09-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,13r[3] \",\"ger\":\"Gestern nicht ganz erfolglos gearbeitet. In Tolstoi gelesen mit großem Gewinn.<br>\",\"eng\":\"Worked yesterday, not completely unsuccessfully. Read Tolstoy with great profit.<br>\",\"date\":\"1914-09-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,16v[2]\",\"ger\":\"Es geht! — Nur Mut! — Arbeite viel.<br>\",\"eng\":\"Things are moving! – Pluck up courage! - Work hard.<br>\",\"date\":\"1914-09-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,17v[2]\",\"ger\":\"Ich bin auf dem Wege zu einer großen Entdeckung. Aber ob ich dahingelangen werde?! Bin sinnlicher / als früher. Heute wieder onaniert. Draußen ist es eisig & stürmisch. Ich liege auf dem Stroh am Boden & schreibe & lese auf einem kleinen Holzkoffer (Preis 2˙50 Kronen).<br>\",\"eng\":\"I am on my way to a great discovery. But will I get there?! Am more sensual than before. Masturbated again today. It's icy and stormy outside. Am lying on the straw on the ground, writing and reading on a small wooden case (price 2.50 crowns).<br>\",\"date\":\"1914-09-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,18v[2]\",\"ger\":\"Werde von den meisten Kameraden nach wie vor gequält. Ich habe noch immer kein Verhalten dagegen gefunden das zufriedenstellend wäre. Zur vollkommenen Passivität habe ich mich noch nicht entschlossen. Und wahrscheinlich ist das eine Torheit; denn ich bin ja gegen alle diese Menschen ohnmächtig. Ich reibe mich <span class='underline_single'>nutzlos</span> auf wenn ich mich wehre.<br>\",\"eng\":\"Still being tormented by most of the comrades, as before. I still haven't found any response to it that would be satisfactory. I have not yet opted for outright passivity. And that's probably foolish, because I'm powerless against all these men. I wear myself out <span class='underline_single'>uselessly</span> if I defend myself.<br>\",\"date\":\"1914-09-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,20v[2]\",\"ger\":\"Erfuhr heute früh daß Lemberg von den Russen besetzt sei. Jetzt weiß ich daß wir hin sind! In den letzten 4 Tagen nicht Nachtdienst gehabt weil sehr helle Nächte waren. Jeden Tag viel gearbeitet und viel in Tolstois Erläuterung zu den Evangelien gelesen.<br>\",\"eng\":\"Learned this morning that Lemberg was occupied by the Russians. Now I know we are doomed! In the last 4 days haven’t had night duty because the nights were very bright. Worked a lot every day and read a lot in Tolstoy's exposition of the Gospels.<br>\",\"date\":\"1914-09-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,20v[3]\",\"ger\":\"Viel zu tun. Trotzdem ziemlich gearbeitet. Ohne bestimmten Erfolg aber nicht in der gewissen hoffnungslosen Stimmung.<br>\",\"eng\":\"A lot to do. In spite of that, worked pretty well. Without definite success but not in a completely hopeless mood.<br>\",\"date\":\"1914-09-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,20v[4] et 21v[1]\",\"ger\":\"Die Nachrichten werden immer schlechter. Heute nacht wird strenge Bereitschaft sein. Ich arbeite täglich mehr oder weniger und recht zuversichtlich. / Immer wieder sage ich mir im Geiste die Worte Tolstois vor: „Der Mensch ist <span class='underline_single'>ohnmächtig</span> im Fleische aber <span class='underline_single'>frei</span> durch den Geist.“ Möge der Geist in mir sein! Nachmittag hörte der Leutnant Schüsse in der Nähe. Ich wurde sehr aufgeregt. Wahrscheinlich werden wir alarmiert werden. Wie werde ich mich benehmen wenn es zum Schießen kommt? Ich fürchte mich nicht davor erschossen zu werden aber davor meine Pflicht nicht ordentlich zu erfüllen. Gott gebe mir Kraft! Amen. Amen. Amen.<br>\",\"eng\":\"The news just keeps getting worse.  Tonight we’ll be placed on full alert. Every day, I work fairly confidently, sometimes getting more and sometimes getting less done. Again and again I think of Tolstoy’s maxim: “Man is <span class='underline_single'>powerless</span> in the flesh but <span class='underline_single'>free</span> through the spirit.\\\" May the spirit be with me! In the afternoon the lieutenant heard shots nearby. I became very agitated. Probably we will be put on alert. How will I conduct myself when it comes to  shooting? I am afraid, not of being shot, but of not doing my duty properly. God give me strength! Amen. Amen. Amen.<br>\",\"date\":\"1914-09-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,21v[2] et 22v[1]\",\"ger\":\"Heute in aller Früh verließen wir das Schiff mit allem was darauf war. Die Russen sind uns auf den Fersen. Habe furchtbare Szenen miterlebt. Seit 30 Stunden nicht geschlafen; fühle mich sehr schwach und sehe keine / äußere Hoffnung. Wenn es mit mir jetzt zu Ende geht so möge ich einen guten Tod sterben, eingedenk meiner selbst. Möge ich mich nie selbst verlieren.<br>\",\"eng\":\"Very early this morning we abandoned the ship with everything on it. The Russians are at our heels. Have witnessed terrible scenes. No sleep for 30 hours; feel very weak and see no hope out there. If it is all over for me now, may I die a good death, mindful of myself. May I never lose myself.<br>\",\"date\":\"1914-09-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,22v[2]\",\"ger\":\"Vorgestern nachts furchtbare Szenen: fast alle Leute besoffen. Gestern wieder auf die Goplana zurück die in den Dunajec gefahren wurde. Gestern und vorgestern nicht gearbeitet. Versuchte vergeblich, meinem Kopf war die ganz Sache fremd. Die Russen sind uns auf den Fersen. Wir sind in unmittelbarer Nähe des Feindes. Bin guter Stimmung, habe wieder gearbeitet. Am besten kann ich jetzt arbeiten während ich Kartoffeln schäle. Melde mich immer freiwillig dazu. Es ist für mich dasselbe was das Linsenschleifen für Spinoza war.<br>/ Mit dem Leutnant stehe ich viel kühler als früher. Aber nur Mut!<br>„Wen der Genius nicht verläßt – – – –”!  Gott mit mir! Jetzt wäre mir Gelegenheit gegeben ein anständiger Mensch zu sein denn ich stehe vor dem Tod Aug in Auge. Möge der Geist mich erleuchten.<br>\",\"eng\":\"Terrible scenes the night before last: nearly everyone was drunk. Back to the Goplana yesterday, which was steered into the Dunajec. Didn’t get any work done yesterday or the day before. Tried in vain, it was all alien to my mind. The Russians are at our heels. We are very close to the enemy. Am in a good mood, have got work done again. Now I can work best when I am peeling potatoes. Always volunteer for that. It’s the same to me as lens grinding was to Spinoza.<br>The lieutenant is much more chilly with me than earlier on. But be brave!<br>\\\"Whom the genius does not forsake - - - -\\\"! God be with me! Now I might have an opportunity to be a decent human being, for I’m face to face with death. May the spirit enlighten me.<br>\",\"date\":\"1914-09-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,23v[2]\",\"ger\":\"Die Nacht verging ruhig. Vormittag starkes Geschützfeuer und Gewehrfeuer gehört. Wir sind aller Wahrscheinlichkeit nach unentrinnbar verloren.<br>Der Geist ist noch bei mir aber ob er mich nicht in der äußersten Not verlassen wird? Ich hoffe nicht! Jetzt sich nur zusammennehmen und brav sein! (9 p.m.) Wolkenbruch. Der Mensch ist ohnmächtig im Fleische und <span class='underline_single'>frei durch den Geist</span>. Und nur durch diesen.<br>\",\"eng\":\"The night passed quietly. Heard heavy gun and rifle fire this morning. In all likelihood we are inescapably lost.<br>The spirit is still with me, but won’t it desert me in extreme hardship? I hope not! Now just pull yourself together and be brave! (9 p.m.) Cloudburst. Man is powerless in the flesh and <span class='underline_single'>free through the spirit</span>. And only thus.<br>\",\"date\":\"1914-09-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,24v[1]\",\"ger\":\"Fast nichts gearbeitet.<br>\",\"eng\":\"\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,24v[2]\",\"ger\":\"Auch diese Nacht ruhig vorüber gegangen. Hatte Wache. Wir sollen die Weichsel hinauf nach Krakau fahren. Die Grenze soll ganz von Kosaken besetzt sein also sind wir wahrscheinlich hin. Nur <span class='underline_single'>eines</span> ist von Nöten! Gestern früh hat der Leutnant das Schiff verlassen und ist bis heute mittag noch nicht zurückgekommen. Niemand weiß was wir tun sollen und es mangelt sogar an Geld zum Einkaufen von Essen: Ich bin aber noch immer guter Dinge und werde es hoffentlich bleiben. Denke immer wieder daran wie ich mich aufrecht erhalten kann.<br>\",\"eng\":\"This night passed quietly, too. Had guard duty. We’re supposed to go up the Vistula to Krakow. The border is said to be completely occupied by Cossacks, so we’re probably finished. Just <span class='underline_single'>one</span> thing is necessary! The lieutenant left the ship early yesterday morning and by noon today still hasn’t returned. Nobody knows what to do and there isn’t even money to buy food. However I am still in good spirits and hope to stay that way. Keep thinking about how I can keep myself going.<br>\",\"date\":\"1914-09-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,24v[3]\",\"ger\":\"Eine furchtbar aufregende Nacht.<br>Sollte leuchten und mußte jeden / Moment befürchten daß der Scheinwerfer ausgeht. Wir waren in einer höchst unsicheren Stellung und wäre das Licht ausgegangen & etwas geschehen so wäre die ganze Verantwortung auf mich gefallen. Dann falscher Alarm; ich behielt vollkommene Ruhe & mußte hören wie mich der Zugsführer beim Leutnant schlecht zu machen suchte, als sei ich furchtsam gewesen. Dies regte mich furchtbar auf. Von 1-3 auf Posten. Sehr wenig geschlafen. Gestern nicht gearbeitet. Es ist unendlich schwer sich dem Bösen nicht zu widersetzen. Es ist schwer mit leerem Magen und unausgeschlafen dem Geiste zu dienen. Aber was wäre ich wenn ich es nicht könnte. Die Vorgesetzten sind grob und dumm, die Kameraden sind dumm und grob (mit ganz wenigen Ausnahmen.) Auf der Fahrt nach Krakau mit / Galeeren. Der Tag verlief ruhig und nicht unangenehm. Etwas gearbeitet. ——<br>\",\"eng\":\"Was aiming the searchlight, and feared that the light would go out any moment. We were in a very precarious position and if the light had gone out and something had happened, then I alone would have been responsible. It was a false alarm. I remained perfectly calm and had to listen to the platoon leader trying to make me look bad to the lieutenant, as though I had been frightened. This upset me terribly. From 1-3 at my post. Slept very little. Didn’t work yesterday. It’s extremely hard to offer no resistance to evil. It’s hard to serve the spirit on an empty belly and sleep-deprived. But what would I be if I couldn’t do so? The officers are rude and stupid, the comrades are stupid and rude (with very few exceptions.) On the journey to Krakow with galleys. The day passed quietly and not unpleasantly. Worked a bit. ——<br>\",\"date\":\"1914-09-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,26v[2]\",\"ger\":\"Nach Krakau. Gestern abends mußte ich auf einem anderen Schiff bei der Arbeit bis 11 Uhr leuchten. In der Nacht sehr kalt. Wir mußten in Stiefeln schlafen. Schlecht geschlafen. Schon seit 4 Tagen habe ich meine Kleider & Schuhe nicht ausgezogen. Aber das darf nichts machen. ——  Ich kann nicht umhin mich davor zu fürchten was mit mir in Krakau geschehen wird. Ich weiß ich sollte mir darüber keine Sorge machen, aber ich fühle mich so müde daß ich mich vor jeder Anstrengung fürchte. ——!<br>\",\"eng\":\"To Krakow. Yesterday evening I had to run the searchlight on another ship until 11 o'clock. Very cold at night. We had to sleep in our boots. Slept badly. I haven't changed my clothes and shoes for 4 days. But that shouldn't make any difference. —— I can't help but be afraid of what will happen to me in Krakow. I know I shouldn't worry about it, but I feel so tired that I'm afraid of any effort. ——!<br>\",\"date\":\"1914-09-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,26v[3]\",\"ger\":\"Ja, nochmals: Es ist unendlich <span class='underline_single'>schwer</span> sich der Bosheit der Menschen nicht / zu widersetzen! Denn die Bosheit der Menschen schlägt einem jedes Mal eine Wunde. ——<br>Die Russen sind von der Grenze soweit vertrieben worden daß wir bis jetzt noch nicht belästigt worden sind.<br>\",\"eng\":\"Yes, one more time: it is infinitely <span class='underline_single'>hard</span> not to resist the wickedness of men! For the wickedness of men always leaves a wound. ——<br>The Russians have been driven so far from the border that we have not been troubled yet.<br>\",\"date\":\"1914-09-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,27v[2]\",\"ger\":\"Heute früh in Krakau angekommen. Die ganze Nacht beim Reflektor Dienst gehabt. Gestern viel gearbeitet aber nicht <span class='underline_single'>sehr</span> hoffnungsvoll da mir der rechte <span class='underline_single'>Überblick</span> fehlte. Hatte gestern eine kleine Aussprache mit unserem Zugsführer die die Luft ein <span class='underline_single'>wenig</span> reinigte. Heute etwas mißgestimmt: Ich bin die vielen Aufregungen schon so <span class='underline_double'>müde</span>! Von Wien höre ich gar nichts! Heute erhielt ich eine Karte von Mama die sie am 20.<span class='underline_single'>8</span>. schrieb. Abends erhielt ich die niederschlagende Nachricht / daß der Leutnant der unser Kommandant war transferiert worden ist. Diese Nachricht hat mich tief deprimiert. Ich kann mir zwar keine genaue Rechenschaft ablegen über eine zwingende Ursache zur Niedergeschlagenheit aber ich bin tief traurig. Ich bin zwar frei durch den Geist aber der Geist hat mich verlassen! Konnte am Abend noch etwas arbeiten, fühlte mich darauf besser. ——<br>\",\"eng\":\"Arrived in Krakow early this morning. Was on duty on the reflector all night. Worked a lot yesterday but not <span class='underline_single'>very</span> hopeful because I lacked the right <span class='underline_single'>overview</span>. Had a short discussion with our platoon leader yesterday which cleared the air a <span class='underline_single'>little</span>. Somewhat out of sorts today: I'm already so <span class='underline_double'>tired</span> of all the agitation! I’ve heard nothing at all from Vienna! Today I received a card from Mama which she wrote on <span class='underline_single'>August</span> 20th. In the evening I received the distressing news that the lieutenant who was our commander has been transferred. This news depressed me deeply. I can’t give an exact account of the cause of the despondency, but I am deeply sad. I am free through the spirit, but the spirit has forsaken me! Could still do some work in the evening, which made me feel better about it. ——<br>\",\"date\":\"1914-09-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,28v[2]\",\"ger\":\"Vormittag in der Kaserne um Geld zu holen, beim Hauptmann. Er sagte ich solle mir die Einjährigen-Streifen aufnähen lassen. Viele Besorgungen gemacht und aufs Schiff zurück wo die Streifen großes Aufsehen erregten. Erhielt eine Menge Karten & Briefe u.a. von Ficker & Jolles. Nicht gearbeitet. ——. <br>\",\"eng\":\"In the barracks this morning, to pick up money from the captain. He told me to get one-year volunteer stripes sewn on. Did a lot of errands and went back to the ship, where the stripes caused a big sensation. Received a lot of cards and letters from Ficker and Jolles among others. Didn't work. ——.<br>\",\"date\":\"1914-09-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,28v[3]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-09-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,29v[2]\",\"ger\":\"Ziemlich viel gearbeitetaber ziemlich hoffnungslos. Nachmittags in der Stadt.<br>\",\"eng\":\"Worked quite a bit but rather hopelessly. Afternoon in the city.<br>\",\"date\":\"1914-09-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,29v[3]\",\"ger\":\"Ziemlich viel gearbeitet aber ohne echte Zuversicht. Es fehlt mir noch immer der Überblick und dadurch erscheint das Problem unübersehbar.<br>\",\"eng\":\"Worked quite a bit but without any real confidence. I still lack an overview and this makes the problem seem unsurveyable.<br>\",\"date\":\"1914-09-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,29v[4]\",\"ger\":\"Gestern ziemlich gearbeitet aber ohne rechten Erfolg. In den letzten Tagen wieder etwas sinnlich. Telegrafierte gestern nach Hause und bat um Nachricht.<br>\",\"eng\":\"Worked pretty well yesterday but without real success. Somewhat sensual again in the last few days. Telegraphed home yesterday and asked for news.<br>\",\"date\":\"1914-09-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,29v[5]\",\"ger\":\"Etwas gearbeitet. Man erwartet eine Belagerung von Krakau. Wenn sie eintritt so stehen uns noch schwere Zeiten bevor. Möge der Geist mir Kraft schenken!<br>\",\"eng\":\"Worked a bit. A siege of Kraków is expected. If it happens, we’re in for even harder times. May the spirit give me strength!<br>\",\"date\":\"1914-09-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,30v[2]\",\"ger\":\"Heute morgen einen Korporal ins Spital gebracht der an Ruhr erkrankt ist. Hier kommen jetzt viel Ruhrfälle vor. Es wird mir eigentümlich zumute wenn ich denke was ich in diesem Krieg noch alles erleben müssen werde. Gearbeitet aber ohne Erfolg. Ich sehe noch immer nicht klar und habe keinen Überblick. Ich sehe Einzelheiten ohne zu wissen wie sie sich in das Ganze einfügen werden. Darum auch fühle ich jedes neue Problem als eine Bürde. Während ein klarer Überblick zeigen müßte daß jedes Problem <span class='underline_single'>das Hauptpr</span>oblem ist und der Anblick der Hauptfragen ermattet nicht sondern er stärkt! Abends nicht ohne Erfolg gearbeitet. Nur Mut! ——<br>\",\"eng\":\"Brought a corporal who has dysentery to the hospital this morning. There are a lot of dysentery cases here now. It makes me feel strange when I think what I will have to experience in this war. Worked but without success. I still don't see clearly and have no overview. I see details without knowing how they will fit into the whole. That's also why I feel every new problem as a burden. But a clear overview should show that every problem is <span class='underline_single'>the principal</span> problem, and that looking at the main questions does not weaken but strengthens! Worked in the evening, not without success. Courage! ——<br>\",\"date\":\"1914-09-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,31v[2]\",\"ger\":\"Heute nacht begann ich mich unwohl zu fühlen. (Magen und Kopf). Dein Wille geschehe!<br>\",\"eng\":\"I started to feel uncomfortable tonight. (Stomach and head). Thy will be done!<br>\",\"date\":\"1914-09-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,31v[3]\",\"ger\":\"Gestern mußte ich mich am Vormittag hinlegen und den ganzen Tag liegenbleiben da ich mich sehr unwohl fühlte. Ziemlich viel gearbeitet, aber ohne Erfolg. Es heißt daß wir morgen von diesem Schiff weg sollen. Ich bin neugierig was mit mir geschehen wird. ——!<br>\",\"eng\":\"Yesterday I had to lie down in the morning and lay there all day because I felt very unwell. Worked quite a bit, but without success. They say we will leave this ship tomorrow. I’m curious about what will happen to me. ——!<br>\",\"date\":\"1914-10-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,31v[4]\",\"ger\":\"Ziemlich viel gearbeitet. Nicht ganz ohne Erfolg. Es ist noch immer unbestimmt was mit mir geschehen wird, ob ich auf dem Schiff bleibe oder nicht etc. etc.<br>\",\"eng\":\"Worked quite a bit. Not entirely without success. It is still undecided what will happen to me, whether I will stay on the ship or not etc. etc.<br>\",\"date\":\"1914-10-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,31v[5]\",\"ger\":\"Es ist heute die Bestimmung getroffen worden daß die ganze alte / Mannschaft dieses Schiffes, mit Ausnahme von 4 Mann darunter <span class='underline_single'>ich</span>, das Schiff verlassen soll. Dies ist mir nicht unangenehm. Von Zuhause erhielt ich heute eine Kiste worin warme Wäsche, Tee, Zwieback & Schokolade war. Also gerade als ob die liebe Mama sie geschickt hätte; <span class='underline_single'>aber</span> <span class='underline_double'>keine</span> Nachricht! Ist Mama tot? Und schickt man mir darum keine Nachricht?? Fast nicht gearbeitet.<br>\",\"eng\":\"Today it was decided that all the old crew of this ship, with the exception of 4 men including <span class='underline_single'>myself</span>, are to leave the ship. This is not unpleasant to me. Today I got a chest from home with fresh clothes, tea, rusks and chocolate. Just as if dear Mama had sent it; <span class='underline_single'>but</span> <span class='underline_double'>no</span> message! Is Mama dead? And is that why they didn't send me any message?? Did almost no work.<br>\",\"date\":\"1914-10-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,32v[2]\",\"ger\":\"Gestern abends noch etwas gearbeitet. Erhielt heute eine Karte die Mama an mich am 9. des vorigen Monats geschrieben hat. Sie enthält nichts Wichtiges. Meine Arbeit ist nach kurzem Aufschwung heute wieder ins Stocken geraten. Ziemlich viel gearbeitet aber ohne Hoffnung. In den nächsten Tagen sollen wir wieder nach Rußland / fahren. Unser neuer Kommandant, ein Oberleutnant, gefällt mir nicht recht obwohl ich ihn nur flüchtig gesehen habe.<br>\",\"eng\":\"Did some work yesterday evening. Received a card today that Mama wrote to me on the 9th of last month. It contains nothing important. After a brief upswing, my work has stalled again today. Worked quite a bit but without hope. In the next few days we are supposed to go back to Russia. I don't like our new commander, a first lieutenant, even though I have seen him only briefly.<br>\",\"date\":\"1914-10-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,33v[2]\",\"ger\":\"Heute erhielt ich einen Brief von Keynes der über Norwegen ans hiesige Regimentskommando kam! Er schreibt nur um mich zu fragen wie es mit Johnsons Geld nach dem Kriege werden wird. Der Brief hat mir einen Stich gegeben denn es schmerzt einen Geschäftsbrief von einem zu kriegen mit dem man früher gut gestanden ist; und gar in dieser Zeit. – Soeben erhielt ich eine Karte von Mama vom ersten des Monats. Alles wohl! Nun also! – Dachte in den letzten Tagen oft an Russell. Ob er noch an mich denkt? Es war <span class='underline_single'>doch</span> merkwürdig, unser Zusammentreffen! In den Zeiten des äußeren Wohlergehens denken / wir nicht an die Ohnmacht des Fleisches; denkt man aber an die Zeit der Not dann kommt sie einem zum Bewußtsein. Und man wendet sich zum Geist. ——<br>\",\"eng\":\"Today I received a letter from Keynes which came by way of Norway to the regional regimental command! He only writes to ask me how to handle Johnson's money after the war. The letter stung me, for it is painful to receive a business letter from someone with whom one had previously been on good terms; and especially at this time. - I just received a card from Mama from the first of the month. Everything is all right! Well then! – Have thought often of Russell in the last few days. Does he still think of me? The way we met was <span class='underline_single'>awfully</span> strange! In times when things are going well externally, one doesn’t think of the powerlessness of the flesh; but if one thinks in a time of need, one is aware of it. And one turns to the spirit. ——<br>\",\"date\":\"1914-10-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,34v[2]\",\"ger\":\"Gestern ziemlich viel gearbeitet. Der Mensch darf nicht vom Zufall abhängen. Weder von günstigen noch von ungünstigen. Gestern kam der neue Kommandant aufs Schiff. —— Jetzt schicken sie Leute von der Beleuchtungsabteilung hierher aufs Schiff die beim Reflektor herumpatzen. Sorge dich nicht!! Soeben kam Befehl nach Rußland abzufahren. Also wird es wieder ernst! Gott mit mir.<br>\",\"eng\":\"Worked rather a lot yesterday. A man should not depend on what happens. Neither propitious nor unpropitious. Yesterday the new commander came aboard the ship. —— Now they are sending people from the lighting unit here on the ship who paw around at the reflector. Don’t worry!! An order has just come to move on towards Russia. So it will be serious again! God with me. <br>\",\"date\":\"1914-10-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,34v[3]\",\"ger\":\"Die Nacht durch nach Rußland gefahren; fast gar nicht geschlafen, Dienst beim Scheinwerfer etc. Wir sollen bald ins Feuer kommen. Der Geist mit mir. Hier in Szczucin / hören wir daß die Russen noch 80 Kilometer weit entfernt seien aber wir haben Anzeichen daß hier in der Nähe schon etwas los ist. Wir stehen in der Mündung der Wisloka (abends). Es ist mir eisig kalt – von innen. Ich habe jenes gewisse Gefühl: wenn ich mich nur noch einmal ausschlafen könnte ehe die Geschichte anfängt. ————! Besseres Befinden. Wenig gearbeitet. Ich verstehe es noch immer nicht meine Pflicht nur zu tun weil es meine Pflicht ist und meinen ganzen Menschen für das geistige Leben zu reservieren. Ich kann in einer Stunde sterben, ich kann in zwei Stunden sterben, ich kann in einem Monat sterben oder erst in ein paar Jahren; ich kann es nicht wissen & nichts dafür oder dagegen tun: <span class='underline_single'>So ist dies Leben</span>. Wie muß ich also leben um in jenem Augenblick zu bestehen? Im Guten & Schönen zu leben bis das Leben von selbst aufhört.<br>\",\"eng\":\"Travelled through the night towards Russia; hardly slept at all, duty at the searchlights, etc. We should soon be under fire. Spirit with me. Here in Szczucin we hear that the Russians are still 80 kilometers away, but we have signs that something is already going on nearby. We are in the mouth of the Wisloka (in the evening). I feel icy cold — on the inside. I have that certain feeling: if I could only sleep in before the story begins.  ————! Better condition. Worked a little. I still don't understand how to do my duty just because it is my duty and to reserve all of my being for the spiritual life. I may die in an hour, I may die in two hours, I may die in a month or not for a few years; I can't know about it, and I can't do anything for or against it: <span class='underline_single'>such is this</span><span class='underline_single'> life</span>. How then ought I to live to exist at that moment? To live in the good and beautiful until life stops by itself.<br>\",\"date\":\"1914-10-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,35v[2]\",\"ger\":\"Fahren weiter gegen Sandomierz zu. Die / Nacht war ruhig; <span class='underline_single'>ich</span> <span class='underline_double'>sehr</span> müde und schlief fest. Stehen jetzt bei Tarnobrzeg & fahren in anderthalb Stunden gegen Sandomierz. Wenn ich müde bin & mir ist kalt dann verliere ich leider bald den Mut das Leben zu ertragen wie es ist. Aber ich bemühe mich ihn nicht zu  verlieren. ——. Jede Stunde des leiblichen Wohlergehens ist eine Gnade.<br>\",\"eng\":\"Continue travelling towards Sandomierz. The night was calm; <span class='underline_single'>I</span> was <span class='underline_double'>very</span> tired and slept soundly. At Tarnobrzeg now, and go on to Sandomierz in an hour and a half. If I’m tired and cold then I soon, unfortunately, lose the courage to endure life as it is. But I’m trying not to lose it. ——. Every hour of physical well-being is a mercy.<br>\",\"date\":\"1914-10-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,36v[2]\",\"ger\":\"Ruhige Nacht. In der Ferne fortwährender Kanonendonner. Stehen noch immer bei Tarnobrzeg. Hier in der Nähe findet offenbar eine enorme Schlacht statt, da man schon seit über 12 Stunden ununterbrochenen Geschützdonner hört; unsere neue Besatzung ist <span class='underline_single'>viel</span> besser (netter & anständiger) als die alte. Befehl: alles bewaffnet auf dem Deck antreten. Gott mit mir! — Nach Sandomierz gefahren. Hören fortwährenden starken Geschützdonner / & sehen die Granaten explodieren. Ich bin sehr guter Stimmung. ——! Den ganzen Tag heftigste Kanonade. Viel gearbeitet; es ist mir noch zum mindesten <span class='underline_single'>ein</span> grundlegender Gedanke ausständig. ——.<br>\",\"eng\":\"Quiet night. Constant cannons firing in the distance. Still in Tarnobrzeg. There is clearly an enormous battle going on nearby, as we have heard constant artillery fire for over 12 hours. Our new crew is <span class='underline_single'>much</span> better (nicer and more decent) than the old one. Order: everyone take up arms on the deck. God with me! — Travel to Sandomierz. Hear constant heavy artillery fire and see the grenades explode. I am in a very good mood. ——! Most violent bombardment all day. Worked a lot; at least <span class='underline_single'>one</span> fundamental thought is not yet in my grasp. ——.<br>\",\"date\":\"1914-10-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,37v[2]\",\"ger\":\"Ruhige Nacht. Früh die Kanonade wieder aufgenommem. Sollen jetzt weiter nach Zawichost fahren. Stehen in Nadbrzezie. Ich schlafe gerade an der Wand der Kajüte unseres Kommandanten und habe ein Gespräch der Zugsführer mit ihm belauscht: Wir sollen den Übergang über die Weichsel für die Deutschen formieren helfen. Er sagte wir hätten kein Artilleriefeuer sondern nur Infanteriefeuer zu erwarten. Viel gearbeitet aber ohne positiven Erfolg. Es ist mir als läge mir ein Gedanke schon fast auf der Zunge. ——! <br>\",\"eng\":\"Quiet night. Early on, the bombardment began again. Should now continue to Zawichost. Stopped in Nadbrzezie. I am currently sleeping by the wall of our commander's cabin and overheard a conversation with the platoon leader: We are to help the Germans build a crossing over the Vistula. He said we shouldn't expect artillery fire but only infantry fire. Worked a lot but without positive success. It is as if a thought is on the tip of my tongue. ——!<br>\",\"date\":\"1914-10-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,37v[3]\",\"ger\":\"Ruhige Nacht. — Trage die \\\"Darlegung des / Evangeliums\\\" von Tolstoi <span class='underline_single'>immer</span> mit mir herum, wie einen Talisman. Ich belausche wieder ein Gespräch unseres Kommandanten mit dem eines anderen Schiffes: heute sollen wir hier in Nadbrzezie bleiben und erst morgen vielleicht hinunter fahren. Soeben erlausche ich die Nachricht daß Antwerpen gefallen ist! Und irgendwo haben unsere Truppen eine große Schlacht gewonnen. Die Gnade die ich genieße indem ich jetzt denken & arbeiten kann ist unbeschreiblich. Ich muß Gleichgültigkeit gegen die Schwierigkeiten des <span class='underline_single'>äußeren</span> Lebens erlangen. Heute nacht sollen wir nach Zawichost fahren um Truppen & Material zu landen; wir müssen gerade vor die russischen Stellungen hinfahren. Gott mit mir. ——.<br>\",\"eng\":\"Quiet night. - <span class='underline_single'>Always</span> carry Tolstoy’s \\\"Exposition of the Gospels\\\" around with me like a talisman. I eavesdrop on another conversation between our commanding officer and that of another ship: today we are supposed to stay here in Nadbrzezie and maybe early in the morning travel down stream.  I have just overheard that Antwerp has fallen! And somewhere our troops have won a great battle. The grace that I enjoy in being able to think and work now is indescribable. I must become indifferent to the difficulties of <span class='underline_single'>external</span> life. Tonight we are supposed to go to Zawichost to land troops and supplies; we have to travel directly in front of the Russian positions. God with me. ——.<br>\",\"date\":\"1914-10-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,38v[2]\",\"ger\":\"Sind nicht nach Zawichost gefahren. Ruhige Nacht. Horche wieder: Ein Oberleutnant & / 2 Leutnants mit unserem Kommandanten: sie wissen noch nicht bestimmt was sie tun werden aber es ist wahrscheinlich daß wir nach Zawichost fahren. Der fremde Oberleutnant ist sehr ehrgeizig und will durchaus daß wir zur Front kommen. ——Es wechseln in mir Zeiten der Gleichgültigkeit gegen das äußere Schicksal mit solchen in welchen ich mich wieder nach äußerer Freiheit und Ruhe sehne, wo ich es müde bin willenlos jeden beliebigen Befehl ausführen zu müssen. Über die <span class='underline_single'>nächste</span> Zukunft <span class='underline_single'>völlig</span> im Ungewissen! Kurz es gibt Zeiten wo ich nicht <span class='underline_single'>bloß</span> in der Gegenwart und für den Geiste leben kann. Die guten Stunden des Lebens soll man als Gnade dankbar genießen und sonst gegen das Leben gleichgültig sein. Heute habe ich lange mit einer Depression gekämpft dann nach langer Zeit wieder onaniert und endlich den vorigen Satz geschrieben.<br>\",\"eng\":\"Didn't go to Zawichost. Quiet night. Listen again: a first lieutenant and 2 lieutenants with our commander: they still don't definitely know what they will do but it is likely that we will go to Zawichost. The foreign first lieutenant is very ambitious and definitely wants us to get to the front. ——Times of indifference to outer fate alternate in me with ones when I long for outer freedom and peace, when I am tired of having to carry out any command spinelessly. <span class='underline_single'>Completely</span> uncertain about the <span class='underline_single'>near</span> future! In short, there are times when I can't <span class='underline_single'>only</span> live in the present and for the spirit. One ought to enjoy the good hours of life gratefully, as a mercy, and otherwise face life with indifference. Today I struggled with depression for a long time, then masturbated again after a long time and finally wrote the previous sentence.<br>\",\"date\":\"1914-10-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,40v[1]\",\"ger\":\"Höre soeben daß wir heute nacht das für gestern geplante Unternehmen ausführen werden. Davon daß wir nach Krakau kommen ist noch gar keine Rede. Also heute nacht! ——! Wir sollen mit Schnellfeuerkanonen und Maschinengewehren schießen wie ich höre, mehr um Lärm zu machen als zu treffen. Auch entnehme ich daß die Sache gefährlich werden wird. Wenn ich mit dem Scheinwerfer leuchten soll so bin ich <span class='underline_single'>gewiß</span> verloren. Aber das macht nichts denn nur eines ist nötig! In einer Stunde fahren wir ab. <span class='underline_single'>Gott </span><span class='underline_single'>ist</span><span class='underline_single'> </span><span class='underline_single'>mit</span><span class='underline_single'> mir</span>!<br>\",\"eng\":\"Just now hear that tonight we're going to carry out the business that was planned for yesterday. There is still no talk of us going to Krakow. So tonight! ——! We shall shoot rapid firing cannons and machine guns, more to make noise than to hit anything, I am told. I gather too that it will be dangerous. If I have to man the searchlight, then I’m <span class='underline_single'>certainly</span> lost. But that doesn't matter, for only one thing is necessary! We leave in an hour. <span class='underline_single'>God is with me</span>!<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,40v[2]\",\"ger\":\"Um 11½ kam der Befehl daß wir nicht oder doch <span class='underline_single'>noch</span> nicht nach Zawichost fahren. Also, ruhige Nacht. Höre soeben daß unsere Schiffe Befehl gekriegt haben <span class='underline_single'>sofort</span> die Weichsel hinunter zu fahren. ——. Wir fahren bereits.<br>\",\"eng\":\"At 11:30 the order came that we shouldn't go to Zawichost, or not <span class='underline_single'>yet</span>. So, quiet night. Just now hear that our ships have been ordered to move down the Vistula <span class='underline_single'>immediately</span>. ——. We are already underway. <br>\",\"date\":\"1914-10-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,41v[2]\",\"ger\":\"Ich bin Geist & darum bin ich frei. Wir stehen bei Lopiza & die Granaten fliegen über uns weg & pfeifen. Zogen uns nach Nadbrzezie zurück & fahren jetzt wieder auf neuen Befehl an dieselbe Stelle. Den ganzen Nachmittag heftigstes Geschützfeuer. Ich war die ganze Zeit bester Stimmung und von dem Donner wie berauscht. Abends fuhren wir nach Sandomierz wo wir die Nacht über stehen bleiben sollen. ——. Viel gearbeitet ——.<br>\",\"eng\":\"I am spirit, and that is why I am free. We are near Lopiza and the grenades fly over us and whistle. We moved back to Nadbrzezie and now go back to the same place again on new orders. The most violent artillery fire all afternoon. The whole time I was in the best mood and as if intoxicated by the bombardment. In the evening we went to Sandomierz where we are supposed to stop for the night. ——. Worked a lot ——.<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,41v[3]\",\"ger\":\"Ruhige Nacht. Bis abends in Sandomierz gestanden & werden wohl auch noch diese Nacht da stehen. Sehr viel gearbeitet aber nicht sehr befriedigt da es wieder schwer ist den Überblick zu gewinnen. ——.<br>\",\"eng\":\"Quiet night. Stopped in Sandomierz until the evening and will probably still be there tonight. Worked a great deal but not very satisfyingly as it is still difficult to arrive at an overview. ——.<br>\",\"date\":\"1914-10-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,42v[2]\",\"ger\":\"Ruhige Nacht. Onaniere jetzt etwa einmal in 1½ Wochen. Arbeite wenig manuell, aber dafür um so mehr geistig; gehe um 9 Uhr schlafen und um 6 stehe ich auf. Mit dem jetzigen Kommandanten spreche ich so gut wie nie. Er ist aber wohl nicht allzu schlecht. Standen den ganzen Tag in Sandomierz & werden wohl auch nachts hier bleiben. Sehr viel gearbeitet und nicht ohne Zuversicht. Es scheint mir fast als stünde ich knapp vor einer Lösung. ——.<br>\",\"eng\":\"Quiet night. Masturbate about once in 1½ weeks now. Do little manual work, but on the other hand all the more mentally//spiritually//; go to sleep at 9 and get up at 6. I hardly ever speak to the current commander. But he is probably not that bad. At a standstill in Sandomierz all day and will probably stay here at night. Worked a great deal and not without confidence. It almost seems to me that I am about to find a solution. ——.<br>\",\"date\":\"1914-10-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,42v[3]\",\"ger\":\"Früh um 8 nach Szczucin gefahren um Geschütze zu holen.<br>\",\"eng\":\"Early in the morning at 8 went to Szczucin to get cannons.<br>\",\"date\":\"1914-10-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,42v[4]\",\"ger\":\"Gestern <span class='underline_single'>sehr</span> viel gearbeitet; der Knoten zog sich immer mehr zusammen aber ich fand keine Lösung. Abends blieben wir bei Baranow / stehen & fahren jetzt um 6 p.m. weiter nach Szczucin. —— Ob mir der erlösende Gedanke kommen wird? ob er kommen wird??!! ——Gestern und heute onaniert. —— Abends in Szczucin angekommen wo wir die Nacht über stehen bleiben werden. <span class='underline_double'>Sehr</span> viel gearbeitet. Bin davon etwas angegriffen. <span class='underline_double'>Sehr</span> viel Material angehäuft ohne es ordnen zu können. Aber diesen Andrang von Material halte ich für ein gutes Zeichen. Erinnere dich <span class='underline_single'>wie</span> groß die Gnade der Arbeit ist! ——.<br>\",\"eng\":\"Worked a <span class='underline_single'>great</span> deal yesterday; the knot tightened more and more but I didn't find a solution. In the evening we stopped at Baranow and now move since 6 p.m. further towards Szczucin. —— Will the redeeming thought come to me? Whether it will come??!! —— Masturbated yesterday and today. ——Arrived in Szczucin in the evening where we will stop for the night. Worked a <span class='underline_double'>great</span> deal. I'm a bit worn out by it. Accumulated a <span class='underline_double'>great</span> deal of material without being able to organize it. But I think this rush of material is a good sign. Remember <span class='underline_single'>how</span> great the grace of work is! ——.<br>\",\"date\":\"1914-10-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,43v[2]\",\"ger\":\"Vormittag einkaufen. Um Mittag fuhren wir nach Tarnobrzeg ab. 5 p.m. in Tarnobrzeg. Wenig gearbeitet. Gegen abend kamen Offiziere aufs Schiff um es anzuschauen. Ich kam mit einem ins Gespräch dem mein Freiwilligenabzeichen auffiel. Wir sprachen über eine Stunde / mit einander sehr gemütlich. Er war sehr freundlich und nicht dumm. Er trug mir das \\\"Du\\\" an, was mich freute. Wenig gearbeitet aber das macht nichts! — Bleiben über Nacht in Tarnobrzeg. ——.<br>\",\"eng\":\"Shopping in the morning. At noon we left for Tarnobrzeg. In Tarnobrzeg at 5 p.m. Worked a little. Towards evening officers came to examine the ship. I began a conversation with one of them who noticed my volunteer insignia. We talked to each other very pleasantly for over an hour. He was very friendly and not stupid. He spoke to me as \\\"thou\\\", which made me happy. Worked a little but that doesn't matter! - Stay overnight in Tarnobrzeg. ——.<br>\",\"date\":\"1914-10-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,44v[2]\",\"ger\":\"Früh nach Sandomierz gefahren wo wir jetzt stehen. Nachts wieder onaniert (halb im Traum). Das kommt daher daß ich wenig, fast gar keine Bewegung mache. Nachmittag wieder nach Tarnobrzeg gefahren. Bin seit gestern mit meiner Verdauung nicht ganz in der Ordnung. —— Die Lösung des Problems liegt mir auf der Zunge! —— Gegen abend wieder nach Sandomierz. Fühle mich nicht recht wohl, keine echte Lebenslust. ——! Sehr viel gearbeitet. ——.<br>\",\"eng\":\"Travel early to Sandomierz where we are now. Masturbated again at night (half in a dream). That is because I get little, almost no exercise. In the afternoon we went back to Tarnobrzeg again. Since yesterday my digestion is not quite right. —— The solution to the problem is on the tip of my tongue! —— Towards evening to Sandomierz again. I don't feel very well, no real zest for life.  ——! Worked a great deal. ——.<br>\",\"date\":\"1914-10-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,45v[2]\",\"ger\":\"Unwohl. <span class='underline_single'>Sehr</span> viel gearbeitet. Nachmittag besseres Befinden. Bin aber nicht recht glücklich; habe Sehnsucht nach David: Wenn ich ihm wenigstens schreiben könnte. Aber mein Geist spricht in mir gegen meine Depression. Gott mit mir. ——.<br>\",\"eng\":\"Unwell. Worked a <span class='underline_single'>great</span> deal. Felt better in the afternoon. But I'm not really happy; I long for David: If I could at least write to him. But my spirit speaks in me to counter my depression. God with me. ——.<br>\",\"date\":\"1914-10-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,45v[3]\",\"ger\":\"Es heißt wir sollen wieder nach Krakau fahren; das wäre mir nicht unangenehm. ——. Stehen den ganzen Tag hier in Sandomierz. Sehr viel & mit Zuversicht gearbeitet. Abends etwas müde & in diesem Zustand bin ich Depressionen recht zugänglich; aber, nur Mut! ——<br>\",\"eng\":\"They say we shall go to Krakow again; that would not be disagreeable to me. ——. Stay here all day in Sandomierz. Worked a great deal and confidently. A bit tired in the evening and in this state I am quite vulnerable to depression. But take heart! ——<br>\",\"date\":\"1914-10-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,45v[4]\",\"ger\":\"Die Gefechte hier in der Nähe dauern fort. Gestern starke Kanonade. Viel gearbeitet. Den ganzen Tag gestanden. ——.<br>\",\"eng\":\"The battle around here continues. Heavy barrage yesterday. Worked a lot. Stationary all day. ——.<br>\",\"date\":\"1914-10-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,46v[2]\",\"ger\":\"Fahren jetzt, vormittags, nach Tarnobrzeg. Arbeite sehr <span class='underline_single'>fleißig</span> aber noch ohne Erfolg. Abends wieder in Sandomierz. <span class='underline_single'>Sehr</span> viel gearbeitet. Denke viel an David. Ob ich ihn noch einmal sehen werde? ——! ——.<br>\",\"eng\":\"Now going to Tarnobrzeg this morning. I work very <span class='underline_single'>hard</span> but still without success. Back in Sandomierz in the evening. Worked a <span class='underline_single'>great</span> deal. Think about David a lot. Will I ever see him again? ——! ——.<br>\",\"date\":\"1914-10-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,46v[3]\",\"ger\":\"Schlecht geschlafen. (Zu wenig Bewegung!). Unser Kommandant ist sehr mäßig; hochmütig unfreundlich & behandelt jeden als seinen Diener. Nachmittag nach Tarnobrzeg wo wir diese Nacht bleiben. Sehr viel gearbeitetzwar noch ohne Erfolg aber mit viel Zuversicht. Ich <span class='underline_single'>belagere</span> jetzt mein Problem. ——..<br>\",\"eng\":\"Slept badly. (Too little exercise!) Our commander is very mediocre; haughty, sullen, and treats everyone as his servant. To Tarnobrzeg in the afternoon, where we stay tonight. Worked a great deal, no success yet, but great confidence. I am now <span class='underline_single'>laying siege</span> to my problem. ——.<br>\",\"date\":\"1914-10-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,46v[4]\",\"ger\":\"Früh nach Sandomierz. Gestern abends kam uns die unsinnige Nachricht zu Paris sei gefallen. Auch ich war übrigens / zuerst erfreut bis ich die Unmöglichkeit der Nachricht einsah. Solche unmöglichen Nachrichten sind immer ein sehr schlechtes Zeichen. Wenn wirklich etwas für uns Günstiges vorfällt dann wird <span class='underline_single'>das</span> berichtet & niemand verfällt auf solche Absurditäten. Fühle darum heute mehr als je die furchtbare Traurigkeit unserer — der deutschen Rasse — Lage!! Denn daß wir gegen England nicht aufkommen können scheint mir so gut wie gewiß: Die Engländer — die beste Rasse der Welt — <span class='underline_single'>können</span> nicht verlieren! Wir aber können verlieren und werden verlieren, wenn nicht in diesem Jahr so im nächsten! Der Gedanke daß unsere Rasse geschlagen werden soll deprimiert mich furchtbar denn ich bin ganz & gar deutsch!<br>/ Werden plötzlich durch Gewehrfeuer von den Russen<br>Gott mit mir! —- Es war nichts als ein russischer Aeroplan. ——, ——. Sehr viel gearbeitet. Stehen die Nacht über in Tarnobrzeg & fahren morgen früh gegen Szczucin. Gegen Mittag wich meine Depression ——.<br>\",\"eng\":\"Early to Sandomierz. Yesterday evening we received the nonsensical news that Paris had fallen. Incidentally, I was also pleased at first until I saw that it was impossible. Such impossible news is always a very bad sign. If something really had gone well for us, then <span class='underline_single'>that</span> would be reported and no one would fall for such absurdities. So today I feel more than ever the terribly sad position of our race - the German race!! For it seems almost certain to me that we cannot beat England: The English - the best race in the world - <span class='underline_single'>cannot</span> lose! We, however, can lose and will lose, if not this year then the next! The thought that our race will be defeated depresses me terribly because I am German through and through!<br>Are suddenly caught by rifle fire from the Russians<br>God with me! —— It was only a Russian plane. ——, ——. Worked a great deal. Spend the night in Tarnobrzeg and go early tomorrow morning towards Szczucin. At noon my depression yielded ——.<br>\",\"date\":\"1914-10-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,48v[2]\",\"ger\":\"Früh gegen Szczucin. Fahren den ganzen Tag über. Habe Kopfschmerzen & bin müde. Trotzdem viel gearbeitet. ——.<br>\",\"eng\":\"Towards Szczucin, early. Underway all day. Have a headache and am tired. Still worked a lot. ——.<br>\",\"date\":\"1914-10-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,48v[3]\",\"ger\":\"Früh gegen Szczucin weiter gefahren. Sehr viel gearbeitet. Heute nacht habe ich Wachdienst. ——.<br>\",\"eng\":\"Further towards Szczucin, early. Worked a great deal. I'm on guard duty tonight. ——.<br>\",\"date\":\"1914-10-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,48v[4]\",\"ger\":\"Vor- & nachmittag wegen sehr großer Müdigkeit fast unfähig zu arbeiten. Schlief in der Nacht / so gut wie nichts. Der größte Teil der Mannschaft war besoffen so daß meine Wache recht unangenehm war. Fuhren früh gegen Sandomierz. Auf dem Wege brach ein Schaufelrad. Wir müssen nach Krakau von einem anderen Schiff geschleppt werden. Auf der Fahrt nach Krakau. Erhielt heute viel Post u.a. die <span class='underline_single'>traurige</span> Nachricht daß Paul schwer verwundet & in russischer Gefangenschaft ist — Gott sei Dank in guter Pflege. Die arme, arme Mama!!! ————. —— Auch von Ficker & der Jolles liebe Nachricht. Endlich einen Brief aus Norwegen worin Draegni mich um 1000 Kronen bittet. Aber ob ich sie ihm senden kann? Jetzt wo Norwegen sich unseren Feinden angeschlossen hat!!! Dies ist übrigens / auch eine furchtbar traurige Tatsache. Immer wieder muß ich an den armen Paul denken der so plötzlich <span class='underline_single'>um seinen Beruf gekommen ist</span>! Wie furchtbar. Welche Philosophie würde es bedürfen darüber hinweg zu kommen! Wenn dies überhaupt anders als durch Selbstmord geschehen kann!! —— Konnte nicht viel arbeiten, arbeite aber mit Zuversicht. ————. Dein Wille geschehe. ————.<br>\",\"eng\":\"In the morning and afternoon almost unable to work due to extreme fatigue. Hardly slept at night. Most of the crew was drunk, so my guard duty was quite awful. Left early, going towards Sandomierz. A paddle wheel broke on the way. We have to be towed to Krakow by another ship. On the way to Krakow. Received a lot of mail today, among other things the <span class='underline_single'>sad</span> news that Paul is badly wounded and a Russian prisoner - in good care, thank God. Poor, poor Mama!!! ————. ——Also good news from Ficker and Jolles. Finally a letter from Norway in which Draegni asks me for 1000 crowns. But can I send it to him? Now that Norway has joined our enemies!!! A terribly sad fact, for that matter. Again and again I can’t help thinking of poor Paul, so suddenly <span class='underline_single'>deprived of his vocation</span>! How terrible. What philosophy it would take to get over that! If only there is some solution other than suicide!! —— Couldn't work much, but work with confidence. ————. Thy will be done. ————.<br>\",\"date\":\"1914-10-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,50v[2]\",\"ger\":\"Auf dem Weg nach Krakau. Blieben stehen weil unser Schlepper nach Sandomierz zurück mußte. Warten bis er zurückkommt. Vormittag Kopfschmerzen & Müdigkeit. Dachte viel an Paul. Sehr viel gearbeitet. Belagere noch immer mein Problem, habe schon viele Forts genommen. / Sehe jetzt so klar & ruhig wie nur in den besten Zeiten. Wenn ich nur diesmal alles Wesentliche lösen könnte ehe die gute Zeit um ist!!! ——.<br>\",\"eng\":\"On the way to Krakow. We stopped because our tug had to go back to Sandomierz. Waiting until it comes back. Headache and fatigue in the morning. Thought a lot about Paul. Worked a great deal. Still besiege my problem, have already taken many forts. Now see as clearly and calmly as only in the best of times. If only this time I could solve all the essentials before the good time is over!!! ——.<br>\",\"date\":\"1914-10-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-101,51v[2]\",\"ger\":\"Erhielten heute eine deutsche Zeitung. Keine guten Nachrichten was so viel heißt als schlechte Nachrichten! Es ist <span class='underline_single'>schwer</span> zu arbeiten wenn solche Gedanken einen stören!! Habe trotzdem auch am Nachmittag gearbeitet. Ich empfinde oft schwer daß ich hier niemand habe mit dem ich mich etwas aussprechen kann. Aber ich will mich <span class='underline_double'>allen</span> Gewalten zum Trotze erhalten.<br>\",\"eng\":\"Got a German newspaper today. No good news, which means as much as bad news! It's <span class='underline_single'>hard</span> to work if such thoughts disturb one!! Nevertheless, did also work in the afternoon. I often find it difficult that I have nobody here that I can talk to. But I want to survive//stand my ground// resisting <span class='underline_double'>all</span> forces.<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,IIr[1]\",\"ger\":\"Nach meinem Tode an meine Mutter zu schicken.|<br>\",\"eng\":\"\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,1v[1]\",\"ger\":\"(Abends) Erhielt soeben liebe Post. Eine sehr liebe Karte von Frege! Eine von Trakl & Ficker! Mama, Klara, Frau Klingenberg. Dies hat mich sehr gefreut.<br>Sehr viel gearbeitet. ——.<br>\",\"eng\":\"(In the evening) Just received nice mail. A very nice card from Frege! One from Trakl and Ficker! Mama, Klara, Mrs. Klingenberg. That made me very happy.<br>\",\"date\":\"1914-10-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,1v[2] et 2v[1]\",\"ger\":\"Heute früh weiter gegen Krakau. Den ganzen Tag gearbeitet. Habe das Problem <span class='underline_single'>verzweifelt</span> gestürmt! Aber ich will eher mein Blut vor dieser Festung lassen ehe ich unverrichteter Dinge abziehe. Die größte Schwierigkeit ist die einmal eroberten Forts zu halten bis man ruhig in ihnen sitzen kann. Und bis nicht die <span class='underline_single'>Stadt</span> gefallen ist kann / man <span class='underline_single'>nicht</span> für immer ruhig in einem der Forts sitzen. ——.<br>Heute nacht habe ich Wache und bin leider schon durch das intensive Arbeiten sehr müde. Meine Arbeit noch immer ohne Erfolg! Nur zu! ——. Stehen heute nacht in Szczucin. ——.<br>\",\"eng\":\"Further towards Krakow early this morning. Worked the whole day. Stormed the problem in<span class='underline_single'> desperation</span>! But I would rather leave my blood in front of this fortress than withdraw empty-handed. The greatest challenge is keeping a just-conquered fortress until you can stay there in peace. And until the <span class='underline_single'>city</span> has fallen, you <span class='underline_single'>cannot</span> stay in one of the fortresses in peace. ——.<br>I'm on guard duty tonight and unfortunately I'm already very tired from working hard. My work is still unsuccessful! Go ahead! ——. Stay in Szczucin tonight. ——.<br>\",\"date\":\"1914-10-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,2v[2] et 3v[1]\",\"ger\":\"Vormittag weiter gegen Krakau. Während des Wachdienstes heute nacht gearbeitet, auch heute sehr viel und noch immer erfolglos. Bin aber nicht mutlos weil ich <span class='underline_single'>das</span> <span class='underline_single'>Hauptproblem</span>  immer im Auge habe. ——. Trakl liegt im Garnisonsspital in Krakau / und bittet mich ihn zu besuchen. Wie gerne möchte ich ihn kennenlernen! Hoffentlich treffe ich ihn wenn ich nach Krakau komme! Vielleicht wäre es mir eine große Stärkung. ——.<br>\",\"eng\":\"Further towards Krakow in the morning. Worked during the night watch, also a great deal today and still unsuccessfully. But I am not discouraged because I always have <span class='underline_single'>the main problem</span> in sight. ——. Trakl is in the garrison hospital in Krakow and asks me to visit him. How I would like to get to know him! I hope to meet him if I make it to Krakow! It could be a great boost for me. ——.<br>\",\"date\":\"1914-11-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,3v[2]\",\"ger\":\"Früh weiter gegen Krakau. Bin wieder sinnlicher. Gegen abend wieder am Sand stecken geblieben. Es ist bitter kalt. Es ist wirklich ein Glück daß man sich selbst hat und immer zu sich flüchten kann. Viel gearbeitet. Die Gnade der Arbeit!! ——.<br>\",\"eng\":\"Further towards Krakow first thing.  I am more sensual again. Got stranded on the sand again towards evening. It is bitterly cold. It is really fortunate that one has oneself and can always take refuge in oneself. Worked a lot. The blessing of work!! ——.<br>\",\"date\":\"1914-11-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,3v[3] et 4v[1] \",\"ger\":\"Früh weiter gegen Krakau. Höre daß die Russen wieder vorgerückt sind und 20 km von / Opakowiz stehen; wir stehen 10 km von dort. ——. Was wird jetzt mit mir geschehen wenn ich nahe Krakau komme?!? Fast den ganzen Tag gearbeitet. ——. Werden wahrscheinlich heute nacht fahren. Hören Kanonendonner und sehen den Blitz. ——! ——.<br>\",\"eng\":\"Further towards Krakow first thing. Hear that the Russians have advanced again and are 20 km from Opakowiz; we are 10 km from there. ——. What will happen to me now if I get close to Krakow?!? Worked almost all day. ——. Will probably go on tonight. Hear cannons firing and see the flash. ——!——.<br>\",\"date\":\"1914-11-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,4v[2] et 5v[1]\",\"ger\":\"Ruhige Nacht. Früh weiter. Sehr viel gearbeitet. Morgen sollen wir in Krakau sein. Höre daß wir wahrscheinlich eine Belagerung von Krakau zu erwarten haben. Da werde ich viel Kraft brauchen um den Geist zu bewahren. ——. Häng nur nicht von der äußeren Welt ab dann brauchst du dich / vor dem was in ihr geschieht nicht zu fürchten. Heute nacht Wachdienst. Es ist leichter von Dingen als von Menschen unabhängig zu sein. Aber auch das muß man können! ——. <br>\",\"eng\":\"Quiet night. Went further early in the morning. Worked a great deal. Tomorrow we should be in Krakow. Hear that we can probably expect a siege of Krakow. I will need a lot of strength there to keep up the spirit. ——. Just don't be dependent on the external world, then you don't need to fear what happens in it. Guard duty tonight. It is easier to not be dependent on things than on people. But one has to be able to do that as well! ——.<br>\",\"date\":\"1914-11-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,5v[2] et 6v[1]\",\"ger\":\"Früh weiter nach Krakau wo wir spät abends ankommen sollen. Bin sehr gespannt ob ich Trakl treffen werde. Ich hoffe es sehr. Ich vermisse sehr einen Menschen mit dem ich mich ein wenig ausreden kann. Es wird auch ohne einen solchen gehen müssen. Aber es würde mich sehr stärken. Den ganzen Tag etwas müde & zur Depression geneigt. Nicht sehr viel gearbeitet.<br>/ In Krakau. Es ist schon zu spät Trakl heute noch zu besuchen. ——. Möge der Geist mir Kraft geben. ——<br>\",\"eng\":\"To Krakow early, where we should arrive late in the evening. I'm very eager to see whether I will meet Trakl. I fervently hope so. I do so miss someone who can hear me out a bit. There must also be some way of doing without such a person. But it would fortify me so much. A bit tired all day and inclined to depression. Didn‘t work a great deal. <br>In Krakow. It’s already too late to visit Trakl today. ——. May the spirit give me strength. ——<br>\",\"date\":\"1914-11-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,6v[2] \",\"ger\":\"Früh in die Stadt zum Garnisonsspital. Erfuhr dort daß Trakl vor wenigen Tagen gestorben ist! Dies traf mich sehr stark. Wie traurig, wie traurig!!! Ich schrieb darüber sofort an Ficker. Besorgungen gemacht & dann gegen 6 Uhr aufs Schiff gekommen. Nicht gearbeitet. Der arme Trakl! ——! Dein Wille geschehe. —— <br>\",\"eng\":\"Into the city early to the garrison hospital. Learned there that Trakl died a few days ago! This hit me very hard. How sad, how sad!!! I immediately wrote to Ficker about it. Ran errands and got on the ship around 6 a.m. Didn’t work. Poor Trakl! ——!  Thy will be done. ————<br>\",\"date\":\"1914-11-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,6v[3] et 7v[1] \",\"ger\":\"Gestern um neun Uhr abends kam plötzlich der Befehl für eine / Arbeit an einem anderen Schiff mit dem Scheinwerfer zu leuchten. Also aus dem Bett heraus und bis 3½ früh geleuchtet. Bin in Folge dessen sehr müde. Nachmittag in der Stadt auf Besorgungen. Die Belagerung von Krakau wird jetzt mit aller Bestimmtheit erwartet. Ich will trachten von diesem Schiff wegzukommen. Nicht gearbeitet. Ich sehne mich nach einem anständigen Menschen denn hier bin ich <span class='underline_single'>von Unanständigkeit</span> <span class='underline_double'>umringt</span>. Möge der Geist mich nicht verlassen und in mir beständiger werden. ————.<br>\",\"eng\":\"Yesterday at nine o'clock in the evening a command came suddenly for a job running the searchlight on another ship. So out of bed and did so until 3½ in the morning. As a result, I’m very tired. Afternoon in the city on errands. The siege of Kraków is now definitely expected. I want to try to get away from this ship. Didn’t work. I long for a decent human being because here I am <span class='underline_double'>surrounded</span> <span class='underline_single'>by lack of decency</span>. May the spirit not leave me and become more steadfast in me. ————.<br>\",\"date\":\"1914-11-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,8v[1] \",\"ger\":\"Bin nicht recht zum Arbeiten gestimmt. Lese viel. Heute nacht Wachdienst. Fast nichts gearbeitet. Bin etwas über meine Zukunft besorgt. ——.<br>\",\"eng\":\"I'm not really in the mood to work. Read much. Guard duty tonight. Did almost no work. I'm a bit worried about my future. ——.<br>\",\"date\":\"1914-11-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,8v[2] et 9v[1] et 10v[1]\",\"ger\":\"Belauschte eben ein Gespräch unseres Kommandanten mit einem anderen Offizier: Was für gemeine Stimmen. Die ganze Schlechtigkeit der Welt kreischt & krächzt aus ihnen heraus. Gemeinheit wo ich hinsehe. <span class='underline_double'>Kein</span> fühlendes Herz soweit mein Auge reicht!!! ———— <br>Erhalte eine <span class='underline_single'>sehr</span> liebe Karte von Onkel Paul. So eine Karte sollte mich / erfrischen & stärken aber ich bin in den letzten Tagen <span class='underline_single'>deprimierbar</span>!! Ich habe an nichts eine rechte Freude. Und ich lebe in Angst vor der Zukunft! Weil ich nicht mehr in mir ruhe. Jede Unanständigkeit meiner Umgebung – und solche gibt es immer – verwundet mich im Innersten und ehe eine Wunde verheilt kommt eine frische! Selbst dann wenn – wie jetzt, abends – ich nicht deprimiert bin, fühle ich mich doch nicht so recht frei. Ich habe nur selten & dann ganz vorübergehende Lust zum Arbeiten. Da ich nicht zu einem behaglichen Gefühle  / kommen kann. Ich fühle mich abhängig von der Welt & muß sie daher auch dann fürchten wenn augenblicklich mir nichts Schlechtes widerfährt. Ich sehe mich selbst, das Ich worin ich sicher ruhen konnte wie ein ersehntes fernes Eiland das von mir gewichen ist. – Die Russen rücken schnell gegen Krakau vor. Die ganze Zivilbevölkerung muß die Stadt verlassen. Es sieht mit unserer Sache sehr schlecht aus! <span class='underline_single'>Gott </span><span class='underline_single'>steh</span><span class='underline_single'> mir </span><span class='underline_single'>bei</span>!!! Ein wenig gearbeitet.<br>\",\"eng\":\"Just overheard a conversation between our commander and another officer: what vile voices. All the wickedness of the world squawks and screeches out of them. Villainy wherever I look. <span class='underline_double'>Not one</span> sympathetic heart as far as my eye can see!!! ————<br>Receive a <span class='underline_single'>very</span> nice card from Uncle Paul. Such a card ought to refresh and strengthen me but I have been <span class='underline_single'>depressible</span> in the last few days!! I have no real joy in anything. And I live with anxiety about the future! Because I am no longer at peace with myself. Every lack of decency in my environment – and there’s always something of the kind – wounds me deeply and before a wound heals there’s a fresh one! Even if – as in the evenings now – I am not depressed, I still don't feel really free. I seldom have a desire to work, and then only very fleetingly. Because I can't bring myself to feel at ease. I feel myself dependent on the world and so have to fear it too, even when for the present nothing bad will happen to me. I see my self, that self in which I could once rest secure, as a longed for distant isle that has disappeared. –  The Russians are advancing rapidly on Krakow. The entire civilian population has to leave the city. It looks very bad for our cause! <span class='underline_single'>God be with me</span>!!! Worked a little.<br>\",\"date\":\"1914-11-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,10v[2] et 11v[1]\",\"ger\":\"Wieder mehr gearbeitet. Und / besserer Stimmung. Erfuhr heute daß ich über die Schweiz nach England schreiben könne; gleich morgen werde ich an David & vielleicht an Russell schreiben. Oder vielleicht schon heute. Ich hoffe jetzt wieder besser arbeiten zu können! \\n\\t——!! <br>\",\"eng\":\"Worked again. And a better mood. Today I learned that I could write to England via Switzerland; I'll write to David and maybe Russell soon. Or maybe today. – I hope I can now work better again!<br>\",\"date\":\"1914-11-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,11v[2] et 12v[1]\",\"ger\":\"Netten Brief von Ficker. Ziemlich viel gearbeitet. Wir hörten schon Kanonendonner von den Werken! Habe einen Brief an David abgeschickt. Wie oft ich an ihn denke! Ob er halb so viel an mich denkt? (?) / Heute besserer Stimmung. ——! <br>\",\"eng\":\"Nice letter from Ficker. Worked quite a bit. We’ve already heard cannons firing from the front! Sent a letter to David. How often I think of him! Does he think of me half as much? (?)<br>\",\"date\":\"1914-11-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,12v[2] et 13v[1]\",\"ger\":\"Nur sich selbst nicht verlieren!!! Sammle dich! Und arbeite nicht zum Zeitvertreib sondern fromm um zu leben! Tue keinem ein Unrecht! —— Es wird von einer 6-7 monatlichen Belagerung gesprochen! Alle Geschäfte sind geschlossen & öffnen nur auf ganz kurze Zeit. Je ernster die Lage wird desto roher werden die Unteroffiziere. Denn sie fühlen daß sie jetzt ungestraft ihre ganze Gemeinheit entladen können da jetzt die Offiziere den Kopf verlieren & im guten Sinn keine Kontrolle mehr  / ausüben. Jedes Wort was man jetzt hört ist eine Grobheit. Denn die Anständigkeit lohnt sich auf keine Weise mehr und die Leute geben daher auch das bißchen preis was sie etwa noch besitzen. Es ist alles tief traurig. \\nNachmittag in der Stadt. Ziemlich viel gearbeitet <span class='underline_single'>aber ohne rechte Klarheit des Sehens</span>! Ob ich noch weiter werde arbeiten können?(!) Ob der Vorhang schon fällt?? Es wäre merkwürdig da ich inmitten eines Problems stecke, inmitten einer Belagerung. ——. ——!<br>\",\"eng\":\"Just don't lose yourself!!! Pull yourself together! And do your work not to pass the time but to live devoutly! Treat no one unjustly! —— There is talk of a 6-7 month siege! All shops are closed and only open for a very short time. The more serious the situation becomes, the cruder the non-commissioned officers get. Because they feel that they can now give free rein to their viciousness with impunity since the officers are losing their heads now and no longer exercise any control for the better. Every word one hears now is an insult. Because decency no longer pays, and so people give up the little they still have. It is all extremely sad.<br>Afternoon in the city. Worked quite a lot <span class='underline_single'>but without any real clarity of vision</span>! Will I still be able to continue work?(!) Is the curtain already falling?? It would be//is// odd that I'm stuck in the middle of a problem, in the middle of a siege. ——. ——!<br>\",\"date\":\"1914-11-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,13v[2] et 14v[1] et 15v[1]\",\"ger\":\"Den ganzen Vormittag habe ich mich vergebens bemüht zu arbeiten.<br>/ Das klare Sehen will sich nicht einstellen. Denke viel über mein Leben nach und dies ist auch ein Grund weshalb ich nicht arbeiten kann. Oder ist es umgekehrt? Ich glaube jetzt daß ich mich noch immer nicht genug von den anderen am Schiff abschließe. Ich kann mit ihnen nicht verkehren da mir die gewisse Gemeinheit fehlt die dazu nötig ist. Aber auf ganz unbegreiflicher Weise fällt mir dies Abschließen nicht leicht. Nicht daß ich mich zu irgend einem Menschen im geringsten hingezogen fühlte. Aber die Gewohnheit mit Menschen freundlich zu reden ist so stark! <br>/ Heute nacht Dienst. Gehe jetzt jeden Abend in ein Kaffeehaus & trinke 2 Gläser Kaffee; & die wohlanständige Atmosphäre tut mir gut. <span class='underline_single'>Wenig</span> gearbeitet! ——! \\n\\tGott gebe mir Vernunft & Kraft!!! ——.<br>\",\"eng\":\"All morning I have tried to work, but in vain.<br>Clear vision eludes me. Think a lot about my life and that is another reason why I can’t work. Or is it the other way around? I believe now that I am still not closing myself off completely enough from the others on the ship. I can’t communicate with them because I lack a certain viciousness that is needed for that. But in a quite incomprehensible way it is no easy matter for me to carry that off. Not that I felt the least bit drawn to any of them. But the habit of talking to people in a friendly way is so strong!<br>On night duty today. Go to a coffee house every evening now and drink 2 glasses of coffee; and the respectable atmosphere does me good. Worked a <span class='underline_single'>little</span>! ——!<br>God give me reason and strength!!! ——.<br>\",\"date\":\"1914-11-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,15v[2] et 16v[1]v\",\"ger\":\"Nachts auf der Wache fast die ganze Zeit Vorschriften für mein Leben mir ausgedacht daß es halbwegs erträglich werde. Bin grundlos deprimiert, d.h. es fehlt mir zum mindesten jede Lebensfreude. Und jedes laute Wort das ich höre tut mir weh. Ganz ohne Grund!! —— Auch gearbeitet habe ich heute nacht am Posten. ——<br>/ Als eine <span class='underline_single'>Gnade</span> muß ich es noch betrachten daß ich in meiner Kammer ruhig sitzen kann & so doch Gelegenheit habe mich etwas zu sammeln. —— Sehr wenig gearbeitet. Tagsüber sehr müde, wie jetzt leider oft! Nachmittag verging die starke Depression aber ich war zu müde zum Arbeiten. Abends wie gewöhnlich aus. ——! <br>\",\"eng\":\"On guard duty in the night, spent almost all the time working out rules for my life so that it will be halfway bearable. I'm depressed for no reason, i.e. I lack any zest for life, at the very least. And every raised voice I hear hurts me. All for no reason!! —— I also worked on the mail tonight. ——<br>Still, I have to consider it a <span class='underline_single'>blessing</span> that I can sit quietly in my room and so have the opportunity to put something together. —— Worked very little. Very tired in the daytime, as is now often the case, unfortunately! The severe depression faded away in the afternoon but I was too tired to work. Out as usual in the evening. ——!<br>\",\"date\":\"1914-11-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,16v[2]\",\"ger\":\"Lese jetzt in Emersons Essays. Vielleicht werden sie einen guten Einfluß auf mich haben. Ziemlich gearbeitet. ——.<br>\",\"eng\":\"Reading Emerson's essays now. Maybe they will have a good influence on me. Worked fairly well.  ——.<br>\",\"date\":\"1914-11-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,16v[3] et 17v[1] et 18v[1]\",\"ger\":\"Es wird Winter. — Gestern / erhielt ich von Ficker eine freundliche Karte. Es ist dann die Rede daß die Schiffsmannschaft von hier wegkommt da die Schiffe über Winter nicht zu verwenden sind. <br>Was wird dann mit mir werden?? Wir hören starken Geschützdonner von den Werken. Nicht viel gearbeitet. Abends in der Stadt. Wieder keine Klarheit des Sehens obwohl ich ganz offenbar vor der Lösung der tiefsten Fragen stehe daß ich mir fast die Nase daran stoße!!! Mein Geist ist eben jetzt dafür einfach blind! Ich fühle daß ich <span class='underline_single'>an dem Tor</span> <span class='underline_double'>daran</span> / stehe kann es aber nicht klar genug sehen um es öffnen zu können. Dies ist ein ungemein merkwürdiger Zustand den ich noch nie so klar empfunden habe als jetzt. ——!——!<br>\",\"eng\":\"Winter is coming. – Yesterday I received a friendly card from Ficker. There is talk that the ship’s crew will get away from here because the ships are not to be used in winter. <br>What will become of me then? We hear heavy artillery fire from the front. Didn’t work much. In the evening in the city. Again no clarity of vision although I am so obviously facing the solution to the deepest questions that I almost bump my nose against it!!! My spirit is simply blind to it right now! I feel that I am standing <span class='underline_double'>at</span><span class='underline_single'> the </span><span class='underline_single'>gate</span> but can’t see it clearly enough to be able to open it. This is an extremely strange state that I have never felt so clearly as at present. ——!——!<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,18v[2] et 19v[1] et 20v[1]\",\"ger\":\"<span class='underline_single'>Wie schwer</span> es ist sich nicht mit den Leuten zu ärgern! <span class='underline_single'>Wie schwer</span> es ist zu dulden. Vormittag alles Mögliche zu verrichten gehabt & nicht zum Arbeiten gekommen. Wenn immer ich bei der Arbeit mit den Leuten hier in Berührung komme wird mir ihre Gemeinheit so fürchterlich daß die Wut / droht in mir zu siegen & auszubrechen. <span class='underline_single'>Immer wieder</span> nehme ich mir vor ruhig zu dulden & <span class='underline_single'>immer</span> wieder breche ich meinen Vorsatz. Und wie dies kommt weiß ich eigentlich selber nicht. Es ist so riesig schwer mit Leuten zu arbeiten & dabei doch <span class='underline_single'>nichts</span> mit ihnen zu tun zu haben. Immer wieder muß man zu ihnen reden, sie etwas fragen, sie antworten frech & ungenügend – welcher Kraftaufwand schon, dies hinzunehmen – du brauchst aber die Antwort. Es kommt ein unklarer Befehl, etc., etc., etc. Und die Nerven sind ohnehin schon ruiniert. Da ist es schwer zu leben wenn man nicht versteht es sich ganz  / leicht zu machen. Nachmittag faßte mich eine schwere Depression an. Wie ein Stein liegt es auf meiner Brust. Jede Pflicht wird zur unerträglichen Bürde. Gegen Abend legte sich mein Übelbefinden. In meine Seele kehrte etwas Mut zurück. Fast nicht gearbeitet. Untertags, wie jetzt schon oft, war keine Stimmung, erst abends genügende innere Ruhe! Ob das davon kommt daß ich am Abend mich auf den Schlaf freue? – Ja, die heutige Depression war furchtbar!!! ——.<br>\",\"eng\":\"<span class='underline_single'>How hard</span> it is not to be annoyed by people! <span class='underline_single'>How hard</span> it is to be tolerant. Had all sorts of things to do in the morning and couldn't get to work. Whenever I come into contact with the people here at work, their viciousness becomes so terrible to me that anger threatens to triumph and explode in me. <span class='underline_single'>Again and </span><span class='underline_single'>again</span> I try to be calmly tolerant and again and <span class='underline_single'>again</span> I break my resolution. And I really don't know how this happens. It's so hugely difficult to work with people and yet have <span class='underline_single'>nothing</span> to do with them. Again and again you have to talk to them, ask them something, they answer insolently and inadequately – what effort it takes to accept this – but you need the answer. There is an unclear command, etc., etc., etc.,. And one’s nerves are already ruined anyway. Since it's hard to live if you don't understand how to take the easy way out. In the afternoon a severe depression took hold of me. It lies on my chest like a stone. Every duty becomes an unbearable burden. Towards evening my evil condition subsided. A little courage returned to my soul. Did almost no work. As is often the case now, no cheer during the day, enough inner peace only in the evening! Is that due to my looking forward to sleep in the night? – Yes, today's depression was terrible!!! ——.<br>\",\"date\":\"1914-11-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,20v[2] et 21v[1]\",\"ger\":\"Starker Donner von den Werken. Es heißt daß wir in den / nächsten Tagen wieder fahren sollen. Unser Kommandant kommt weg & der Leutnant Molé wieder an seine Stelle. Dies freut mich. Man hört Maschinengewehrfeuer. Den ganzen Tag <span class='underline_single'>heftiger</span> Geschützdonner von den Werken. – Ziemlich viel gearbeitet. Guter Stimmung. Trage mich mit dem Plan mich versetzen zu lassen kann aber nicht mit mir in's reine darüber kommen. In meiner Arbeit ist ein Stillstand eingetreten da ich wieder einen bedeutenden Einfall brauchte um vorwärts zu kommen. —— ——. <br>\",\"eng\":\"Heavy thunder from the front. It means that we will be on the move again in the next few days. Our commander goes away and Lieutenant Molé takes his place again. That makes me happy. You can hear machine gun fire. <span class='underline_single'>Heavy</span> artillery fire from the front all day. — Worked quite a bit. Good mood. Considering my plan to be transferred but cannot come to terms with myself about it. My work came to a standstill because I needed another significant idea to move forward. —— ——.<br>\",\"date\":\"1914-11-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,22v[1]\",\"ger\":\"Es schneit. Wie jetzt oft, früh in gedrückter Stimmung. Den ganzen Vormittag für's Schiff gearbeitet. Nachmittag erwartet man den Besuch eines Generals. Alles deshalb schon jetzt in Aufregung. Gegen Abend etwas gearbeitet. Wieder heftige Kämpfe um Krakau. ——. <br>\",\"eng\":\"It's snowing. As is often the case now, in a gloomy mood early on. Worked on the ship all morning. A visit from a general is expected in the afternoon. So now everything is really frantic. Did some work towards evening. Heavy fighting over Krakow again. ——.<br>\",\"date\":\"1914-11-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,22v[2] et 23v[1]\",\"ger\":\"Starke Kanonade. ——. Etwas gearbeitet. Heute nacht Wache. Nachmittags beim Augenarzt weil ich beim Wachdienst unter meinen schlechten Augen leide. Werde Brille bekommen. Meine Zukunft ist noch immer ganz ungewiß. Morgen werde / ich vielleicht mit unserem Kommandanten darüber reden was mit mir geschehen soll. ——.<br>\",\"eng\":\"Heavy barrage. ——. Did some work. Guard duty tonight. In the afternoon at the ophthalmologist because I suffer from my bad eyes while on guard duty. Will get glasses. My future is still very uncertain. Maybe tomorrow I’ll talk to our commander about what’s to become of me. ——.<br>\",\"date\":\"1914-11-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,23v[2]\",\"ger\":\"Anhaltende Kanonade. Große Kälte. Fast ununterbrochener Donner von den Werken. Ziemlich gearbeitet. Aber noch immer kann ich <span class='underline_single'>das eine erlösende Wort</span> nicht aussprechen. Ich gehe rund um es herum & ganz nahe aber noch konnte ich es nicht selber erfassen!! Über meine Zukunft immer ein wenig besorgt, weil ich nicht ganz in mir ruhe! ——! ——. <br>\",\"eng\":\"Persistent barrage. Bitter cold. Almost continuous bombardment from the front. Worked pretty well. But I still can't utter <span class='underline_single'>the one redeeming word</span>. I go around it and am very close but I still couldn't get hold of it!! Always a little worried about my future, because I’m not really at ease with myself! ——! ——.<br>\",\"date\":\"1914-11-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,23v[3] et 24v[1]\",\"ger\":\"Grimmige Kälte! Auf der Weichsel<br>schwimmt Eis. Fortwährend Geschützdonner. Keinen rechten Einfall gehabt & recht müde daher wenig gearbeitet. Das erlösende Wort nicht ausgesprochen. Gestern lag es mir einmal ganz auf der Zunge. Dann aber gleitet es wieder zurück ——. Bin mittelmäßiger Stimmung. Ich will bald schlafen gehen. ——.<br>\",\"eng\":\"Fierce cold! Ice floats on the Vistula. Continuous artillery fire. Had no good ideas and pretty tired, so worked little. The redeeming word not spoken. Yesterday it was on the tip of my tongue at one point. But then it slips away again ——. Am in a mediocre mood. I want to go to sleep soon. ——.<br>\",\"date\":\"1914-11-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,24v[2] et 25v[1] et 26v[1]\",\"ger\":\"Anhaltender Donner. ——. Höre gerade daß ein Telegramm gekommen ist: „Wassertransport eingestellt.”. Also muß sich bald entscheiden was aus uns wird. —— Mein Tag vergeht jetzt in Lesen etwas Arbeiten wobei ich natürlich immer bei  / mir in der Kabine sitze. Jeden 4ten-5ten Tag Wachdienst; hie & da Kartoffelschälen, Kohlen tragen und dergleichen. Außer dem Wachdienst habe ich keine <span class='underline_single'>bestimmte</span> Arbeit (der Scheinwerfer wird seit 1½ Monaten fast nicht mehr gebraucht). Ich fühle mich daher unter den Leuten als Faulpelz und auch in meiner vielen freien Zeit komme ich nicht recht zur Ruhe da ich fühle ich sollte für das Schiff arbeiten aber doch nicht weiß was. Das Beste wäre für mich eine regelmäßige Arbeit die ich leicht vollbringen könnte & sicher. Denn eine Arbeit der man nicht gewachsen ist ist das Ärgste. Ich werde / heute trachten mit unserem Kommandanten über eine eventuelle Versetzung zu sprechen. Dies ist geschehen & ich darf hoffen daß ich von hier versetzt werden werde. Ziemlich gearbeitet aber immer noch ohne Erfolg. Abends im Bad. ——. <br>\",\"eng\":\"Sustained bombardment. ——.  Just hear that a telegram has arrived: \\\"Water transportation suspended.\\\" So there must soon be a decision about what will become of us. ——. My day now passes in reading something, doing some work, where I am of course always sitting in the cabin by myself. Every 4th-5th day guard duty; now and then peeling potatoes, carrying coals and the like. Apart from the guard duty, I have no <span class='underline_single'>specific</span> job (the searchlight has hardly been needed for the last 1½ months). So I feel like an idler amid the people and in my many free hours I don't really rest because I feel I should work for the ship yet don't know what to do. The best thing for me would be a regular job that I could do easily and safely. Because a job where you’re out of your depth is the worst. I will try to speak to our commander today about a possible transfer. This has happened and I can hope that I will be transferred from here.  Worked pretty well, but still without success. In the bath in the evening. ——.<br>\",\"date\":\"1914-11-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,26v[2] et 27v[1]\",\"ger\":\"<span class='underline_single'>Grimmige</span> Kälte! Die Weichsel ist mit treibendem Eis ganz bedeckt. Fahren heute in den Hafen ein. Wenn ich nur schon von hier fort wäre! Hier ist eine immerwährende Unruhe & niemand weiß was er tun soll. Die Unteroffiziere werden immer gemeiner & einer steckt darin den anderen an & ermutigt ihn zu immer  / größerer Frechheit. Es gibt freilich auch Ausnahmen. Heute nacht Wachdienst. Kein Wachdienst. <span class='underline_single'>Viel</span> gearbeitet. Immer wieder liegt mir die fehlende Erkenntnis auf der Zunge. Dies ist gut. Ficker sandte mir heute Gedichte des armen Trakl die ich für genial halte ohne sie zu verstehen. Sie taten mir wohl. Gott mit mir! ——.<br>\",\"eng\":\"<span class='underline_single'>Fierce</span> cold! The Vistula is completely covered with drifting ice. Enter the port today. If only I were already away from here! There is constant unrest here and nobody knows what to do. The noncommissioned officers are becoming ever more vile and one contaminates the other and emboldens him to ever greater impudence. There are, of course, exceptions. Guard duty tonight. No guard duty. Worked a <span class='underline_single'>lot</span>. Again and again the missing realization is on the tip of my tongue. This is good. Ficker sent me poor Trakl’s poems today, which I think are wonderful even though I don’t understand them. They did me good. God with me! ——.<br>\",\"date\":\"1914-11-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,27v[2] et 28v[1]\",\"ger\":\"Stehen seit gestern nachmittag im Hafen. Die Aborte des Schiffs sind gesperrt! Und man muß weit laufen bis zu einer halboffenen Latrine. <br>/ Es ist sehr kalt. Die Lebensweise wird immer unerträglicher. Nicht viel gearbeitet. Nur fort von hier! ——. <br>\",\"eng\":\"Have been in port since yesterday afternoon. The ship's toilets are blocked! And one has to walk far to a half-open latrine. <br>It is very cold. This way of life is becoming ever more unbearable. Didn’t work much. Just get away from here! ——.<br>\",\"date\":\"1914-11-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,28v[2] et 29v[1] et 30v[1]\",\"ger\":\"Wenn man fühlt daß man bei einem Problem stockt so darf man nicht mehr darüber nachdenken sonst bleibt man daran kleben. Sondern man muß irgendwo anfangen zu denken wo man ganz gemütlich sitzen kann. Nur nicht drücken! Die harten Probleme müssen sich alle von selbst vor uns auflösen. \\n\\tStarker Kanonendonner.<br>Was ich auch tue, die Probleme ballen sich wie Gewitterwolken / zusammen und ich bin nicht im Stande einen dauernd befriedigenden Standpunkt ihnen gegenüber einzunehmen. Sehr viel gearbeitet aber ohne die Lage irgendwie klären zu können. Vielmehr wo ich immer denke überall treffe ich Fragen die ich nicht beantworten kann. Heute war es mir als sei es nun mit meiner Fruchtbarkeit zu Ende. Der ganze Gegenstand schien wieder in die Ferne zu rücken. Und freilich: meine 3-4 Monate sind um. Und leider ohne ein wirklich großes Resultat! Aber wir werden ja sehen. ——. Es heißt jetzt daß wir Winterquartiere beziehen sollen und / wenn dies geschieht werde ich vielleicht mit allen Leuten zusammen schlafen müssen; was Gott verhüte!! —— \\nMöchte in jedem Fall die Geistesgegenwart nicht verlieren! Gott mit mir. ——. ——.<br>\",\"eng\":\"If you feel that you are faltering over a problem, you shouldn't think about it anymore or you will get stuck on it. Instead you have to start thinking somewhere where you can be completely comfortable. Just don't push! The hard problems must all dissolve by themselves before us.<br>Whatever I do, the problems clump together like storm clouds and I am unable to take a consistently satisfactory view of them. Worked a great deal but could not clarify the situation in any way. Rather, whatever I think, everywhere I meet questions that I cannot answer. Today it was as if my fertility had ended. The whole thing seems to retreat again into the distance. And of course: my 3-4 months are over. And unfortunately without a really great result! But we'll see. ——. They say now that we shall move into winter quarters and if this happens I may have to sleep with all the people; God forbid!! ——<br>In any case, may my presence of mind not leave me! God with me. ——. ——.<br>\",\"date\":\"1914-11-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,30v[2]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1914-11-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,30v[3] et 31v[1]\",\"ger\":\"Gestern sehr viel gearbeitet. Von gestern mittag bis heute mittag im Wachzimmer mit 7 Leuten & am Posten. Fühlte mich – besonders heute sehr unglücklich. Betreibe mit allen Mitteln meine Versetzung. Ich glaube daß ich in der Umgebung dieser rohen & gemeinen Menschen die durch  / keine Gefahr gezähmt sind elend umkommen <span class='underline_double'>muß</span> wenn nicht ein Wunder für mich geschieht das mir viel mehr Kraft & Weisheit gibt als ich jetzt habe! Ja, ein <span class='underline_single'>Wunder</span> müßte für mich geschehen wenn ich es überleben soll! Bin in Angst wegen meiner Zukunft. Wenig gearbeitet. Ein Wunder! Ein Wunder! ——.<br>\",\"eng\":\"Worked a great deal yesterday. From yesterday afternoon to today noon in the guards’ office with 7 people and on duty. Felt — very unfortunate, especially today. Pursuing my transfer by hook or by crook. I believe that unless a miracle makes me much stronger and wiser, I <span class='underline_double'>must</span> perish miserably, in the company of these crude and vile men who are tamed by no danger! Yes, it would take a <span class='underline_single'>miracle</span> for me if I am to survive it! I'm anxious about my future. Worked a little. A miracle! A miracle! ——.<br>\",\"date\":\"1914-11-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,31v[2]\",\"ger\":\"Ziemlich viel gearbeitet. ——. <br>\",\"eng\":\"\",\"date\":\"1914-11-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,31v[3] et 32v[1] et 33v[1] \",\"ger\":\"Früh am Korpskommando. Mit unserem Kommandanten wegen mir gesprochen: Wenn ich versetzt werde so muß ich / zurück zum Kader kommen. Im Falle wir Winterquartiere beziehen wird er dafür sorgen daß ich ein eigenes Zimmer kriege. In der nächsten Zeit aber soll der Scheinwerfer wieder gebraucht werden & ich solle doch daher hier bleiben. —— Jetzt abends wie ich aus der Stadt komme ist hier großer Lärm weil ein Schiff von hier wegfahren soll. Es ist auch die Rede davon daß der Scheinwerfer mitkommt. ——. Dies wäre mir recht unangenehm. So können unsere Pläne jeden Augenblick durchkreuzt werden & ich muß einen anderen / Halt haben um <span class='underline_single'>doch</span> leben zu können. – War heute nachmittag beim Kader & sprach mit einem Feuerwerker darüber ob es nicht möglich wäre daß ich in die Ballonabteilung käme. Er sagte ich solle hierüber mit einem Feuerwerker Vlcek dieser Abteilung sprechen. Dies werde ich hoffentlich tun können! ——. Nicht viel gearbeitet aber nicht ohne Anregung. Wieder etwas sinnlich. \\n\\tNur dem eigenen Geist leben! und alles Gott überlassen! ——.<br>\",\"eng\":\"At the corps command early. Spoke with our commander on my account: If I am transferred, then I have to return to the squad. If we move into winter quarters, he will make sure that I get my own room. However, in the near future the searchlight will be needed again and so I should stay here anyway. —— This evening as I leave the city there is a lot of noise because a ship is supposed to leave here. There is also talk of the searchlight coming along. ——. This would be very uncomfortable for me. So our plans can be thwarted at any moment and I have to have a different foothold to <span class='underline_single'>still</span> be able to live. —— Was with the squad this afternoon and talked to a munitions worker about whether it would be possible for me to join the balloon unit. He said I should talk to Vlcek, a munitions worker from that unit. I hope I will be able to do so! ——. Didn’t work much but not without stimulus. Somewhat sensual again.<br>Live only in your own spirit! And entrust everything to God! ——.<br>\",\"date\":\"1914-11-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,33v[2] et 34v[1] et 35v[1]\",\"ger\":\"Also schon Dezember! und noch immer / keine Rede von Frieden! Heute nacht heftiger Geschützdonner, man hörte die Geschosse sausen. —— Gestern Abend ist ein Schiff die Weichsel hinunter gefahren und jeden Tag hat eine andere Besatzung darauf Wache z.B. morgen <span class='underline_single'>wir</span>! Wie wird es mir ergehen?! Mit diesen Kameraden & diesen Vorgesetzten! —— ——. Nachmittag den Feuerwerker Vlcek suchen gegangen, nicht gefunden. Wurde an die Artilleriestabsabteilung gewiesen. Werde wohl übermorgen nach der Wache dorthin gehen. Sehr wenig gearbeitet. Der Geist beschütze mich was immer / geschehe! ——.<br>\",\"eng\":\"So December already! And still no talk of peace! Violent artillery fire tonight, the shells could be heard whizzing. —— Last night a ship sailed down the Vistula, which every day has a different crew on guard duty. Tomorrow, for example, <span class='underline_single'>us</span>! How will it go for me?! With these comrades and superiors! ————. In the afternoon went looking for Vlcek the munitions worker, didn’t find him. Was directed to the artillery headquarters office. Will probably go there the day after tomorrow, after the watch. Worked very little. The spirit protect me whatever happens! ——.<br>\",\"date\":\"1914-12-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,35v[2]\",\"ger\":\"Heute mittag gehen wir auf Wache. Gott sei Dank geht unser Kommandant mit so daß wenigstens <span class='underline_single'>ein</span> anständiger Mensch dabei ist. Nachts furchtbarer Donner von den Werken. Und jetzt um 8 Uhr früh fängt er wieder an. Heute nacht müssen wir im Freien schlafen. Ich werde wohl nicht zum Arbeiten kommen; nur Gott nicht vergessen. ————. <br>\",\"eng\":\"We are on guard duty this afternoon. Thank God our commander goes with us, so at least <span class='underline_single'>one</span> decent human being will be there. Terrible bombardment from the front at night. And now it begins again at 8 a.m. We have to sleep outdoors tonight. I will probably not get to work. Just don't forget God. ————. <br>\",\"date\":\"1914-12-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,35v[3]\",\"ger\":\"Nichts gearbeitet aber viel erlebt, bin aber jetzt zu müde es einzutragen. ——<br>\",\"eng\":\"Didn’t work but went through a lot, however am now too tired to record it. ——<br>\",\"date\":\"1914-12-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,36v[1] et 37v[1]\",\"ger\":\"Vorgestern auf der Wacht ereignete sich nichts Besonderes außer daß ich einmal laufend zu Boden fiel und noch heute hinken muß. Von allen Seiten heftigster Kanonendonner. Gewehrfeuer, Brände etc. Gestern abend auf dem Festungskommando wegen meiner Angelegenheit. Ein Oberleutnant als er hörte daß ich Mathematik studiert habe sagte ich solle zu ihm (in eine Fabrik) kommen. Er scheint <span class='underline_single'>sehr</span> nett zu sein. Ich willigte ein und wurde heute von diesem Schiff abkommandiert.<br>/ Ich habe viel Hoffnung. ——. Geschützdonner in nächster Nähe. Nachmittag in der Stadt. Wenig gearbeitet. War den ganzen Tag über etwas müde da ich auch in der letzten Nacht sehr wenig geschlafen habe. Früh zu Bett! ——. <br>\",\"eng\":\"The day before yesterday nothing in particular happened on the watch, except that I fell to the ground once, running, and still have to limp today. Most violent cannon fire from all sides. Rifle fire, fires, etc. Last night at the fortress command because of my injury. A first lieutenant who heard that I had studied mathematics said that I should join him (in a factory). He seems <span class='underline_single'>very</span> nice. I agreed and was ordered off this ship today. <br>I have a lot of hope. ——. Sound of artillery nearby. Afternoon in the city. Worked little. Was a bit tired all day because I slept very little last night. Early to bed! ——.<br>\",\"date\":\"1914-12-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,37v[2]\",\"ger\":\"Morgen oder übermorgen gehe ich von hier weg. Wo ich wohnen werde ist noch nicht bestimmt. In keinem Fall will ich von solchen Sachen abhängen. Nicht viel gearbeitet; doch stehe ich nicht still. Denke viel an den <span class='underline_single'>lieben</span> David! Gott behüte ihn! und mich! ——.<br>\",\"eng\":\"I'm leaving here tomorrow or the day after. Where I will live is not yet settled. In no case do I want to be dependent on such things. Didn’t work much; but I'm not at a standstill. Think much of <span class='underline_single'>dear</span> David! God protect him! And me! ——.<br>\",\"date\":\"1914-12-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,38v[1]\",\"ger\":\"Nachts feuerten die Kanonen ganz in der Nähe daß das Schiff zitterte. Viel gearbeitet & mit Erfolg. Noch nicht erfahren wann ich von dem Schiff wegkomme. Morgen hat dieses Schiff wieder Feldwache & wenn ich nicht morgen abberufen werde so werde ich mitgehen müssen was mir sehr unangenehm ist weil mein Bein noch immer nicht von dem Sturz geheilt ist. Es regnet & die Lehmwege hier sind furchtbar schlecht zu gehen. Der Geist beschütze mich! ——.<br>\",\"eng\":\"At night the cannons fired so close that the ship shook. Worked a lot and with success. Still don’t know when I'm getting off the ship. This ship has to patrol again tomorrow, and if I am not dismissed by then I will have to go along, which is very bothersome because my leg has still not recovered from the fall. It is raining and the dirt roads here are terribly difficult to walk. The spirit protect me! ——.<br>\",\"date\":\"1914-12-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,38v[2] et 39v[1]\",\"ger\":\"Mein Bein schlechter geworden. Werde wohl nicht mit auf Wache / gehen. Meine Übersiedelung betreffend ist noch kein Befehl gekommen. Starker Donner in der Nähe. ——. Erfahre soeben daß ich morgen von hier abgehen werde. Kann meines Fußes wegen nicht auf Wache gehen. Nicht viel gearbeitet. Mit unserem Kommandanten gesprochen, er war <span class='underline_single'>sehr</span> nett. Bin müde. Alles in Gottes Hand. ——. <br>\",\"eng\":\"My leg got worse. Probably won't go on patrol. No order has come yet regarding my relocation. Heavy bombardment nearby. ——. Just found out that I'm leaving here tomorrow. Can't go on patrol because of my foot. Not worked much. Spoke to our commander, he was <span class='underline_single'>very</span> nice. Am tired. All in God's hands. ——.<br>\",\"date\":\"1914-12-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,39v[2] et 40v[1] et 41v[1]\",\"ger\":\"Vormittag bei der „Marodenvisite” wegen meines Fußes: Muskelzerrung. Nicht viel gearbeitet. Nietzsche Band 8 gekauft & darin gelesen. Bin stark berührt von seiner Feindschaft  / gegen das Christentum. Denn auch in seinen Schriften ist etwas Wahrheit enthalten. Gewiß, das Christentum ist der einzige <span class='underline_single'>sichere</span> Weg zum Glück; aber wie wenn einer dies Glück verschmähte?! Könnte es nicht besser sein, unglücklich, im hoffnungslosen Kampf gegen die äußere Welt zu Grunde zu gehen? Aber ein solches Leben ist sinnlos. Aber warum nicht ein sinnloses Leben führen? Ist es unwürdig? – Wie verträgt es sich mit dem streng solipsistischen Standpunkt? Was muß ich aber tun daß mein Leben / mir nicht verloren geht? Ich muß mir seiner immer — des Geistes immer — bewußt sein. ——.<br>\",\"eng\":\"In the morning at the “clinic for the sick” because of my foot: muscle strain. Didn’t work much. Bought Nietzsche Volume 8 and read in it. Am very affected by his hostility to Christianity. Because there is also some truth in his writings. Of course, Christianity is the only <span class='underline_single'>sure</span> way to happiness; but what if someone despised this happiness? Couldn't it be better to perish, unhappy, in a hopeless struggle with the external world? But such a life is senseless. But why not lead a senseless life? Is it unworthy? — How is it compatible with the strictly solipsistic position? But what must I do so that my life shall not be lost to me? I must be conscious of it — of the spirit —  always. ——.<br>\",\"date\":\"1914-12-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,41v[2]\",\"ger\":\"Vormittag am Korpskommando & meinen Verpflegszettel geholt. Nicht gearbeitet. Sehr viel erlebt aber zu müde es einzutragen. ——. <br>\",\"eng\":\"Picked up my ration card at Corps Command in the morning. Didn’t work. Went through a great deal but too tired to record it. ——.<br>\",\"date\":\"1914-12-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,41v[3] et 42v[1] et 43v[1]\",\"ger\":\"Gestern nachmittag in die Kanzelei zu meinem neuen Chef mußte lange auf ihn warten. Endlich kam er & gab mir sofort eine Arbeit ich mußte eine Liste von Motorwägen in einer Kaserne hier zusammenstellen. Zugleich lud er mich für  / 8 Uhr abends zu sich in die Wohnung ein: ein Hauptmann sei dort dem er von mir erzählt habe & der mich sehen möchte. Kam zu ihm & fand 4 Offiziere bei ihm mit denen ich nachtmahlte. Der Hauptmann ist ein unendlich sympathischer Mann (auch alle anderen waren riesig liebenswürdig). Wir sprachen bis 10½ & schieden ungemein herzlich. —— Heute früh Wohnung gesucht & gefunden. Von 10 bis abends 5 im Bureau, dann meine Sachen vom Schiff hierher in die neue Wohnung getragen: ein ganz nettes nicht kleines Zimmer.<br>/ Seit 4 Monaten zum ersten Mal allein in einem wirklichen Zimmer!! Ich <span class='underline_single'>genieße</span> diesen Luxus: Nicht zum Arbeiten gekommen. Aber es wird jetzt schon werden. Bin sehr müde da ich <span class='underline_single'>sehr</span> viel herum gerannt bin. Welche Gnade wieder in einem Bett schlafen zu dürfen! Welche Gnade der Tatsache. ——. ——. <br>\",\"eng\":\"\\nHad to wait a long time for my new commander at his office yesterday afternoon. Finally he came and immediately gave me a job: I had to draw up a list of motor vehicles in a barracks here. At the same time he invited me to his apartment for 8 o'clock in the evening: a captain will be there whom he had told about me and who would like to meet me. Went to his apartment and found 4 officers there with whom I had dinner. The captain is an extremely likeable man (all the others were also extremely friendly). We talked till 10:30 and parted tremendously cordially. —— Looked for and found an apartment early this morning. In the office from 10 to 5 in the evening, then carried my things from the ship to the new place: a very nice room, not small.<br>Alone in a proper room for the first time in 4 months!! I <span class='underline_single'>relish</span> that luxury. Didn't get around to work. But it’ll be soon now. Am very tired because I ran around a <span class='underline_single'>great</span> deal. What a blessing to be allowed to sleep in a bed again! What a blessing, in fact. ——. ——.<br>\",\"date\":\"1914-12-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,43v[2]\",\"ger\":\"Vormittag in der Kanzelei & geschrieben. Nicht zum Arbeiten gekommen. Ganzen Tag Kanzlei. Oberleutnant außerordentlich lieb. Nicht zum Arbeiten gekommen. <br>\",\"eng\":\"At the office and wrote in the morning. Didn't get to work. All day at the office. Lieutenant extraordinarily kind. Didn't get to work.<br>\",\"date\":\"1914-12-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,43v[3] et 44v[1]\",\"ger\":\"Ein wenig gearbeitet. War den ganzen Tag in der Kanzlei hatte aber / nicht viel zu tun. Hoffe morgen mehr zu arbeiten. Gebadet. ——.<br>\",\"eng\":\"Worked a little. Was in the office all day but didn't have much to do. Hope to work more tomorrow. Bathed. ——.<br>\",\"date\":\"1914-12-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,44v[2]\",\"ger\":\"Ganzen Tag Kanzelei. <span class='underline_single'>Meine Gedanken sind</span> <span class='underline_double'>lahm</span>. Ich habe Muskelschmerzen im Bein & es ist als ob auch mein Gehirn <span class='underline_single'>hinkte</span>. Doch etwas gearbeitet. Noch immer keine Antwort von David! Ob er meinen Brief erhalten hat? Ob er den Krieg persönlicher auffaßt als ich?! —— Lebe nur der Geist! Er ist der sichere Hafen geschützt abseits vom trostlosen unendlichen grauen Meer des Geschehens. ——. <br>\",\"eng\":\"All day at the office. <span class='underline_single'>My thoughts are</span> <span class='underline_double'>lame</span>. I have muscle pain in my leg and it's as though my brain is <span class='underline_single'>limping</span> too. However, got some work done. Still no answer from David! Did he receive my letter? Does he take the war more personally than I do?! —— Live only in the spirit! It is a sheltered safe harbor, protected, away from the desolate endless gray sea of events. ——.<br>\",\"date\":\"1914-12-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,44v[3] et 45v[1]\",\"ger\":\"Ganzen Tag Kanzlei. Nicht gearbeitet. Es wird aber schon / wieder werden! Liebe Sendung von der Jolles. ——.<br>\",\"eng\":\"All day at the office. Didn’t work. But it will happen again soon! Nice message from the Jolles. ——.<br>\",\"date\":\"1914-12-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,45v[2]\",\"ger\":\"Ganzen Tag Kanzlei. Etwas gearbeitet. Aber meine Gedanken sind so wie in der Eisenbahn oder auf dem Schiff wo man auch in der selben Weise schwerfällig denkt.<br>\",\"eng\":\"All day at the office. Worked a bit. But my thoughts are like those in a train or on a ship, where one also thinks in the same clumsy way.<br>\",\"date\":\"1914-12-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,45v[3]\",\"ger\":\"Ganzen Tag Kanzelei. Hörte daß wir wahrscheinlich bald nach Lodz übersiedeln! Etwas gearbeitet aber ohne wirklichen Animo.<br>\",\"eng\":\"All day at the office. Heard that we might move to Lodz soon! Did some work but without real brio.<br>\",\"date\":\"1914-12-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,45v[4]\",\"ger\":\"Ganzen Tag Kanzlei. Nicht gearbeitet. Mich viel geärgert. —— Sehr wenig freie Zeit. ——. <br>\",\"eng\":\"All day at the office. Didn’t work. Annoyed me a lot. - Very little free time. ——.<br>\",\"date\":\"1914-12-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,46v[1]\",\"ger\":\"Wie gewöhnlich. Nicht gearbeitet.<br>\",\"eng\":\"As usual. Didn’t work.<br>\",\"date\":\"1914-12-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,46v[2]\",\"ger\":\"Ein wenig gearbeitet. ——.<br>\",\"eng\":\"\",\"date\":\"1914-12-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,46v[3]\",\"ger\":\"Ein wenig gearbeitet. Bis fast 5 in der Kanzlei dann in die Stadt. Das angenehme Gefühl eines kleinen kalten Laufens den Rücken hinunter wenn man sich bei guter Stimmung seiner Einsamkeit bewußt wird. ——.<br>\",\"eng\":\"Worked a little. Until almost 5 at the office then in to the city. The pleasant feeling of a little chill running down your back if you become conscious of your solitude in a good mood//become conscious in your solitude of being in a good mood//. ——.<br>\",\"date\":\"1914-12-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,46v[4]\",\"ger\":\"Brief von David!! Ich habe ihn geküßt. Antwortete gleich. Ein wenig gearbeitet. ——.<br>\",\"eng\":\"\",\"date\":\"1914-12-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,46v[5] et 47v[1]\",\"ger\":\"Nicht gearbeitet. Bis 6 Kanzlei. ——.<br>Ganz wenig gearbeitet. Abends / gebadet. ——.<br>\",\"eng\":\"Didn’t work. Till 6 at the office. ——.<br>Worked very little.  Bathed in the evening. ——.<br>\",\"date\":\"1914-12-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,47v[2]\",\"ger\":\"Wurde heute zu meiner größten Überraschung zum Militärbeamten — ohne Sterne — befördert. ——Nicht gearbeitet. ——.<br>\",\"eng\":\"To my great surprise, I was promoted to military  official — without stars — today. —— Didn’t work. ——.<br>\",\"date\":\"1914-12-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,47v[3]\",\"ger\":\"In der Offiziersmesse zu Mittag gegessen. Etwas gearbeitet.<br>\",\"eng\":\"Ate lunch in the officers' mess. Worked a bit.<br>\",\"date\":\"1914-12-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,47v[4]\",\"ger\":\"Fast nicht gearbeitet. Lernte nachmittag einen jungen Menschen kennen der in Lemberg Hochschüler war & jetzt hier Chauffeur ist. Abends mit ihm im Kaffeehaus & mich gut unterhalten. ——.<br>\",\"eng\":\"Did almost no work. In the afternoon met a young man who was a student in Lviv and is now a chauffeur here. In the evening with him in a coffee house and had a good time. ——.<br>\",\"date\":\"1914-12-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,47v[5]\",\"ger\":\"Bis 9½ p.m. Kanzlei. Nicht gearbeitet. Bin zum Adjutanten des Oberleutnant Gürth ernannt. ————.<br>\",\"eng\":\"Till 9:30 p.m. at the office. Didn’t work. I have been appointed Adjutant to Lieutenant Gürth. ————.<br>\",\"date\":\"1914-12-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,48v[1]\",\"ger\":\"Bis 10 p.m. Kanzlei. Nicht gearbeitet. <span class='underline_double'>Sehr</span> <span class='underline_single'>viel zu tun</span>. ——.<br>\",\"eng\":\"Till 10 p.m. at the office. Didn’t work. <span class='underline_double'>Great</span> <span class='underline_single'>deal to do</span>. ——.<br>\",\"date\":\"1914-12-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,48v[2]\",\"ger\":\"Ein klein wenig gearbeitet. Sonst viel zu tun. Abends Bad.<br>\",\"eng\":\"Worked a little bit.  Otherwise, a lot to do.  Evening bath.<br>\",\"date\":\"1914-12-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,48v[3]\",\"ger\":\"Nicht gearbeitet. Nur sich nicht verlieren. ————. <br>\",\"eng\":\"\",\"date\":\"1914-12-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,48v[4] et 49v[1]\",\"ger\":\"Vorgestern nachmittag erfuhr ich plötzlich daß ich mit meinem Kommandanten gleich nach Wien fahren solle. Gestern früh kamen wir hier in Wien an. Begreiflich höchste Überraschung & Freude der Mama. etc. Gestern nichts gearbeitet sondern lediglich mich meiner Familie gewidmet. <br>/ Heute vormittag Besorgungen. Jetzt zu Mittag erwarte ich Gürth mit dem ich Dienstliches zu erledigen habe. Notieren will ich mir daß mein moralischer Stand jetzt viel tiefer ist als etwa zu Ostern. <br>\",\"eng\":\"In the afternoon, the day before yesterday, I suddenly learned that I would be going to Vienna with my commanding officer. We arrived here in Vienna yesterday morning. Understandably, Mama greatly surprised and delighted, etc. Didn’t work yesterday, but devoted myself to my family.<br>Errands this morning. Now at noon I am waiting for Gürth with whom I have to take care of official business. I want to note that my moral state is now much lower than it was around Easter.<br>\",\"date\":\"1915-01-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,49v[2]\",\"ger\":\"Gestern nachmittag mit Gürth in Klosterneuburg. Dann mit Mama zuhause.<br>\",\"eng\":\"Yesterday afternoon with Gürth in Klosterneuburg. Then at home with Mama.<br>\",\"date\":\"1915-01-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,49v[3]\",\"ger\":\"Wien. Morgen Rückfahrt. Vorvorgestern & vorgestern bei Labor. Gestern mit Gürth in Wienerneustadt am Rückweg in Mödling mit einem Hauptmann Roth gespeist der mir unendlich unsympathisch war. Fuhr deshalb gleich nach Tisch allein mit der Bahn nach Wien.<br>\",\"eng\":\"Vienna. Return tomorrow. The day before yesterday and the day before that at Labor’s. Yesterday ate with Gürth in Wienerneustadt on the way back from Mödling, with a Captain Roth who was extremely uncongenial to me. So right after the meal I took the train back to Vienna alone.<br>\",\"date\":\"1915-01-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,50v[1]\",\"ger\":\"Heute spät abends in Krakau angekommen. Bin müde! <br>Hatte viele sehr gemütliche Stunden mit Gürth. Bin auf mein zukünftiges Leben sehr neugierig. ——. <br>\",\"eng\":\"Arrived in Krakow late this evening. Am tired!<br>Spent many very pleasant hours with Gürth. Am very curious about my future life. ——.<br>\",\"date\":\"1915-01-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,50v[2]\",\"ger\":\"Karte von Frege erhalten! Ein wenig gearbeitet.<br>\",\"eng\":\"Got a card from Frege! Worked a little.<br>\",\"date\":\"1915-01-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,50v[3]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,50v[4] et 51v[1]\",\"ger\":\"Etwas gearbeitet. Arbeite noch nicht mit großem Animo. Meine Gedanken sind müde. Ich sehe die Sachen nicht frisch sondern alltäglich, ohne Leben. Es ist als ob eine Flamme erloschen wäre & ich muß warten  / bis sie von selbst wieder zu brennen anfängt. Mein Geist aber ist rege: Ich denke … ——. <br>\",\"eng\":\"Worked a bit. Don't work with great brio yet. My thoughts are tired. I don't see things afresh, but in a habitual, lifeless way. It is as if a flame has gone out and I have to wait until it starts to burn by itself again. But my spirit is active: I am thinking… ——.<br>\",\"date\":\"1915-01-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,51v[2]\",\"ger\":\"Ein wenig gearbeitet; noch nicht gut. Denke sehr oft an David. Und lange nach einem Brief von ihm.<br>\",\"eng\":\"Worked a little; still not well. Think about David very often. And long for a letter from him.<br>\",\"date\":\"1915-01-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,51v[3]\",\"ger\":\"Etwas gearbeitet; mit größerem Animo. Abends gebadet.<br>\",\"eng\":\"Worked a bit; with greater brio. Bathed in the evening.<br>\",\"date\":\"1915-01-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,51v[4]\",\"ger\":\"Mehr gearbeitet & mit Animo. Habe jetzt sehr wenig fürs Detachement zu tun was mir sehr angenehm ist. Noch keine Nachricht von David. In den letzten Wochen sinnlicher. ——————. <br>\",\"eng\":\"Worked more and with brio. Now I have very little to do for the detachment, which is very pleasant for me. Still no news from David. More sensual in recent weeks. ——————.<br>\",\"date\":\"1915-01-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,52v[1]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,52v[2]\",\"ger\":\"Fast nichts gearbeitet. Fühlte mich ganz matt & ohne jedes Animo. Es wird aber wohl anders werden. ——. ————. <br>\",\"eng\":\"Did almost no work. Felt completely weak and without any brio. But probably things will change. ——. ————. <br>\",\"date\":\"1915-01-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,52v[3]\",\"ger\":\"Sehr wenig gearbeitet. In dieser Beziehung ganz tot. Nur sich zu nichts zwingen!!! Wann werde ich eine Nachricht von David erhalten?! ——. <br>\",\"eng\":\"Worked very little. Quite dead in that respect. Just don't force yourself!!! When will I get some news from David?! ——.<br>\",\"date\":\"1915-01-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,52v[4]\",\"ger\":\"Nichts gearbeitet; aber diese Ruhe ist wie der erquickende Schlaf.<br>\",\"eng\":\"Didn’t work; but this rest is like a refreshing sleep.<br>\",\"date\":\"1915-01-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,52v[5] et 53v[1]\",\"ger\":\"Etwas gearbeitet. Brief an David abgeschickt. Ging mit ihm direkt zum Zensor an der hiesigen / Hauptpost der ein sehr netter Mensch ist.<br>\",\"eng\":\"Worked a bit. Sent letter to David. Took it directly to the censor at the local general post office who is a very nice person.<br>\",\"date\":\"1915-01-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,53v[2]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,53v[3]\",\"ger\":\"Etwas gearbeitet. Komme jetzt durch meine unausgesprochene Stellung in Schwierigkeiten. Nur sich selbst besitzen! ——.<br>\",\"eng\":\"Worked a bit. Getting in trouble now due to my unspoken position. Just be self-possessed! ——.<br>\",\"date\":\"1915-01-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,53v[4]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,53v[5] et 54v[1]\",\"ger\":\"Brief von Keynes! Nicht sehr lieb. In den letzten Tagen sehr sinnlich. —— Ohne Erfolg gearbeitet. Ich bin ganz im Dunkeln darüber wie meine Arbeit weiter gehen wird. <span class='underline_single'>Nur</span> durch Wunder kann sie gelingen. Nur dadurch / indem <span class='underline_double'>von außerhalb mir</span> der Schleier von meinen Augen weggenommen wird. Ich muß mich <span class='underline_single'>ganz</span> in mein Schicksal ergeben. Wie es über mich verhängt ist so wird es werden. Ich lebe in der Hand des Schicksals. (Nur nicht klein werden.) Und so kann ich nicht klein werden. ——.<br>\",\"eng\":\"Letter from Keynes! Not very nice. Very sensual in the last few days. —— Worked without success. I am completely in the dark about how my work will go on. It can <span class='underline_single'>only</span> succeed by a miracle. Only <span class='underline_double'>from outside myself</span>, in the veil’s being taken away from my eyes. I must surrender myself <span class='underline_single'>completely</span> to my fate. As it is imposed on me, so will it be. I live in the hand of fate. (Just don't become petty.) So I can't become petty. ——.<br>\",\"date\":\"1915-01-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,54v[2\",\"ger\":\"Liebe Karte von Arne erhalten. Etwas — aber erfolglos — gearbeitet.<br>\",\"eng\":\"Got a nice card from Arne. Worked a bit, but unsuccessfully.<br>\",\"date\":\"1915-01-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,54v[3] et 55v[1]\",\"ger\":\"Nicht gearbeitet. Abends mit vielen Offizieren im Kaffee. Die meisten benahmen sich wie Schweine. Selbst ich trank ein ganz klein / wenig mehr als nötig.<br>\",\"eng\":\"Didn’t work. In the evening with many officers in the café. Most behaved like pigs. Even I drank a tiny bit more than necessary.<br>\",\"date\":\"1915-01-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,55v[2]\",\"ger\":\"Nicht gearbeitet was mir sehr gesund ist — nämlich der Arbeit. Sehr sinnlich was merkwürdig ist weil ich jetzt nicht wenig Bewegung mache. Schlafe nicht gut.<br>\",\"eng\":\"Didn’t work which is very healthy for me - namely work. Very sensual which is strange because I’m doing quite a bit of exercise now. Not sleeping well.<br>\",\"date\":\"1915-01-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,55v[3]\",\"ger\":\"Fast nicht gearbeitet.<br>\",\"eng\":\"\",\"date\":\"1915-01-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,55v[4]\",\"ger\":\"Nicht gearbeitet. Habe mich viel über meine äußere Stellung aufregen müssen & werde in dieser Sache wahrscheinlich bald einen entscheidenden Schritt tun. ——————. <br>\",\"eng\":\"Didn’t work. Have been very upset about my external position and will probably take a decisive step in this business soon. ——————.<br>\",\"date\":\"1915-01-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,55v[5]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-01-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,56v[1]\",\"ger\":\"Nicht gearbeitet. Zu Mittag in der Offiziersmesse des Hauptmannes Scholz wo es sehr gemütlich war. ——.<br>\",\"eng\":\"Didn’t work. In Captain Scholz’s officers' mess at noon, which was very pleasant. ——.<br>\",\"date\":\"1915-02-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,56v[2]\",\"ger\":\"Ein klein wenig gearbeitet. ——.<br>\",\"eng\":\"\",\"date\":\"1915-02-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,56v[3]\",\"ger\":\"Nicht gearbeitet. Keine Ideen. Soll jetzt die Aufsicht über unsere Schmiede übernehmen. Wie wird das gehen? Möge der Geist mir beistehen! Es wird sehr schwierig werden aber: nur Mut! ——. ————.<br>\",\"eng\":\"Didn’t work. No ideas. Supposed to take over the supervision of our forge now. How will that work? May the spirit help me! It will be very difficult. However: courage! ——. ————.<br>\",\"date\":\"1915-02-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,56v[4]\",\"ger\":\"Nicht gearbeitet. Bin jetzt viel in der Schmiede.: ——.<br>\",\"eng\":\"Didn’t work. I'm in the forge a lot now. ——.<br>\",\"date\":\"1915-02-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,57v[1]\",\"ger\":\"Lieben Brief von David (vom 14.1.)<br>\",\"eng\":\"\",\"date\":\"1915-02-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,57v[2]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-02-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,57v[3]\",\"ger\":\"Von Ficker ein nachgelassenes Werk Trakls erhalten. Wahrscheinlich sehr gut. —— Sinnlich. Habe jetzt gar keine Handhabe für meine Arbeit. —— ————. <br>\",\"eng\":\"Received a posthumous work of Trakl’s from Ficker. Probably very good. —— Sensual. Have hardly any grip on my work now. —— ————.<br>\",\"date\":\"1915-02-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,57v[4]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-02-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,57v[5] et 58v[1]\",\"ger\":\"Nicht gearbeitet. Netten Brief von Ficker. Widmung von Rilke. Könnte ich nur schon wieder / arbeiten!!! Alles andere würde sich finden. Wann wird mir wieder etwas einfallen??! Alles das liegt in Gottes Hand. Wünsche nur und hoffe! Dann verlierst du keine Zeit. —— ————.<br>\",\"eng\":\"Didn’t work. Nice letter from Ficker. Dedication by Rilke. If only I could only work again!!! Everything else would turn out all right. When will I think of something again?? All of that is in God's hands. Just wish and hope! Then you won't waste any time. —— ————.<br>\",\"date\":\"1915-02-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,58v[2]\",\"ger\":\"Nicht gearbeitet. —— Stehe jetzt mit einem der Offiziere – dem Kadetten Adam – auf sehr gespannten Fuße. Es ist möglich daß es zwischen uns zu einem Duell kommt. Lebe deswegen immer noch gut & nach deinem Gewissen. Der Geist sei mit mir! Jetzt und in jeder Zukunft! ————.<br>\",\"eng\":\"Didn’t work. —— Now on a very tense footing with Cadet Adam, one of the officers. It is possible that there will be a duel between us. So, keep on living well and follow your conscience. The spirit be with me! Now and whatever the future may bring! ————.<br>\",\"date\":\"1915-02-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,58v[3] et 59v[1]\",\"ger\":\"Nicht gearbeitet. Der Geist sei mit / mir. ————.<br>\",\"eng\":\"Didn’t work. The spirit be with me. ————.<br>\",\"date\":\"1915-02-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,59v[2]\",\"ger\":\"Gestern etwas gearbeitet. Es vergeht ja jetzt kein Tag an dem ich nicht einmal wenn auch nur flüchtig an die Logik denke & dies ist ein gutes Zeichen. Ich ahne alles Mögliche! – Gestern abend bei Hauptmann Scholz wo musiziert wurde (bis 12 p.m.). Sehr gemütlich. <br>\",\"eng\":\"Worked a bit yesterday. Not a day goes by now that I don't think about logic, even if only briefly, and this is a good sign. I think anything’s possible! – Yesterday evening at Captain Scholz’s, where there was music (until 12 p.m.) Very pleasant.<br>\",\"date\":\"1915-02-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,59v[3] et 60v[1]\",\"ger\":\"Gestern & heute etwas gearbeitet. Meine Stellung im Detachement ist jetzt durchaus unbefriedigend, es wird etwas geschehen müssen. —— Ich muß mich viel ärgern & kränken und meine innere Kraft vergeuden. Bin wieder sehr sinnlich & onaniere  / fast jeden Tag: So geht es nicht weiter. ——<br>\",\"eng\":\"Worked a bit today and yesterday. My position in the detachment is now thoroughly unsatisfactory, something will have to be done. —— I can’t help getting annoyed and offended a lot and wasting my internal strength. I'm very sensual again and masturbate almost every day: it can't go on like this. ——<br>\",\"date\":\"1915-02-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,60v[2]\",\"ger\":\"Fast nicht gearbeitet. Viel über meine Lage nachgedacht. Ich bin auf meine Zukunft in jeder Hinsicht neugierig. ——.<br>\",\"eng\":\"Did almost no work. Thought a lot about my situation. I wonder about my future from every point of view. ——.<br>\",\"date\":\"1915-02-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,60v[3]\",\"ger\":\"Neuerliche Unannehmlichkeiten in der Fabrik. Langes Gespräch mit meinem Kommandanten das aber zu nichts Rechtem geführt hat. Fast nicht gearbeitet. Diese Unannehmlichkeiten stören mich im Denken. Das muß anders werden. ——. ——.<br>\",\"eng\":\"Renewed trouble in the factory. Long conversation with my commander but that didn't lead to anything positive. Did almost no work. These troubles disturb my thinking. That must change. ——. ——.<br>\",\"date\":\"1915-02-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,60v[4] et 61v[1]\",\"ger\":\"Feiger Gedanken bängliches / Schwanken, ängstliches Zagen, weibliches Klagen, wendet kein Elend, <span class='underline_single'>macht dich nicht frei!</span><span class='underline_single'></span> Nicht gearbeitet. Viel gedacht. ————.<br>\",\"eng\":\"Cowardly thinking, fearful wavering, anxious hesitating, effeminate complaining, remedy no misery, <span class='underline_single'>won’t set you free!</span> Didn’t work. Thought a lot. ————.<br>\",\"date\":\"1915-02-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,61v[2]\",\"ger\":\"Nicht gearbeitet. Besserer Stimmung. Sinnlich. Könnte ich nur schon wieder arbeiten!!!! ——! ——.<br>\",\"eng\":\"Didn’t work. Better mood. Sensual. If only I could work again!!!! ——! ——.<br>\",\"date\":\"1915-02-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,61v[3]\",\"ger\":\"Nicht gearbeitet. Heute nacht riesig viel und lebhaft aber nicht schlecht geträumt. Viel Unannehmlichkeiten mit der Mannschaft. Ärger & Aufregung; Selbstvorwürfe etc. etc. ——. ————.<br>\",\"eng\":\"Didn’t work. Very many vivid dreams last night, but not bad ones. A lot of trouble with the crew. Annoyance and agitation; self-reproach etc. etc. ——. ————.<br>\",\"date\":\"1915-02-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,61v[4] et 62v[1]\",\"ger\":\"Nicht gearbeitet. Meine Schwierigkeiten / noch immer nicht geregelt. ————. <br>\",\"eng\":\"Didn’t work. My difficulties are still not resolved. ————.<br>\",\"date\":\"1915-02-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,62v[2]\",\"ger\":\"Nicht gearbeitet! Werde ich je wieder arbeiten?!? Trüber Stimmung. Keine Nachricht von David. Bin ganz verlassen. Denke an Selbstmord. Werde ich je wieder arbeiten??! —— ————.<br>\",\"eng\":\"Didn’t work! Will I ever work again?!? Gloomy mood. No news from David. Am utterly lonely. Think of suicide. Will I ever work again??! —— ————.<br>\",\"date\":\"1915-02-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,62v[3] et 63v[1]\",\"ger\":\"Nicht gearbeitet. Trübe Stimmung. Sehr sinnlich. Fühle mich vereinsamt. Das Ziel meiner Arbeit scheint mir mehr denn je in unabsehbare Ferne gerückt! Der siegesgewisse und kühn hoffende Mut fehlt mir. Es ist mir als sollte ich nie mehr eine große / Entdeckung machen. Schon lang war ich nicht so von allen guten Geistern verlassen wie jetzt. Verliere nur nicht dich selbst!! ——. ——.<br>\",\"eng\":\"Didn’t work. Gloomy mood. Very sensual. Feel very isolated. The goal of my work seems to me more than ever to have receded into an indeterminable distance! I lack the courage to be sure of victory and hope boldly. It seems to me as if I shall never again make a big discovery. It’s been a long time since I’ve been as forsaken by all good spirits as I am now. Just don't lose yourself!! ——. ——.<br>\",\"date\":\"1915-02-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,63v[2]\",\"ger\":\"Nicht gearbeitet. Keine Nachricht von David! Unentschiedener und wechselnder Stimmung.<br>\",\"eng\":\"Didn’t work. No news from David! Indecisive and unsettled mood.<br>\",\"date\":\"1915-03-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,63v[3]\",\"ger\":\"Nicht gearbeitet. Gestern abend einen momentanen Lichtblick. Keine Nachricht von David! — Abends gemütlich bei Scholz. Sonst im allgemeinen trüber Stimmung.<br>\",\"eng\":\"Didn’t work. A momentary glimmer of light yesterday evening. No news from David! — Pleasant evening at Scholz’s. Otherwise, a generally gloomy mood.<br>\",\"date\":\"1915-03-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,63v[4] et 64v[1]\",\"ger\":\"Nicht gearbeitet. Bin moralisch matt; sehe aber die enorme / Schwierigkeit meiner Lage ein und bisher bin ich mir noch ganz im Unklaren darüber wie sie zu korrigieren ist. ——.<br>\",\"eng\":\"Didn’t work. Am morally weak; but appreciate the enormous difficulty of my situation and so far I am still quite unsure how to correct it. ——.<br>\",\"date\":\"1915-03-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,64v[2]\",\"ger\":\"Sprach heute mit Gürth über meine unwürdige Stellung. Noch keine Entscheidung. Vielleicht gehe ich als Infanterist an die Front. = . <br>\",\"eng\":\"Talked to Gurth about my humiliating position today. No decision yet. Maybe I'll go to the front as an infantryman. = .<br>\",\"date\":\"1915-03-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,64v[3]\",\"ger\":\"= . Meine Lage ist noch immer unentschieden. Meine Stimmung stark wechselnd. ——.<br>\",\"eng\":\"= . My situation is still undecided. My mood very unsettled. ——.<br>\",\"date\":\"1915-03-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,64v[4] et 65v[1]\",\"ger\":\"= . Lage unverändert; unbehaglich. Bin mir noch ganz im Unklaren über eine geeignete Veränderung. Jetzt bricht wieder / starker Frost herein! Sehr zur Unzeit! Fühle mich nicht wohl. Bin sozusagen seelisch abgespannt, sehr abgespannt. Was dagegen zu machen ist?? Ich werde von widerlichen Umständen aufgezehrt. Das ganze äußere Leben mit seiner ganzen Gemeinheit stürmt auf mich ein. Und ich bin innerlich haßerfüllt und kann den Geist nicht in mich einlassen. Gott ist die Liebe. — Ich bin wie ein ausgebrannter Ofen voll Schlacke und Unrat. ——<br>\",\"eng\":\"=. Situation unchanged; uneasy. I'm still in the dark about an appropriate change. Heavy frost has returned again! Very much out of season! I don't feel at all well. I'm mentally weary, so to speak, very weary. On the other hand, what is to be done about it?? I am exhausted by loathesome circumstances. The whole of outer life, with all its viciousness, assaults me. And I’m filled with hatred inside and can’t let the spirit in me. God is love. — I'm like a burned-out furnace full of slag and garbage. ——<br>\",\"date\":\"1915-03-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,65v[2] et 66v[1]\",\"ger\":\"Lage unentschieden! Unverändert! <br>Situation undecided! Unchanged!<br>\",\"eng\":\"\",\"date\":\"1915-03-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,66v[2]\",\"ger\":\"Lage unentschieden! = . Stimmung wachsam aber schlecht. ——\\n————.<br>Situation undecided! = . Mood: vigilant but poor. ——\\n————.<br>\",\"eng\":\"\",\"date\":\"1915-03-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,66v[3]\",\"ger\":\"<span class='underline_double'>Sehr</span> sinnlich. Unentschlossen. Ruhelos im Geist. ＝ . \\n——.<br><span class='underline_double'>Very</span> sensual. Irresolute. Restless in spirit. ＝ . \\n——.<br>\",\"eng\":\"\",\"date\":\"1915-03-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,66v[4]\",\"ger\":\"Nicht gearbeitet. Lage unverändert! Nichts als Unannehmlichkeiten. ——. ————.<br>\",\"eng\":\"Didn’t work. Situation unchanged! Nothing but trouble. ——. ————.<br>\",\"date\":\"1915-03-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,66v[5]\",\"ger\":\"Nicht gearbeitet. Viel gedacht. Lage noch unentschieden. <br>\",\"eng\":\"Didn’t work. Thought a lot. Situation still undecided.<br>\",\"date\":\"1915-03-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,67v[1]\",\"ger\":\"Lage im Gleichen. Bin ganz unschlüssig. ＝ . ——.<br>\",\"eng\":\"Same situation. Am completely indecisive. ＝ . ——.<br>\",\"date\":\"1915-03-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,67v[2]\",\"ger\":\"Nicht gearbeitet. Depression. Der Druck auf die Brust. ——. ————.<br>Didn’t work. Depression.  Chest pressure. ——. ————.<br>\",\"eng\":\"\",\"date\":\"1915-03-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,67v[3]\",\"ger\":\"Traf einen bekannten Einjährigen & besprach mit ihm meine Angelegenheit & werde morgen weiter darüber sprechen. Jetzt habe ich also meine Noten eingeholt. Und noch immer arbeite ich nicht. Werde ich je wieder arbeiten??!! —— ———— <br>\",\"eng\":\"Met a one-year volunteer that I know and discussed my concerns with him and will continue to talk about it tomorrow. So now I'm dealing with that business. And I'm still not working. Will I ever work again??!! —— ————<br>\",\"date\":\"1915-03-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,68v[1]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-03-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,68v[2]\",\"ger\":\"Gestern <span class='underline_single'>lieben</span> Brief von David! —— Bin in die Fabrik umgezogen. David geantwortet. <span class='underline_single'>Sehr</span> sinnlich. <br>\",\"eng\":\"<span class='underline_single'>Lovely</span> letter from David yesterday! —— Moved to the factory. Answered David. <span class='underline_single'>Very</span> sensual.<br>\",\"date\":\"1915-03-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,68v[3]\",\"ger\":\"Sprach heute mit Gürth über meine Zukunft. Ohne erfreuliches Resultat. <span class='underline_single'>Sehr</span> sinnlich. ——.<br>\",\"eng\":\"Talked to Gürth today about my future. Without a satisfactory result. <span class='underline_single'>Very</span> sensual. ——.<br>\",\"date\":\"1915-03-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,68v[4]\",\"ger\":\"Denke daran zu den Kaiserjägern zu gehen da auch Ficker dort ist. Nicht ganz wohl. Nicht gearbeitet. Anhaltend unwohl. ————.<br>\",\"eng\":\"Think of joining the Emperor’s Hunters as Ficker is there too. Not quite well. Didn’t work. Persistently unwell. ————.<br>\",\"date\":\"1915-03-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,68v[5]\",\"ger\":\"Unwohl. Gegen Abend besser.<br>\",\"eng\":\"\",\"date\":\"1915-03-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[1]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-03-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[2]\",\"ger\":\"——. Nicht gearbeitet! Werde ich je wieder arbeiten??!!! ——. <br>\",\"eng\":\"——. Didn’t work! Will I ever work again??!!! ——.<br>\",\"date\":\"1915-03-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[3]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-03-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[4]\",\"ger\":\"Überdrüssig! Von Gemeinheit umgeben. Wie bin ich müde! ————. ————<br>\",\"eng\":\"Weary! Surrounded by viciousness. How tired I am! ————. ————<br>\",\"date\":\"1915-03-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[5]\",\"ger\":\"Wechselnder Stimmung.<br>\",\"eng\":\"\",\"date\":\"1915-03-31\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[6]\",\"ger\":\"Wechselnder Stimmung.<br>\",\"eng\":\"\",\"date\":\"1915-04-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,69v[7] et 70v[1]\",\"ger\":\"Es fällt mir nichts Neues mehr ein! (Gürth von hier abkommandiert.)<br>/ Ich kann auf nichts mehr Neues denken. Und darauf darf es wohl auch gar nicht ankommen.<br>\",\"eng\":\"Nothing new comes to mind! (Gürth posted away from here.) <br>I can’t think of anything new. And that’s probably not what matters at all.<br>\",\"date\":\"1915-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,70v[2]\",\"ger\":\"Sehr sinnlich. Onaniere jeden Tag. Lange schon keine Nachricht von David. Ich arbeite. —— —— <br>\",\"eng\":\"Very sensual. Masturbate every day. No news from David for a long time. I am working. —— ——<br>\",\"date\":\"1915-04-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,70v[3]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-04-17\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,70v[4]\",\"ger\":\"\",\"eng\":\"Got a bad cold today!<br>\",\"date\":\"1915-04-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,70v[5]\",\"ger\":\"Soll jetzt die Oberaufsicht über die ganze Werkstätte kriegen. Neuerliche Unannehmlichkeiten.<br>\",\"eng\":\"Will now be supervisor of the whole workshop. Further trouble.<br>\",\"date\":\"1915-04-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,70v[6]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-04-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[1]\",\"ger\":\"Arbeite. Sonst meine Tätigkeit sehr unzufriedenstellend.<br>\",\"eng\":\"Work. Apart from that, my employment is very unsatisfying.<br>\",\"date\":\"1915-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[2]\",\"ger\":\"Arbeite! In der Fabrik muß ich jetzt meine Zeit verplempern!!! ——<br>\",\"eng\":\"Work! Now I have to waste my time at the factory!!! ——<br>\",\"date\":\"1915-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[3]\",\"ger\":\"<span class='underline_single'>Arbeite wieder!</span> —— .<br><span class='underline_single'>Work </span><span class='underline_single'>again</span><span class='underline_single'>!</span> —— .<br>\",\"eng\":\"\",\"date\":\"1915-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[4]\",\"ger\":\"Arbeite. Sonst geht's mir schlecht. Laß dich nur nicht von den gemeinen Menschen bearbeiten. <br>\",\"eng\":\"Work. Otherwise things go badly for me. Just don't let common people get to you.<br>\",\"date\":\"1915-04-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[5]\",\"ger\":\"Lieben Brief von David!<br>\",\"eng\":\"\",\"date\":\"1915-04-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,71v[6]\",\"ger\":\"Die Gnade der Arbeit! ——<br>\",\"eng\":\"The blessing of work! ——<br>\",\"date\":\"1915-05-01\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,72v[1]\",\"ger\":\"Noch immer nicht ernannt! Immer wieder wegen meiner unklaren Stellung Unanehmlichkeiten. Wenn das noch lange so geht werde ich von hier wegzukommen trachten.<br>\",\"eng\":\"Still not appointed! Troubles because of my unclear position, again and again. If it goes on like this for much longer, I’ll try to get away from here.<br>\",\"date\":\"1915-05-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,72v[2]\",\"ger\":\"<span class='underline_double'>Viel</span> Aufregung! War nahe am <span class='underline_double'>Weinen</span>!!!! Fühle mich wie gebrochen und krank! Von Gemeinheit umgeben.<br>\",\"eng\":\"<span class='underline_double'>Much</span> agitation! Was close to <span class='underline_double'>crying</span>!!!! Feel myself broken and sick! Surrounded by viciousness.<br>\",\"date\":\"1915-05-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,72v[3]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1915-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,72v[4]\",\"ger\":\"Lieben Brief von Russell!<br>\",\"eng\":\"\",\"date\":\"1915-05-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,72v[5] et 73v[1]\",\"ger\":\"Lernte heute den alten / Logiker Dziewicki kennen von dem mir Russell in seinem Brief schrieb. Ein netter alter Mann.<br>\",\"eng\":\"Today I met Dziewicki, the old logician of whom Russell wrote me in his letter. A nice old man.<br>\",\"date\":\"1915-05-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,73v[2]\",\"ger\":\"Erneuerte Schwierigkeit wegen meiner Beförderung. Werde wahrscheinlich von hier wegkommen. Vielfach <span class='underline_single'>sehr</span> niedergedrückt. Durch die Gemeinheit meiner Umgebung die mich aufs Schändlichste ausnützt. ——.<br>\",\"eng\":\"Renewed difficulty over my promotion. Will probably get away from here. Often <span class='underline_single'>very</span> weighed down. Because of the viciousness of those around me who exploit me most disgracefully. ——.<br>\",\"date\":\"1915-06-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-102,73v[3]\",\"ger\":\"Arbeite <span class='underline_single'>sehr</span> viel! Trotz <span class='underline_single'>der widerlichsten</span> Umstände!<br>\",\"eng\":\"Work a <span class='underline_single'>great</span> deal! Despite <span class='underline_single'>the most disgusting</span> circumstances!<br>\",\"date\":\"1915-06-22\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,IIIr[1]\",\"ger\":\"Ad. 4/5  Alle in die Schwarmlinien entsendeten Aufklärer haben sich immer beim Bataillonskommandanten in dessen Abschnitt sie sich befinden persönlich zu melden.<br>\",\"eng\":\"All spotters//observers// dispatched to the flight lines must always report in person to the battalion commander for their sector.<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,1v[1]\",\"ger\":\"… und müsse mir das Leben nehmen. Ich litt <span class='underline_single'>Höllenqualen</span>! Und doch war mir das Bild des Lebens so verlockend daß ich wieder leben wollte. Erst dann werde ich mich vergiften wenn ich mich vergiften will.<br>\",\"eng\":\"... and have to take my life. I suffered the <span class='underline_single'>torments of hell</span>! And yet the picture of life was so tempting that I wanted to live again. Only if I want to poison myself, only then will I poison myself.<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,1v[2]\",\"ger\":\"Viel <span class='underline_single'>Ungewohntes</span> zu tun <span class='underline_single'>gezwungen</span>. Ich brauche große Kraft das auszuhalten. Oft bin ich der Verzweiflung nahe. Ich habe schon seit mehr als einer Woche nichts mehr gearbeitet. <span class='underline_single'>Ich</span> habe <span class='underline_single'>keine Zeit</span>! Gott! Aber es ist ja natürlich, denn wenn ich tot sein werde, werde ich auch keine Zeit zum Arbeiten haben. Jetzt Inspektion. Meine Seele schrumpft zusammen. Gott erleuchte mich! Gott erleuchte mich! Gott erleuchte meine Seele. <br>\",\"eng\":\"<span class='underline_single'>Forced</span> to do many <span class='underline_single'>strange things</span>. I need great strength to bear it. I’m often close to despair. I haven't done any work in over a week. <span class='underline_single'>I</span> have <span class='underline_single'>no time</span>! God! But it's quite natural, because if I'm going to die, I won't have any time to work either. Inspection now. My soul shrivels up. God enlighten me! God enlighten me! God enlighten my soul.<br>\",\"date\":\"1916-03-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,2v[1]\",\"ger\":\"Tu Du dein Bestes! Mehr kannst du nicht tun: und sei heiter. Laß' dir an dir selbst genügen. Denn andere werden dich nicht stützen oder doch nur für kurze Zeit! (Dann wirst du diesen lästig werden). Hilf dir selbst und hilf anderen mit deiner ganzen Kraft. Und dabei sei heiter! Aber wieviel Kraft soll man für sich und wieviel für die anderen brauchen? <span class='underline_single'>Schwer</span> ist es gut zu leben!! Aber das gute Leben ist schön. „Aber nicht mein sondern dein Wille geschehe.” <br>\",\"eng\":\"Do your best. You can’t do more. And be cheerful. Let yourself be content with yourself. For others will not support you, or at most only for a short time! (Then you’ll become a burden to them). Help yourself and help others with all your strength. And be cheerful as you do so. But how much strength ought one to use for onerself and how much for others? It's <span class='underline_single'>hard</span> to live a good life!! But the good life is beautiful. \\\"Yet Thy will be done, not mine.\\\" <br>\",\"date\":\"1916-03-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,2v[2]\",\"ger\":\"War krank. Heute noch sehr schwach. Heute sagte mir mein Kommandant er wolle mich ins Hinterland abschieben lassen. Wenn das geschieht werde ich mich umbringen.<br>\",\"eng\":\"Was ill. Still very weak today. Today my commander told me that he wanted to have me posted to the rear. If that happens, I’ll kill myself.<br>\",\"date\":\"1916-04-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,3v[1]\",\"ger\":\"Tortur von der man nur zeitweise heruntergespannt wird um für weitere Qualen empfänglich zu bleiben. Ein furchtbares Sortiment von Qualen. Ein erschöpfender Marsch, eine durchhustete Nacht, eine Gesellschaft von Besoffenen, eine Gesellschaft von gemeinen und dummen Leuten. Tue Gutes und freue dich über deine Tugend. Bin krank und habe ein schlechtes Leben. Gott helfe mir. Ich bin ein armer unglücklicher Mensch. Gott erlöse mich und schenke mir den Frieden! Amen.<br>\",\"eng\":\"Life is a torture from which one is only briefly relieved so as to remain receptive to further torments. A terrible variety of torments. An exhausting march, a night of coughing, a company of drunkards, a company of vile and stupid people. Do good and rejoice in your virtue. Am sick and have a miserable life. God help me. I am a poor unhappy man. God redeem me and give me peace! Amen.<br>\",\"date\":\"1916-04-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,3v[2] et 4v[1]\",\"ger\":\"Lebe mit Mühe. Bin noch nicht erleuchtet / worden. Sah mich heute im Spiegel, ich bin <span class='underline_single'>ganz</span> eingefallen! Ich kann ja auch schon lange nicht mehr arbeiten.<br>\",\"eng\":\"Live with difficulty. Haven't been enlightened yet. Saw myself in the mirror today, I am <span class='underline_single'>completely</span> haggard! I haven't been able to work any more for a long time.<br>\",\"date\":\"1916-04-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,4v[2]\",\"ger\":\"Taumle und falle noch immer im Dunkel. Bin noch nicht zum Leben erwacht.<br>\",\"eng\":\"Still stumble and fall in the dark. Haven't been born again yet.<br>\",\"date\":\"1916-04-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,4v[3]\",\"ger\":\"In 8 Tagen gehen wir in Feuerstellung. Möchte es mir vergönnt sein mein Leben in einer schweren Aufgabe aufs Spiel zu setzen!<br>\",\"eng\":\"In 8 days we’ll go to the firing line. If only I may be allowed to risk my life in some difficult mission!<br>\",\"date\":\"1916-04-15\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,4v[4]\",\"ger\":\"Bin seit dem 22.3. <span class='underline_single'>vollkommen</span> asexuell. Die letzten 2 Tage Rasttage.<br>\",\"eng\":\"Since March 22nd <span class='underline_single'>completely</span> asexual. The last 2 days were rest days.<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,4v[5]\",\"ger\":\"Morgen oder übermorgen in die Feuerstellung. Also <span class='underline_single'>Mut!</span> Gott wird helfen.<br>\",\"eng\":\"On the firing line tomorrow or the day after. So pluck up <span class='underline_single'>courage!</span> God will help.<br>\",\"date\":\"1916-04-18\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,5v[1]\",\"ger\":\"Gott bessere mich! Dann werde ich auch froher werden. Heute wahrscheinlich schon in Feuerstellung. Gott helfe mir.<br>\",\"eng\":\"God make me better! Then I'll become happier too.  Probably already in firing line today. God help me. <br>\",\"date\":\"1916-04-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,5v[2]\",\"ger\":\"Seit ein paar Tagen in Feuerstellung. Den ganzen Tag über <span class='underline_single'>schwere</span> körperliche Arbeit außerstande zu denken. Gott helfe mir; ich habe ungeheuer viel zu leiden. Habe heute angesucht auf den Beobachtungsstand zu kommen. Beim Halbzug haßt mich alles weil mich keiner versteht. Und weil ich kein Heiliger bin! Gott helfe mir!<br>\",\"eng\":\"On the firing line for a couple of days. Unable to think due to <span class='underline_single'>hard</span> physical labor all day. God help me; I have suffered immensely. Have applied today to be moved to the observation post. Everyone in the squad hates me, because no one understands me. And because I'm no saint! God help me! <br>\",\"date\":\"1916-04-23\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,6v[1]\",\"ger\":\"Die Offiziere der Batterie können mich scheinbar sehr gut leiden. Dies erspart mir manche Unannehmlichkeit. Gott sei gedankt. Dein Wille geschehe! Geh Du deiner Wege! <span class='underline_single'>Dein</span> Wille geschehe!<br>\",\"eng\":\"The battery officers seem to have taken a liking to me. This saves me from much trouble. Thank God. Thy will be done. Thou goest thy way. <span class='underline_single'>Thy</span> will be done.<br>\",\"date\":\"1916-04-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,6v[2] et 7v[1]\",\"ger\":\"Die Mannschaft mit wenigen Ausnahmen haßt mich als Freiwilligen. So bin ich jetzt fast immer umgeben von Leuten die mich hassen. Und dies ist das Einzige womit ich mich noch nicht abfinden kann. Hier sind aber böse, herzlose Menschen. Es ist mir fast unmöglich eine Spur von Menschlichkeit in ihnen zu finden. Gott helfe mir zu leben. Hatte / heute eine Ahnung daß heute nacht Alarm sein werde. Und wirklich ist heute nacht Bereitschaft. Gott sei mit mir! Amen.<br>\",\"eng\":\"As a volunteer, the crew, with a few exceptions, hate me. So now I’m almost always surrounded by people who hate me. And this is the only thing that I  still can’t bear. But the men here are evil and heartless. It’s almost impossible for me to find a trace of humanity in them. God help me to live. Had a premonition today that there would be an alert tonight. And indeed there is stand-by duty tonight. God be with me. Amen. <br>\",\"date\":\"1916-04-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,7v[2]\",\"ger\":\"Nachts Ruhe. Schrieb an Russell. Hatte heute nacht einen schlechten Traum. Gott schütze mich.<br>\",\"eng\":\"Quiet night. Wrote to Russell. Had a bad dream last night. God protect me.<br>\",\"date\":\"1916-04-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,7v[3]\",\"ger\":\"Nachmittag bei den Aufklärern. Wurden beschossen. Dachte an Gott. <span class='underline_single'>Dein</span> Wille geschehe! Gott sei mit mir.<br>\",\"eng\":\"Afternoon with the spotters. Was shot at. Thought of God. <span class='underline_single'>Thy</span> will be done. God be with me.<br>\",\"date\":\"1916-04-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,7v[4]\",\"ger\":\"Gehe heute während eines Feuerüberfalls wieder zu den Aufklärern: <span class='underline_single'>Nur</span> Gott braucht der Mensch.<br>\",\"eng\":\"Went to the spotters again today during a surprise burst of fire. Man needs <span class='underline_single'>only</span> God. <br>\",\"date\":\"1916-04-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,7v[5] et 8v[1]\",\"ger\":\"Habe mich fortwährend gegen / die Gemeinheit der Leute zu wehren.<br>\",\"eng\":\"Have to defend myself constantly against people’s nastiness.<br>\",\"date\":\"1916-05-02\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,8v[2]\",\"ger\":\"Habe es schwer! Gott beschütze mich und stehe mir bei. Amen. Möchte der schwerste Kelch an mir vorüber gehen. Aber <span class='underline_single'>Dein</span> Wille geschehe. Die Arbeit schläft in meinem Kopfe.<br>\",\"eng\":\"It’s very hard! God protect me and stand by me. Amen. Would that the bitter cup passed me by. But <span class='underline_single'>thy</span> will be done.  The work sleeps in my head.<br>\",\"date\":\"1916-05-03\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,8v[3] et 9v[1]\",\"ger\":\"Komme morgen vielleicht auf mein Ansuchen zu den Aufklärern hinauf. Dann wird für mich erst der Krieg anfangen. Und kann sein – auch das Leben! Vielleicht bringt mir die Nähe des Todes das Licht des Lebens! Möchte Gott mich erleuchten! / Ich bin ein Wurm aber durch Gott werde ich zum Menschen. Gott stehe mir bei. Amen.<br>\",\"eng\":\"Perhaps tomorrow I will go above with the observers at my request. Only then will the war begin for me. And – perhaps – life too! Perhaps nearness to death will bring light into my life! May God enlighten me. I am a worm but through God I will become a human being. God stand by me. Amen.<br>\",\"date\":\"1916-05-04\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,9v[2]\",\"ger\":\"Bin wie der Prinz im verwünschten Schloß auf dem Aufklärerstand. Jetzt bei Tag ist alles ruhig aber in der Nacht! Da muß es <span class='underline_single'>fürchterlich</span> zugehen! Ob ich es aushalten werde???? Die heutige Nacht wird es zeigen. Gott stehe mir bei!!<br>\",\"eng\":\"Am like the prince in the enchanted castle in the observation post. Now during the day everything is quiet, but at night! It must be <span class='underline_single'>frightful</span> there! Will I endure it???? Tonight will tell. God stand by me.<br>\",\"date\":\"1916-05-05\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,9v[3] et 10v[1]\",\"ger\":\"In steter Lebensgefahr. Die Nacht verlief durch die Gnade Gottes gut. Von Zeit zu Zeit werde ich verzagt. Das ist die Schuld der falschen / Lebensauffassung!  Verstehe die Menschen! Immer wenn du sie hassen willst trachte sie statt dessen zu verstehen. Lebe im innern Frieden! Wie aber kommst du zum innern Frieden? <span class='underline_double'>Nur</span> indem ich Gottgefällig lebe! <span class='underline_single'>Nur</span> so ist es möglich, das Leben zu ertragen.<br>\",\"eng\":\"In constant mortal danger. The night went well, by the grace of God. From time to time I despaired. That is due to a false view of life!   Understand people. Whenever you feel like hating them, try to understand them instead. Live in inner peace. But how do you get to inner peace? <span class='underline_double'>Only</span> if I live in a way pleasing to God. <span class='underline_single'>Only</span> in this way is it possible to endure life. <br>\",\"date\":\"1916-05-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,10v[2]\",\"ger\":\"Nacht verlief ruhig. Gott sei Dank. Nur ich bin ein Elender.<br>\",\"eng\":\"Night passed quietly. Thank God. Only I am a wretch.<br>\",\"date\":\"1916-05-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,10v[3] et 12v[1]\",\"ger\":\"Ruhige Nacht. Gott mit mir!<br>Die Leute mit denen ich beisammen bin sind nicht so sehr gemein als <span class='underline_single'>ungeheuer</span> beschränkt! Das macht den Verkehr mit ihnen fast unmöglich, weil sie einen ewig mißverstehen. Die Leute sind nicht / dumm, aber beschränkt. Sie sind in ihrem Kreise klug genug. Aber es fehlt ihnen der Charakter und damit die Ausdehnung. „Alles versteht das rechtgläubige Herz”. Kann jetzt nicht arbeiten. <br>\",\"eng\":\"The people I’m with are not so much nasty as <span class='underline_single'>tremendously</span> limited! That makes it almost impossible to work with them, because they always misunderstand one. These people are not stupid, but limited. Within their circle, they are smart enough. But they lack character and thus breadth. \\\"The heart of a true believer understands everything\\\". Can’t work now.<br>\",\"date\":\"1916-05-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,12v[2]\",\"ger\":\"Hätte jetzt reichlich Zeit und Ruhe zum Arbeiten. Aber es rührt sich nichts. Mein Stoff ist weit von mir entfernt. Der Tod gibt dem Leben erst seine Bedeutung.<br>\",\"eng\":\"Have had plenty of time and peace to work now. But nothing is moving. My material is far away from me. Only death gives life its meaning.<br>\",\"date\":\"1916-05-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,12v[3] et 13v[1]\",\"ger\":\"Durch die Gnade Gottes geht es mir jetzt sehr gut. Arbeiten kann ich leider nicht. Aber Dein Wille geschehe! Amen. In der Gefahr wird er / mich nicht verlassen!! ——.<br>\",\"eng\":\"By the grace of God things are going very well for me now. Unfortunately I can't work. But Thy will be done! Amen. He won't forsake me in danger!! ——.<br>\",\"date\":\"1916-05-10\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,13v[2]\",\"ger\":\"Übermorgen Stellungswechsel. <span class='underline_single'>Sehr</span> unangenehm! Aber Dein Wille geschehe.<br>\",\"eng\":\"A change of post the day after tomorrow. <span class='underline_single'>Very</span> nasty! But Thy will be done.<br>\",\"date\":\"1916-05-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,13v[3] et 14v[1]\",\"ger\":\"In der dritten Stellung. Wie immer viel Mühsal. Aber auch große Gnade. Bin schwach wie immer! Kann nicht arbeiten.<br>Schlafe heute im Infanteriefeuer, werde wahrscheinlich zugrunde gehen. Gott sei mit mir! In Ewigkeit Amen! Ich bin ein schwacher Mensch aber Er hat mich bis nun erhalten. Gott sei gelobt in Ewigkeit, Amen. Ich übergebe meine Seele dem / Herrn.<br>\",\"eng\":\"In the third position. As always, much fatigue. But also great blessings. Am weak as always. Can't work.<br>Sleep during infantry fire today. Will probably perish. God be with me. In eternity, amen. I am a weak human being but He has preserved me so far. God be praised in eternity, amen. I commit my soul to the Lord.<br>\",\"date\":\"1916-05-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,14v[2]\",\"ger\":\"Gott mache aus mir einen besseren Menschen!<br>\",\"eng\":\"\",\"date\":\"1916-05-21\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,14v[3]\",\"ger\":\"\",\"eng\":\"Fired upon.  As God wills.<br>\",\"date\":\"1916-05-25\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,14v[4]\",\"ger\":\"Briefe von Mining und Mama. Heute oder morgen soll russischer Angriff sein. Nun wie Gott will. Ich bin sehr tief in die Sünde gefallen. Aber Gott wird mir vergeben.<br>\",\"eng\":\"Letters from Mining and Mama. Today or tomorrow there will be a Russian attack. As God wills then. I have fallen very deeply into sin. But God will forgive me.<br>\",\"date\":\"1916-05-27\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,14v[5] et 15v[1]\",\"ger\":\"In den letzten Wochen sehr unruhigen Schlaf. Immer träume ich vom Dienst. Träume die mich immer an die Grenze des Erwachens führen. In den letzten 2 Monaten nur 3 Mal onaniert.<br>Meine Umgebung ekelt mich gegen meinen Willen an. Nicht wie Menschen sondern wie Fratzen erscheinen sie mir oft. Gemeines Gesindel. Ich hasse sie <span class='underline_single'>nicht</span> aber sie ekeln mich an. Heute strenge Bereitschaft. Mein Kommandant ist sehr liebenswürdig mit mir. Denke an das Ziel des Lebens. Das ist noch das Beste was du machen kannst. Ich sollte glücklicher sein. Oh, wenn mein Geist stärker wäre!!! Nun Gott mit mir! Amen.<br>\",\"eng\":\"Very unsettled sleep in the last few weeks. I always dream of my duties. Dreams that always bring me to the edge of awakening. Only masturbated 3 times in the last 2 months. / <br>Against my will, my company disgusts me. They often seem to me not like human beings but caricatures. Common rabble. I <span class='underline_single'>don't</span> hate them but they disgust me. Full alert today. My commander is very gracious with me. Thinking of the purpose of life. That’s still the best thing you can do. I should be happier. Oh if my spirit were stronger!!! Now God be with me! Amen.<br>\",\"date\":\"1916-05-28\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,15v[2]\",\"ger\":\"\",\"eng\":\"\",\"date\":\"1916-05-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,15v[3] et 16r[1]\",\"ger\":\"Kolossale Strapazen im letzten Monat. Habe viel über alles / mögliche nachgedacht kann aber merkwürdigerweise nicht die Verbindung mit meinen mathematischen Gedankengängen herstellen.<br>\",\"eng\":\"Enormous hardship in the last month. Have thought a lot about every possible subject but strangely I can’t make the connection with my mathematical trains of thought.<br>\",\"date\":\"1916-07-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,16r[2]\",\"ger\":\"Aber die Verbindung wird hergestellt werden!<br>Was sich nicht sagen läßt, <span class='underline_single'>läßt</span> sich nicht sagen!<br>\",\"eng\":\"But the connection will be made!<br>What cannot be said, <span class='underline_single'>can</span><span class='underline_single'>not</span> be said!<br>\",\"date\":\"1916-07-07\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,16r[3]\",\"ger\":\"Leider, leider! Ich habe keine Ruhe zum Arbeiten!<br>\",\"eng\":\"Very unfortunately, I have no peace for work!<br>\",\"date\":\"1916-07-08\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"recto\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,16r[4] et 16v[1]\",\"ger\":\"Ärgere dich nicht über die Menschen. Die Menschen sind graue Schufte. Und doch darfst du dich nicht über sie ärgern. Ihre Worte dürfen nicht in dich dringen. Wenn sie mich nicht anreden ist es noch leicht / die Ruhe zu bewahren. Aber wenn sie dir gegenüber frech und grob werden dann wallt es in mir auf. Ärgere dich nicht. Ärgern nützt dich gar nichts.<br>\",\"eng\":\"Don’t get annoyed with people.  People are grey villains. And yet you mustn’t get annoyed with them. Their words mustn’t get under your skin. If they don’t speak to me, it’s still easy to stay calm. But when they become insulting and rude to you, then it wells up in me. Don’t get annoyed. Getting annoyed doesn’t do you any good. <br>\",\"date\":\"1916-07-09\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,16v[2]\",\"ger\":\"Die Gnade der Arbeit.<br>\",\"eng\":\"The blessing of work.<br>\",\"date\":\"1916-07-14\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,16v[3]\",\"ger\":\"Furchtbare Witterung. Im Gebirge, schlecht, ganz unzureichend geschützt eisige Kälte, Regen und Nebel. Qualvolles Leben. Furchtbar schwierig sich nicht zu verlieren. Denn ich bin ja ein schwacher Mensch. Aber der Geist hilft mir. Am besten wär's ich wäre schon krank dann hätte ich wenigstens ein bißchen Ruhe.<br>\",\"eng\":\"Terrible weather. In the mountains, miserable, quite hopelessly protected from the icy cold, rain, and fog. A life full of torment. Terribly difficult not to lose oneself. Because I am indeed a weak man. But the spirit helps me. It would be best if I were already ill, then at least I would have a little rest.<br>\",\"date\":\"1916-07-16\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,17v[1]\",\"ger\":\"Ärgere mich noch immer. Bin ein schwacher Mensch.<br>\",\"eng\":\"Still get annoyed. Am a weak man.<br>\",\"date\":\"1916-07-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,17v[2]\",\"ger\":\"Arbeite nur fort damit du gut wirst.<br>\",\"eng\":\"Keep on working so that you may become good.<br>\",\"date\":\"1916-07-20\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,17v[3]\",\"ger\":\"Werden beschossen. Und bei jedem Schuß zuckt meine Seele zusammen. Ich möchte so gerne noch weiter leben!<br>\",\"eng\":\"Taking fire. And with every shot my soul flinches. I want so much to stay alive!<br>\",\"date\":\"1916-07-24\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,17v[4] et 18v[1]\",\"ger\":\"Rührenden Brief von David. Er schreibt, sein Bruder sei in Frankreich gefallen. Schrecklich! Dieser liebe freundliche Brief öffnet mir die Augen darüber wie ich hier in der <span class='underline_single'>Verbannung</span> lebe. Es mag eine heilsame / Verbannung sein aber ich fühle sie jetzt als Verbannung. Ich bin unter lauter Larven verbannt und muß mit diesen unter den widerlichsten Umständen leben. Und in dieser Umgebung soll ich ein gutes Leben führen und mich läutern. Aber das ist <span class='underline_double'>furchtbar</span> schwer! Ich bin zu schwach. Ich bin zu schwach! Gott helfe mir.<br>\",\"eng\":\"Moving letter from David. He writes that his brother died in France. Dreadful! This dear friendly letter opens my eyes to the way in which I live in <span class='underline_single'>exile</span> here. It may be a salutary exile, but at the moment I feel it as an exile. I’m exiled among monsters and must live with them in the most repulsive circumstances. And in this company I ought to lead a good life and purify myself. But that's <span class='underline_double'>terribly</span> difficult! I’m too weak. I’m too weak. God help me.<br>\",\"date\":\"1916-07-26\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,18v[2] et 19v[1]\",\"ger\":\"Wurde gestern beschossen. War verzagt! Ich hatte Angst vor dem Tode! <br>Solch einen Wunsch habe ich jetzt zu leben! Und es ist schwer auf das Leben zu verzichten wenn man es / einmal gern hat. Das ist eben „Sünde”, unvernünftiges Leben, falsche Lebensauffassung. Ich werde von Zeit zu Zeit zum <span class='underline_single'>Tier</span>. Dann kann ich an nichts denken als an essen, trinken schlafen. Furchtbar! Und dann leide ich auch wie ein Tier, ohne die Möglichkeit innerer Rettung. Ich bin dann meinen Gelüsten und meinen Abneigungen preisgegeben. Dann ist an ein wahres Leben nicht zu denken.<br>Was under fire yesterday. Was despondent! I was afraid of death!<br>\",\"eng\":\"I now have such a desire to live! And it's hard to give up life when one has come to want it. That is just \\\"sin\\\", unreasonable life, a mistaken outlook on life. Every so often I become an <span class='underline_single'>animal</span>. Then I can think of nothing but eating, drinking, sleeping. Terrible. And then I suffer like an animal too, without the possibility of inner salvation. I am then at the mercy of my appetites and antipathies. Then a true life is out of the question.<br>\",\"date\":\"1916-07-29\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,19v[2] et 20v[1]\",\"ger\":\"Komisch: Heute ärgere ich mich darüber daß ich / bei der Infanterie wo ich jetzt in Verpflegung bin nicht Offiziersmenage bekomme wie mir anfangs in Aussicht gestellt wurde. Ich benehme mich also im höchsten Grade kindisch und schlecht.\\nAber trotzdem kann ich meinen Ärger über das erlittene Unrecht nicht bemeistern. Immer wieder muß ich daran denken, und wie ihm etwa abgeholfen werden könnte. So dumm ist der Mensch.<br>\",\"eng\":\"Funny: Today I am annoyed that in the infantry, where I am now billeted, I do not get the officers' rations as was initially promised to me. So I’m behaving extremely childishly, and badly.\\nBut still I can’t cope with my annoyance at the injustice suffered. I have to keep thinking about it and how it could be remedied. People are so stupid.<br>\",\"date\":\"1916-07-30\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,20v[2] et 21v[1]\",\"ger\":\"Nach 3 Tagen Bahnfahrt auf dem Marsch in die Feuerstellung. Nicht bei bester Gesundheit und durch die  / Borniertheit und Gemeinheit meiner Umgebung seelisch marod. Gott gib mir Kraft, innere Stärke, der seelischen Krankheit zu trotzen. Gott erhalte mich bei frohem Mute.<br>\",\"eng\":\"Marching to the firing line, after a 3 day rail journey. Not in the best of health and feeling run down, due to the narrow-mindedness and viciousness of my company. God give me the power, the inner strength, to resist sickness of the soul. God save me with joyful courage.<br>\",\"date\":\"1916-08-06\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,21v[2]\",\"ger\":\"Lebe in der Sünde dahin, d.h. unglücklich. Bin verdrossen, freudlos. Lebe mit meiner ganzen Umgebung in Unfrieden.<br>\",\"eng\":\"Live on in sin, i.e. unhappily. Am morose, joyless. Live at odds with everyone around me.<br>\",\"date\":\"1916-08-11\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,21v[3] et 22v[1]\",\"ger\":\"Du weißt was du zu tun hast um glücklich zu leben; warum tust du es nicht? Weil du unvernünftig bist. Ein schlechtes Leben / ist ein unvernünftiges Leben. Es kommt darauf an sich nicht zu ärgern.<br>\",\"eng\":\"You know what you have to do to live happily; why don’t you do it? Because you’re unreasonable. A bad life is an unreasonable life. It is important not to get annoyed.<br>\",\"date\":\"1916-08-12\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,22v[2]\",\"ger\":\"Kämpfe noch vergebens gegen meine schwache Natur. Gott stärke mich!\\n——<br>\",\"eng\":\"\",\"date\":\"1916-08-13\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,22v[3]\",\"ger\":\"Von Gemeinheit umgeben! Soll in absehbarer Zeit zum Kader ins Hinterland abgehen. Bin froh darüber. Von Gemeinheit umgeben.<br>\",\"eng\":\"Surrounded by viciousness. Should leave for a unit behind the lines in the foreseeable future. I'm happy about it. Surrounded by viciousness.<br>\",\"date\":\"1916-08-19\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,52v[1]\",\"ger\":\"Bin deprimiert. Allein allein! Gott sei Dank: Loos lebt.<br>\",\"eng\":\"Am depressed. Alone alone! Thank God: Loos is alive.<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"},{\"type\":\"verso\",\"manuscript\":\"Ms-103,55v[1]\",\"ger\":\"Unter Schmerzen: [Comment on writing of opposite page 56r.]<br>\",\"eng\":\"In pain: [Comment on writing of opposite page 56r.]<br>\",\"date\":\"\",\"pt-number\":\"\",\"pt-page\":\"\",\"tlp-number\":\"\",\"cross-references\":\"\",\"original-type\":\"verso\"}];\n\n//# sourceURL=webpack:///./src/verso.json?");

/***/ })

/******/ });